!function(e){function t(t){for(var a,r,u=t[0],s=t[1],i=t[2],f=0,d=[];f<u.length;f++)r=u[f],l[r]&&d.push(l[r][0]),l[r]=0;for(a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a]);for(c&&c(t);d.length;)d.shift()();return o.push.apply(o,i||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],a=!0,u=1;u<n.length;u++){var s=n[u];0!==l[s]&&(a=!1)}a&&(o.splice(t--,1),e=r(r.s=n[0]))}return e}var a={},l={1:0},o=[];function r(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=a,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./";var u=window.webpackJsonp=window.webpackJsonp||[],s=u.push.bind(u);u.push=t,u=u.slice();for(var i=0;i<u.length;i++)t(u[i]);var c=s;o.push([679,0]),n()}({121:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),o=n(76),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentDidUpdate",value:function(){this.props.showing&&clearTimeout(this.dismissTimer)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.dismissTimer)}},{key:"render",value:function(){return l.default.createElement(o.Collapse,{in:this.props.showing},l.default.createElement("div",{style:{position:"fixed",top:30,left:0,right:0,textAlign:"center"}},l.default.createElement(o.Alert,{style:{display:"inline-block",width:500},bsStyle:this.props.bsStyle,onDismiss:this.props.onDismiss},this.props.message)))}}]),t}();t.default=s,s.propTypes={showing:r.default.bool.isRequired,onDismiss:r.default.func.isRequired,bsStyle:r.default.string,message:r.default.shape({}).isRequired},s.defaultProps={bsStyle:"success"}},275:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),o=n(77),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this,t=s.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?l.default.createElement("div",null,l.default.createElement("h3",{className:"title"},t.title),l.default.createElement("hr",null),l.default.createElement("p",{className:"text"},t.text)):l.default.createElement("div",null,"No Article with that key")}}]),t}(),c=function(e){var t=e.match;return l.default.createElement("div",{className:"articles"},l.default.createElement("h2",null,"Articles section"),l.default.createElement("ul",{className:"articles"},s.map(function(e){return l.default.createElement("li",{className:"article",key:e.key},l.default.createElement(o.Link,{to:t.url+"/"+e.key},e.title))})),l.default.createElement(o.Route,{path:t.url+"/:articleId",component:i}))};i.propTypes={match:r.default.shape({params:r.default.shape({articleId:r.default.string.isRequired})}).isRequired},c.propTypes={match:r.default.shape({}).isRequired},t.default=c},276:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a,l=n(0),o=(a=l)&&a.__esModule?a:{default:a};t.default=function(){return o.default.createElement("p",null,"Page Not Fount")}},278:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=f(n(0)),o=n(77),r=f(n(2)),u=f(n(122)),s=f(n(277)),i=n(76),c=f(n(121));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={showing:!1,toastVisible:!1,toastMessage:"",toastType:"success"},n.showModal=n.showModal.bind(n),n.hideModal=n.hideModal.bind(n),n.submit=n.submit.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"showModal",value:function(){this.setState({showing:!0})}},{key:"hideModal",value:function(){this.setState({showing:!1})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"submit",value:function(e){var t=this;e.preventDefault(),this.hideModal();var n=document.forms.issueAdd,a={owner:n.owner.value,title:n.title.value,status:"New",created:new Date};fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(function(e){e.ok?e.json().then(function(e){t.props.history.push("/issues/"+e._id)}):e.json().then(function(e){t.showError("Failed to add issue: "+e.message)})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"render",value:function(){return l.default.createElement(i.NavItem,{onClick:this.showModal},l.default.createElement(u.default,{icon:s.default}),"Â Create Issue",l.default.createElement(i.Modal,{keyboard:!0,show:this.state.showing,onHide:this.hideModal},l.default.createElement(i.Modal.Header,{closeButton:!0},l.default.createElement(i.Modal.Title,null,"Create Issue")),l.default.createElement(i.Modal.Body,null,l.default.createElement(i.Form,{name:"issueAdd"},l.default.createElement(i.FormGroup,null,l.default.createElement(i.ControlLabel,null,"Title"),l.default.createElement(i.FormControl,{name:"title",autoFocus:!0})),l.default.createElement(i.FormGroup,null,l.default.createElement(i.ControlLabel,null,"Owner"),l.default.createElement(i.FormControl,{name:"owner"})))),l.default.createElement(i.Modal.Footer,null,l.default.createElement(i.ButtonToolbar,null,l.default.createElement(i.Button,{type:"button",bsStyle:"primary",onClick:this.submit},"Submit"),l.default.createElement(i.Button,{bsStyle:"default",onClick:this.hideModal},"Cancel")))),l.default.createElement(c.default,{showing:this.state.toastVisible,message:this.state.toastMessage,onDismiss:this.dismissToast,bsStyle:this.state.toastType}))}}]),t}();d.propTypes={history:r.default.shape({push:r.default.func.isRequired}).isRequired},t.default=(0,o.withRouter)(d)},280:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Header=t.Home=void 0;var a=c(n(0)),l=n(76),o=n(185),r=n(77),u=c(n(122)),s=c(n(279)),i=c(n(278));function c(e){return e&&e.__esModule?e:{default:e}}var f=a.default.createElement(r.Link,{to:"/home"},"Issue Tracker");t.Home=function(){return a.default.createElement("div",{className:"home"},a.default.createElement("h1",null,"Home Section contents"))},t.Header=function(){return a.default.createElement(l.Navbar,{fluid:!0},a.default.createElement(l.Navbar.Header,null,a.default.createElement(l.Navbar.Brand,null,f),a.default.createElement(l.Navbar.Toggle,null)),a.default.createElement(l.Navbar.Collapse,null,a.default.createElement(l.Nav,null,a.default.createElement(o.LinkContainer,{to:"/home"},a.default.createElement(l.NavItem,null,"Home")),a.default.createElement(o.LinkContainer,{to:"/issues"},a.default.createElement(l.NavItem,null,"Issues")),a.default.createElement(o.LinkContainer,{to:"/reports"},a.default.createElement(l.NavItem,null,"Reports")),a.default.createElement(o.LinkContainer,{to:"/articles"},a.default.createElement(l.NavItem,null,"Articles"))),a.default.createElement(l.Nav,{pullRight:!0},a.default.createElement(i.default,null),a.default.createElement(l.NavDropdown,{id:"user-dropdown",title:a.default.createElement(u.default,{icon:s.default}),noCaret:!0},a.default.createElement(l.MenuItem,null,"Logout")))))},t.Footer=function(){return a.default.createElement("div",{className:"footer"},a.default.createElement("h5",null,a.default.createElement("small",null," Full source code available at this Â ",a.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))))}},281:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=u(n(0)),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.editFormat(e.value),focused:!1,valid:!0},n.onBlur=n.onBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),l(t,null,[{key:"displayFormat",value:function(e){return null!=e&&""!==e?new Date(e).toDateString():""}},{key:"editFormat",value:function(e){return null!=e&&""!==e?new Date(e).toISOString().substr(0,10):""}},{key:"unformat",value:function(e){var t=new Date(e);return Number.isNaN(t.getTime())?null:t}}]),l(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.props.value&&this.setState({value:t.editFormat(e.value)})}},{key:"onFocus",value:function(){this.setState({focused:!0})}},{key:"onBlur",value:function(e){var n=t.unformat(this.state.value),a=""===this.state.value||null!=n;a!==this.state.valid&&this.props.onValidityChange&&this.props.onValidityChange(e,a),this.setState({focused:!1,valid:a}),a&&this.props.onChange(e,n)}},{key:"onChange",value:function(e){e.target.value.match(/^[\d-]*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){var e=this.state.focused||!this.state.valid?this.state.value:t.displayFormat(this.props.value),n=Object.assign({},this.props);return delete n.onValidityChange,o.default.createElement("input",a({type:"text"},n,{value:e,placeholder:this.state.focused?"yyyy-mm-dd":null,onFocus:this.onFocus,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=s,s.propTypes={value:r.default.shape({}).isRequired,onChange:r.default.func.isRequired,onValidityChange:r.default.func.isRequired,name:r.default.string.isRequired}},282:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=u(n(0)),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),l(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),l(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return o.default.createElement("input",a({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=s,s.propTypes={value:r.default.number.isRequired,onChange:r.default.func.isRequired}},284:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=f(n(0)),o=f(n(2)),r=n(76),u=n(185),s=f(n(282)),i=f(n(281)),c=f(n(121));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issue:{_id:"",title:"",status:"",owner:"",effort:null,completionDate:null,created:null},invalidFields:{},showingValidation:!1,toastVisible:!1,toastMessage:"",toastType:"success"},n.onChange=n.onChange.bind(n),n.loadData=n.loadData.bind(n),n.onValidityChange=n.onValidityChange.bind(n),n.onSubmit=n.onSubmit.bind(n),n.dismissValidation=n.dismissValidation.bind(n),n.showValidation=n.showValidation.bind(n),n.showSuccess=n.showSuccess.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),a=void 0!==t?t:e.target.value;n[e.target.name]=a,this.setState({issue:n})}},{key:"onValidityChange",value:function(e,t){var n=Object.assign({},this.state.invalidFields);t?delete n[e.target.name]:n[e.target.name]=!0,this.setState({invalidFields:n})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault(),this.showValidation(),0===Object.keys(this.state.invalidFields).length&&fetch("/api/issues/"+this.props.match.params.id,{method:"put",headers:{"Content-type":"application/json"},body:JSON.stringify(this.state.issue)}).then(function(e){e.ok&&e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate)),t.setState({issue:e}),t.showSuccess("Updated Issue Successfully")})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created),t.completionDate=null!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(t){e.showError("Failed to fetch issue : "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server : "+t.message)})}},{key:"showValidation",value:function(){this.setState({showingValidation:!0})}},{key:"dismissValidation",value:function(){this.setState({showingValidation:!1})}},{key:"showSuccess",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"success"})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"render",value:function(){var e=this.state.issue,t=null;return 0!==Object.keys(this.state.invalidFields).length&&this.state.showingValidation&&(t=l.default.createElement(r.Alert,{bsStyle:"danger",onDismiss:this.dismissValidation},"Please correct invalid fields before submitting.")),l.default.createElement(r.Panel,null,l.default.createElement(r.Panel.Heading,null,"Edit Issue"),l.default.createElement(r.Panel.Body,null,l.default.createElement(r.Form,{horizontal:!0,onSubmit:this.onSubmit},l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"ID"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl.Static,null,e._id))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Created"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl.Static,null,e.created?e.created.toDateString():""))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Status"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{componentClass:"select",name:"status",value:e.status,onChange:this.onChange},l.default.createElement("option",{value:"New"},"New"),l.default.createElement("option",{value:"Open"},"Open"),l.default.createElement("option",{value:"Assigned"},"Assigned"),l.default.createElement("option",{value:"Fixed"},"Fixed"),l.default.createElement("option",{value:"Verified"},"Verified"),l.default.createElement("option",{value:"Closed"},"Closed")))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Owner"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{name:"owner",value:e.owner,onChange:this.onChange}))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Effort"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{componentClass:s.default,name:"effort",value:e.effort,onChange:this.onChange}))),l.default.createElement(r.FormGroup,{validationState:this.state.invalidFields.completionDate?"error":""},l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Completion Date"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{componentClass:i.default,name:"completionDate",value:e.completionDate,onChange:this.onChange,onValidityChange:this.onValidityChange}),l.default.createElement(r.FormControl.Feedback,null))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Title"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{name:"title",value:e.title,onChange:this.onChange}))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{smOffset:3,sm:6},l.default.createElement(r.ButtonToolbar,null,l.default.createElement(r.Button,{bsStyle:"primary",type:"submit"},"Submit"),l.default.createElement(u.LinkContainer,{to:"/issues"},l.default.createElement(r.Button,{bsStyle:"link"},"Back"))))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{smOffset:3,sm:9},t))),l.default.createElement(c.default,{message:this.state.toastMessage,bsStyle:this.state.toastType,showing:this.state.toastVisible,onDismiss:this.dismissToast})))}}]),t}();t.default=d,d.propTypes={match:o.default.shape({params:o.default.shape({id:o.default.string})}).isRequired}},285:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),o=u(n(2)),r=n(76);function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return l.default.createElement(r.Row,null,l.default.createElement(r.Col,{xs:6,sm:4,md:3,lg:2},l.default.createElement(r.FormGroup,null,l.default.createElement(r.ControlLabel,null,"Status"),l.default.createElement(r.FormControl,{componentClass:"select",value:this.state.status,onChange:this.onChangeStatus},l.default.createElement("option",{value:""},"(Any)"),l.default.createElement("option",{value:"New"},"New"),l.default.createElement("option",{value:"Open"},"Open"),l.default.createElement("option",{value:"Assigned"},"Assigned"),l.default.createElement("option",{value:"Fixed"},"Fixed"),l.default.createElement("option",{value:"Verified"},"Verified"),l.default.createElement("option",{value:"Closed"},"Closed")))),l.default.createElement(r.Col,{xs:6,sm:4,md:3,lg:2},l.default.createElement(r.FormGroup,null,l.default.createElement(r.ControlLabel,null,"Effort"),l.default.createElement(r.InputGroup,null,l.default.createElement(r.FormControl,{value:this.state.effort_gte,onChange:this.onChangeEffortGte}),l.default.createElement(r.InputGroup.Addon,null,"-"),l.default.createElement(r.FormControl,{value:this.state.effort_lte,onChange:this.onChangeEffortLte})))),l.default.createElement(r.Col,{xs:6,sm:4,md:3,lg:3},l.default.createElement(r.FormGroup,null,l.default.createElement(r.ControlLabel,null,"Â "),l.default.createElement(r.ButtonToolbar,null,l.default.createElement(r.Button,{bsStyle:"primary",onClick:this.applyFilter},"Apply"),l.default.createElement(r.Button,{onClick:this.resetFilter,disabled:!this.state.changed},"Reset"),l.default.createElement(r.Button,{onClick:this.clearFilter},"Clear")))))}}]),t}();s.propTypes={setFilter:o.default.func.isRequired,initFilter:o.default.shape({status:o.default.string.isRequired,effort_gte:o.default.string.isRequired,effort_lte:o.default.string.isRequired}).isRequired},t.default=s},435:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=d(n(0));n(434);var o=d(n(2)),r=n(77),u=n(76),s=d(n(122)),i=d(n(286)),c=d(n(285)),f=d(n(121));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issues:[],query:{status:"",effort_gte:"",effort_lte:""},toastVisible:!1,toastMessage:"",toastType:"success"},n.loadData=n.loadData.bind(n),n.setFilter=n.setFilter.bind(n),n.deleteIssue=n.deleteIssue.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n.setFilter(n.state.query),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(t){e.showError("Failed to fetch issue: "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server + "+t.message)})}},{key:"deleteIssue",value:function(e){var t=this;fetch("/api/issues/"+e,{method:"DELETE"}).then(function(e){e.ok?t.loadData():t.showError("Failed to delete issue")})}},{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement(u.Panel,null,l.default.createElement(u.Panel.Heading,null,l.default.createElement(u.Panel.Title,{toggle:!0},"Filter")),l.default.createElement(u.Panel.Collapse,null,l.default.createElement(u.Panel.Body,null,l.default.createElement(c.default,{setFilter:this.setFilter,initFilter:this.state.query})))),l.default.createElement(h,{issues:this.state.issues,deleteIssue:this.deleteIssue}),l.default.createElement(f.default,{showing:this.state.toastVisible,onDismiss:this.dismissToast,message:this.state.toastMessage,bsStyle:this.state.toastType}))}}]),t}(),m=function(e){return l.default.createElement("tr",null,l.default.createElement("td",null,l.default.createElement(r.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),l.default.createElement("td",null,e.issue.status),l.default.createElement("td",null,e.issue.owner),l.default.createElement("td",null,e.issue.created.toDateString()),l.default.createElement("td",null,e.issue.effort),l.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),l.default.createElement("td",null,e.issue.title),l.default.createElement("td",null,l.default.createElement(u.Button,{bsSize:"xsmall",onClick:function(){e.deleteIssue(e.issue._id)}},l.default.createElement(s.default,{icon:i.default}))))};function h(e){var t=e.issues.map(function(t){return l.default.createElement(m,{key:t._id,issue:t,deleteIssue:e.deleteIssue})});return l.default.createElement(u.Table,{bordered:!0,condensed:!0,hover:!0,responsive:!0},l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"Id"),l.default.createElement("th",null,"Status"),l.default.createElement("th",null,"Owner"),l.default.createElement("th",null,"Created"),l.default.createElement("th",null,"Effort"),l.default.createElement("th",null,"Completion date"),l.default.createElement("th",null,"Title"),l.default.createElement("th",null))),l.default.createElement("tbody",null,t))}m.propTypes={issue:o.default.shape({owner:o.default.string.isRequired,title:o.default.string.isRequired,_id:o.default.string,status:o.default.string,created:o.default.string,effort:o.default.number,completionDate:o.default.string}).isRequired,deleteIssue:o.default.func.isRequired},h.propTypes={issues:o.default.arrayOf({}).isRequired,deleteIssue:o.default.func.isRequired},p.propTypes={location:o.default.shape({pathname:o.default.string.isRequired,search:o.default.string.isRequired,query:o.default.shape({}).isRequired}).isRequired,history:o.default.shape({push:o.default.func.isRequired}).isRequired},t.default=p},678:function(e,t,n){"use strict";n(677);var a=f(n(0)),l=f(n(24)),o=n(77),r=f(n(435)),u=f(n(284)),s=n(280),i=f(n(276)),c=f(n(275));function f(e){return e&&e.__esModule?e:{default:e}}var d=document.getElementById("contents");l.default.render(a.default.createElement(function(){return a.default.createElement(o.BrowserRouter,null,a.default.createElement("div",{className:"container"},a.default.createElement(s.Header,null),a.default.createElement("hr",null),a.default.createElement(o.Switch,null,a.default.createElement(o.Route,{exact:!0,path:"/home",component:s.Home}),a.default.createElement(o.Route,{exact:!0,path:"/issues",component:(0,o.withRouter)(r.default)}),a.default.createElement(o.Route,{exact:!0,path:"/issues/:id",component:u.default}),a.default.createElement(o.Route,{path:"/articles",component:c.default}),a.default.createElement(o.Route,{path:"/*",component:i.default})),a.default.createElement(s.Footer,null)))},null),d)},679:function(e,t,n){e.exports=n(678)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(e){function t(t){for(var r,a,l=t[0],i=t[1],s=t[2],f=0,d=[];f<l.length;f++)a=l[f],u[a]&&d.push(u[a][0]),u[a]=0;for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r]);for(c&&c(t);d.length;)d.shift()();return o.push.apply(o,s||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,l=1;l<n.length;l++){var i=n[l];0!==u[i]&&(r=!1)}r&&(o.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},u={1:0},o=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},a.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="./";var l=window.webpackJsonp=window.webpackJsonp||[],i=l.push.bind(l);l.push=t,l=l.slice();for(var s=0;s<l.length;s++)t(l[s]);var c=i;o.push([70,0]),n()}({24:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=l(n(0)),o=n(14),a=l(n(2));function l(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),r(t,[{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement("p",null,"This is a placeholder for editing issue ",this.props.match.params.id),u.default.createElement(o.Link,{to:"/issues"},"Back to issue list"))}}]),t}();t.default=i,i.propTypes={params:a.default.shape({id:a.default.string}).isRequired}},25:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),u(t,[{key:"render",value:function(){return a.default.createElement("div",null,"This is a placeholder to Filter Issues.")}}]),t}();t.default=l},26:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=a(n(0)),o=a(n(2));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleSubmit=e.handleSubmit.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),r(t,[{key:"handleSubmit",value:function(e){e.preventDefault();var t=document.forms.issueAdd;this.props.createIssue({owner:t.owner.value,title:t.title.value,status:"New",created:new Date}),t.owner.value="",t.title.value=""}},{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement("form",{name:"issueAdd",onSubmit:this.handleSubmit},u.default.createElement("input",{type:"text",name:"owner",placeholder:"Owner"}),u.default.createElement("input",{type:"text",name:"title",placeholder:"Title"}),u.default.createElement("button",null,"Add")))}}]),t}();t.default=l,l.propTypes={createIssue:o.default.func.isRequired}},28:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=s(n(0));n(27);var o=s(n(2)),a=n(14),l=s(n(26)),i=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.state={issues:[]},e.createIssue=e.createIssue.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),r(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/").then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(e){alert("Failed to fetch issue: "+e.message)})}).catch(function(e){alert("Error in fetching data from server"+e)})}},{key:"createIssue",value:function(e){var t=this;fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){e.ok?e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate));var n=t.state.issues.concat(e);t.setState({issues:n})}):e.json().then(function(e){alert("Failed to add issue: "+e.message)})}).catch(function(e){alert("Error in sending Data to server : "+e.message)})}},{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement("h1",null,"Issue Tracker"),u.default.createElement(i.default,null),u.default.createElement("hr",null),u.default.createElement(d,{issues:this.state.issues}),u.default.createElement("hr",null),u.default.createElement(l.default,{createIssue:this.createIssue}))}}]),t}();t.default=c;var f=function(e){return u.default.createElement("tr",null,u.default.createElement("td",null,u.default.createElement(a.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),u.default.createElement("td",null,e.issue.status),u.default.createElement("td",null,e.issue.owner),u.default.createElement("td",null,e.issue.created.toDateString()),u.default.createElement("td",null,e.issue.effort),u.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),u.default.createElement("td",null,e.issue.title))};function d(e){var t=e.issues.map(function(e){return u.default.createElement(f,{key:e._id,issue:e})});return u.default.createElement("table",{className:"bordered-table"},u.default.createElement("thead",null,u.default.createElement("tr",null,u.default.createElement("th",null,"Id"),u.default.createElement("th",null,"Status"),u.default.createElement("th",null,"Owner"),u.default.createElement("th",null,"Created"),u.default.createElement("th",null,"Effort"),u.default.createElement("th",null,"Completion date"),u.default.createElement("th",null,"Title"))),u.default.createElement("tbody",null,t))}f.propTypes={issue:o.default.shape({owner:o.default.string.isRequired,title:o.default.string.isRequired,_id:o.default.string,status:o.default.string,created:o.default.string,effort:o.default.number,completionDate:o.default.string}).isRequired},d.propTypes={issues:o.default.arrayOf({}).isRequired}},69:function(e,t,n){"use strict";var r=i(n(0)),u=i(n(67)),o=n(14),a=i(n(28)),l=i(n(24));function i(e){return e&&e.__esModule?e:{default:e}}var s=document.getElementById("contents"),c=function(){return r.default.createElement("p",null,"Page Not Fount")};u.default.render(r.default.createElement(function(){return r.default.createElement(o.BrowserRouter,null,r.default.createElement(o.Switch,null,r.default.createElement(o.Redirect,{exact:!0,from:"/",to:"/issues"}),r.default.createElement(o.Route,{exact:!0,path:"/issues/",component:a.default}),r.default.createElement(o.Route,{exact:!0,path:"/issues/:id",component:l.default}),r.default.createElement(o.Route,{path:"*",component:c})))},null),s)},70:function(e,t,n){e.exports=n(69)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
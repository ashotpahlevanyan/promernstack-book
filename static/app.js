!function(e){function t(t){for(var r,u,o=t[0],i=t[1],s=t[2],f=0,d=[];f<o.length;f++)u=o[f],a[u]&&d.push(a[u][0]),a[u]=0;for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r]);for(c&&c(t);d.length;)d.shift()();return l.push.apply(l,s||[]),n()}function n(){for(var e,t=0;t<l.length;t++){for(var n=l[t],r=!0,o=1;o<n.length;o++){var i=n[o];0!==a[i]&&(r=!1)}r&&(l.splice(t--,1),e=u(u.s=n[0]))}return e}var r={},a={1:0},l=[];function u(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,u),n.l=!0,n.exports}u.m=e,u.c=r,u.d=function(e,t,n){u.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},u.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},u.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(t,"a",t),t},u.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},u.p="./";var o=window.webpackJsonp=window.webpackJsonp||[],i=o.push.bind(o);o.push=t,o=o.slice();for(var s=0;s<o.length;s++)t(o[s]);var c=i;l.push([401,0]),n()}({149:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=o(n(6)),l=n(56),u=o(n(11));function o(e){return e&&e.__esModule?e:{default:e}}var i=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){var e=this,t=i.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?a.default.createElement("div",null,a.default.createElement("h3",{className:"title"},t.title),a.default.createElement("hr",null),a.default.createElement("p",{className:"text"},t.text)):a.default.createElement("div",null,"No Article with that key")}}]),t}(),c=function(e){var t=e.match;return a.default.createElement("div",{className:"articles"},a.default.createElement("h2",null,"Articles section"),a.default.createElement("ul",{className:"articles"},i.map(function(e){return a.default.createElement("li",{className:"article",key:e.key},a.default.createElement(l.Link,{to:t.url+"/"+e.key},e.title))})),a.default.createElement(l.Route,{path:t.url+"/:articleId",component:s}))};s.propTypes={match:u.default.shape({params:u.default.shape({articleId:u.default.string.isRequired})}).isRequired},c.propTypes={match:u.default.shape({}).isRequired},t.default=c},150:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(6),l=(r=a)&&r.__esModule?r:{default:r};t.default=function(){return l.default.createElement("p",null,"Page Not Fount")}},151:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Header=t.Home=void 0;var r,a=n(6),l=(r=a)&&r.__esModule?r:{default:r};t.Home=function(){return l.default.createElement("div",{className:"home"},l.default.createElement("h1",null,"Home Section contents"))},t.Header=function(){return l.default.createElement("div",{className:"header"},l.default.createElement("h1",null,"Issue Tracker"))},t.Footer=function(){return l.default.createElement("div",{className:"footer"},"Full source code available at this ",l.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))}},152:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=o(n(6)),l=n(56),u=o(n(11));function o(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("p",null,"This is a placeholder for editing issue ",this.props.match.params.id),a.default.createElement(l.Link,{to:"/issues"},"Back to issue list"))}}]),t}();t.default=i,i.propTypes={match:u.default.shape({params:u.default.shape({id:u.default.string})}).isRequired}},153:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(6)),l=u(n(11));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.clearFilter=e.clearFilter.bind(e),e.setFilterOpen=e.setFilterOpen.bind(e),e.setFilterAssigned=e.setFilterAssigned.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"setFilterOpen",value:function(e){e.preventDefault(),this.props.setFilter({status:"Open"})}},{key:"setFilterAssigned",value:function(e){e.preventDefault(),this.props.setFilter({status:"Assigned"})}},{key:"clearFilter",value:function(e){e.preventDefault(),this.props.setFilter({})}},{key:"render",value:function(){var e=function(){return a.default.createElement("span",null," | ")};return a.default.createElement("div",null,a.default.createElement("button",{onClick:this.clearFilter},"All Issues"),a.default.createElement(e,null),a.default.createElement("button",{onClick:this.setFilterOpen},"Open Issues"),a.default.createElement(e,null),a.default.createElement("button",{onClick:this.setFilterAssigned},"Assigned Issues"))}}]),t}();t.default=o,o.propTypes={setFilter:l.default.func.isRequired}},154:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(6)),l=u(n(11));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleSubmit=e.handleSubmit.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"handleSubmit",value:function(e){e.preventDefault();var t=document.forms.issueAdd;this.props.createIssue({owner:t.owner.value,title:t.title.value,status:"New",created:new Date}),t.owner.value="",t.title.value=""}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("form",{name:"issueAdd",onSubmit:this.handleSubmit},a.default.createElement("input",{type:"text",name:"owner",placeholder:"Owner"}),a.default.createElement("input",{type:"text",name:"title",placeholder:"Title"}),a.default.createElement("button",null,"Add")))}}]),t}();t.default=o,o.propTypes={createIssue:l.default.func.isRequired}},156:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(6));n(155);var l=s(n(11)),u=n(56),o=s(n(154)),i=s(n(153));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.state={issues:[]},r.createIssue=r.createIssue.bind(r),r.loadData=r.loadData.bind(r),r.setFilter=r.setFilter.bind(r),r.setFilter({}),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.props.history.push({pathname:this.props.location.pathname,search:e.status?"status="+e.status:""})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(e){alert("Failed to fetch issue: "+e.message)})}).catch(function(e){alert("Error in fetching data from server + "+e.message)})}},{key:"createIssue",value:function(e){var t=this;fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){e.ok?e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate));var n=t.state.issues.concat(e);t.setState({issues:n})}):e.json().then(function(e){alert("Failed to add issue: "+e.message)})}).catch(function(e){alert("Error in sending Data to server : "+e.message)})}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement(i.default,{setFilter:this.setFilter}),a.default.createElement("hr",null),a.default.createElement(d,{issues:this.state.issues}),a.default.createElement("hr",null),a.default.createElement(o.default,{createIssue:this.createIssue}))}}]),t}(),f=function(e){return a.default.createElement("tr",null,a.default.createElement("td",null,a.default.createElement(u.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),a.default.createElement("td",null,e.issue.status),a.default.createElement("td",null,e.issue.owner),a.default.createElement("td",null,e.issue.created.toDateString()),a.default.createElement("td",null,e.issue.effort),a.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),a.default.createElement("td",null,e.issue.title))};function d(e){var t=e.issues.map(function(e){return a.default.createElement(f,{key:e._id,issue:e})});return a.default.createElement("table",{className:"bordered-table"},a.default.createElement("thead",null,a.default.createElement("tr",null,a.default.createElement("th",null,"Id"),a.default.createElement("th",null,"Status"),a.default.createElement("th",null,"Owner"),a.default.createElement("th",null,"Created"),a.default.createElement("th",null,"Effort"),a.default.createElement("th",null,"Completion date"),a.default.createElement("th",null,"Title"))),a.default.createElement("tbody",null,t))}f.propTypes={issue:l.default.shape({owner:l.default.string.isRequired,title:l.default.string.isRequired,_id:l.default.string,status:l.default.string,created:l.default.string,effort:l.default.number,completionDate:l.default.string}).isRequired},d.propTypes={issues:l.default.arrayOf({}).isRequired},c.propTypes={location:l.default.shape({pathname:l.default.string.isRequired,search:l.default.string.isRequired}).isRequired,history:l.default.shape({push:l.default.func.isRequired}).isRequired},t.default=c},400:function(e,t,n){"use strict";n(399);var r=f(n(6)),a=f(n(195)),l=n(56),u=f(n(156)),o=f(n(152)),i=n(151),s=f(n(150)),c=f(n(149));function f(e){return e&&e.__esModule?e:{default:e}}var d=document.getElementById("contents");a.default.render(r.default.createElement(function(){return r.default.createElement(l.BrowserRouter,null,r.default.createElement("div",null,r.default.createElement(i.Header,null),r.default.createElement("ul",null,r.default.createElement("li",null,r.default.createElement(l.Link,{to:"/"},"Home")),r.default.createElement("li",null,r.default.createElement(l.Link,{to:"/issues"},"Issues")),r.default.createElement("li",null,r.default.createElement(l.Link,{to:"/articles"},"Articles"))),r.default.createElement("hr",null),r.default.createElement(l.Switch,null,r.default.createElement(l.Route,{exact:!0,path:"/",component:i.Home}),r.default.createElement(l.Route,{exact:!0,path:"/issues",component:(0,l.withRouter)(u.default)}),r.default.createElement(l.Route,{exact:!0,path:"/issues/:id",component:o.default}),r.default.createElement(l.Route,{path:"/articles",component:c.default}),r.default.createElement(l.Route,{path:"/*",component:s.default})),r.default.createElement(i.Footer,null)))},null),d)},401:function(e,t,n){e.exports=n(400)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
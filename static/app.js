!function(e){function t(t){for(var a,l,i=t[0],u=t[1],s=t[2],f=0,d=[];f<i.length;f++)l=i[f],o[l]&&d.push(o[l][0]),o[l]=0;for(a in u)Object.prototype.hasOwnProperty.call(u,a)&&(e[a]=u[a]);for(c&&c(t);d.length;)d.shift()();return r.push.apply(r,s||[]),n()}function n(){for(var e,t=0;t<r.length;t++){for(var n=r[t],a=!0,i=1;i<n.length;i++){var u=n[i];0!==o[u]&&(a=!1)}a&&(r.splice(t--,1),e=l(l.s=n[0]))}return e}var a={},o={1:0},r=[];function l(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,l),n.l=!0,n.exports}l.m=e,l.c=a,l.d=function(e,t,n){l.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},l.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="./";var i=window.webpackJsonp=window.webpackJsonp||[],u=i.push.bind(i);i.push=t,i=i.slice();for(var s=0;s<i.length;s++)t(i[s]);var c=u;r.push([433,0]),n()}({158:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=l(n(1)),r=l(n(4));function l(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return a.getChildContext=a.getChildContext.bind(a),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"getChildContext",value:function(){return{initialState:this.props.initialState}}},{key:"render",value:function(){return this.props.children}}]),t}();t.default=i,i.childContextTypes={initialState:r.default.shape({})},i.propTypes={children:r.default.shape({}).isRequired,initialState:r.default.shape({})}},159:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(110);var a,o=n(1),r=(a=o)&&a.__esModule?a:{default:a};var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),t}();t.default=l},160:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=i(n(1)),r=n(35),l=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}var u=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"render",value:function(){var e=this,t=u.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?o.default.createElement("div",null,o.default.createElement("h3",{className:"title"},t.title),o.default.createElement("hr",null),o.default.createElement("p",{className:"text"},t.text)):o.default.createElement("div",null,"No Article with that key")}}]),t}(),c=function(e){var t=e.match;return o.default.createElement("div",{className:"articles"},o.default.createElement("h2",null,"Articles section"),o.default.createElement("ul",{className:"articles"},u.map(function(e){return o.default.createElement("li",{className:"article",key:e.key},o.default.createElement(r.Link,{to:t.url+"/"+e.key},e.title))})),o.default.createElement(r.Route,{path:t.url+"/:articleId",component:s}))};s.propTypes={match:l.default.shape({params:l.default.shape({articleId:l.default.string.isRequired})}).isRequired},c.propTypes={match:l.default.shape({}).isRequired},t.default=c},161:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a,o=n(1),r=(a=o)&&a.__esModule?a:{default:a};t.default=function(){return r.default.createElement("p",null,"Page Not Fount")}},163:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=f(n(1)),r=n(35),l=f(n(4)),i=f(n(75)),u=f(n(162)),s=n(47),c=f(n(74));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={showing:!1,toastVisible:!1,toastMessage:"",toastType:"success"},n.showModal=n.showModal.bind(n),n.hideModal=n.hideModal.bind(n),n.submit=n.submit.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"showModal",value:function(e){e.preventDefault(),this.setState({showing:!0})}},{key:"hideModal",value:function(){this.setState({showing:!1})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"submit",value:function(e){var t=this;e.preventDefault(),this.hideModal();var n=document.forms.issueAdd,a={owner:n.owner.value,title:n.title.value,status:"New",created:new Date};fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(function(e){e.ok?e.json().then(function(e){t.props.history.push("/issues/"+e._id)}):e.json().then(function(e){t.showError("Failed to add issue: "+e.message)})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"render",value:function(){return o.default.createElement(s.NavItem,{className:"float-right d-flex align-items-center"},o.default.createElement(r.Link,{to:"",onClick:this.showModal,style:{"text-decoration":"none"}},o.default.createElement(i.default,{icon:u.default}),"Â Create Issue"),o.default.createElement(s.Modal,{isOpen:this.state.showing,toggle:this.hideModal},o.default.createElement(s.ModalHeader,{toggle:this.hideModal},"Create Issue"),o.default.createElement(s.ModalBody,null,o.default.createElement(s.Form,{name:"issueAdd"},o.default.createElement(s.FormGroup,null,o.default.createElement(s.Label,null,"Title"),o.default.createElement(s.Input,{name:"title",autoFocus:!0})),o.default.createElement(s.FormGroup,null,o.default.createElement(s.Label,null,"Owner"),o.default.createElement(s.Input,{name:"owner"})))),o.default.createElement(s.ModalFooter,null,o.default.createElement("div",null,o.default.createElement(s.Button,{type:"button",color:"primary",onClick:this.submit},"Submit")," ",o.default.createElement(s.Button,{color:"secondary",onClick:this.hideModal},"Cancel")))),o.default.createElement(c.default,{showing:this.state.toastVisible,message:this.state.toastMessage,onDismiss:this.dismissToast,bsStyle:this.state.toastType}))}}]),t}();d.propTypes={history:l.default.shape({push:l.default.func.isRequired}).isRequired},t.default=(0,r.withRouter)(d)},166:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Home=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=d(n(1)),r=n(47),l=n(112),i=n(35),u=d(n(75)),s=d(n(165)),c=d(n(164)),f=d(n(163));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.toggle=n.toggle.bind(n),n.dropdownToggle=n.dropdownToggle.bind(n),n.onBlur=n.onBlur.bind(n),n.state={isOpen:!1,dropdownOpen:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"toggle",value:function(){this.setState({isOpen:!this.state.isOpen})}},{key:"dropdownToggle",value:function(){this.setState({dropdownOpen:!this.state.dropdownOpen})}},{key:"onBlur",value:function(){this.setState({isOpen:!1})}},{key:"render",value:function(){return o.default.createElement(r.Navbar,{expand:"md",light:!0,onBlur:this.onBlur,style:{"background-color":"#abcdef"}},o.default.createElement(r.NavbarBrand,{tag:i.Link,to:"/home",href:"/home",style:{"text-decoration":"none"}},"Issue Tracker"),o.default.createElement(r.NavbarToggler,{onClick:this.toggle},o.default.createElement(u.default,{icon:c.default})),o.default.createElement(r.Collapse,{isOpen:this.state.isOpen,navbar:!0,style:{"justify-content":"space-between"}},o.default.createElement(r.Nav,{navbar:!0},o.default.createElement(r.NavItem,{active:!0},o.default.createElement(l.LinkContainer,{to:"/home"},o.default.createElement(r.NavLink,null,"Home"))),o.default.createElement(r.NavItem,null,o.default.createElement(l.LinkContainer,{to:"/issues"},o.default.createElement(r.NavLink,null,"Issues"))),o.default.createElement(r.NavItem,null,o.default.createElement(l.LinkContainer,{to:"/reports"},o.default.createElement(r.NavLink,null,"Reports"))),o.default.createElement(r.NavItem,null,o.default.createElement(l.LinkContainer,{to:"/articles"},o.default.createElement(r.NavLink,null,"Articles")))),o.default.createElement(r.Nav,null,o.default.createElement(f.default,null),o.default.createElement(r.Dropdown,{nav:!0,isOpen:this.state.dropdownOpen,toggle:this.dropdownToggle},o.default.createElement(r.DropdownToggle,{id:"user-dropdown",nav:!0,color:"link"},o.default.createElement(u.default,{icon:s.default})),o.default.createElement(r.DropdownMenu,{right:!0},o.default.createElement(r.DropdownItem,null,"Logout"))))))}}]),t}();t.default=p,t.Home=function(){return o.default.createElement("div",{className:"home"},o.default.createElement("h1",null,"Home Section contents"))},t.Footer=function(){return o.default.createElement("div",{className:"footer"},o.default.createElement("h5",null,o.default.createElement("small",null," Full source code available at this Â ",o.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))))}},167:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=i(n(1)),l=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.editFormat(e.value),focused:!1,valid:!0},n.onBlur=n.onBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),o(t,null,[{key:"displayFormat",value:function(e){return null!=e&&""!==e?new Date(e).toDateString():""}},{key:"editFormat",value:function(e){return null!=e&&""!==e?new Date(e).toISOString().substr(0,10):""}},{key:"unformat",value:function(e){var t=new Date(e);return Number.isNaN(t.getTime())?null:t}}]),o(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.props.value&&this.setState({value:t.editFormat(e.value)})}},{key:"onFocus",value:function(){this.setState({focused:!0})}},{key:"onBlur",value:function(e){var n=t.unformat(this.state.value),a=""===this.state.value||null!=n;a!==this.state.valid&&this.props.onValidityChange&&this.props.onValidityChange(e,a),this.setState({focused:!1,valid:a}),a&&this.props.onChange(e,n)}},{key:"onChange",value:function(e){e.target.value.match(/^[\d-]*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){var e=this.state.focused||!this.state.valid?this.state.value:t.displayFormat(this.props.value),n=Object.assign({},this.props);return delete n.onValidityChange,r.default.createElement("input",a({type:"text"},n,{value:e,placeholder:this.state.focused?"yyyy-mm-dd":null,onFocus:this.onFocus,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=u,u.propTypes={value:l.default.shape({}).isRequired,onChange:l.default.func.isRequired,onValidityChange:l.default.func.isRequired,name:l.default.string.isRequired}},168:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=i(n(1)),l=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),o(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),o(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return r.default.createElement("input",a({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=u,u.propTypes={value:l.default.number.isRequired,onChange:l.default.func.isRequired}},170:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=f(n(1)),r=f(n(4)),l=n(47),i=n(112),u=f(n(168)),s=f(n(167)),c=f(n(74));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n)),o=n.initialState.data;return o.created=new Date(o.created),o.completionDate=null!=o.completionDate?new Date(o.completionDate):null,a.state={issue:o,invalidFields:{},showingValidation:!1,toastVisible:!1,toastMessage:"",toastType:"success"},a.onChange=a.onChange.bind(a),a.loadData=a.loadData.bind(a),a.onValidityChange=a.onValidityChange.bind(a),a.onSubmit=a.onSubmit.bind(a),a.dismissValidation=a.dismissValidation.bind(a),a.showValidation=a.showValidation.bind(a),a.showSuccess=a.showSuccess.bind(a),a.showError=a.showError.bind(a),a.dismissToast=a.dismissToast.bind(a),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),a=void 0!==t?t:e.target.value;n[e.target.name]=a,this.setState({issue:n})}},{key:"onValidityChange",value:function(e,t){var n=Object.assign({},this.state.invalidFields);t?delete n[e.target.name]:n[e.target.name]=!0,this.setState({invalidFields:n})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault(),this.showValidation(),0===Object.keys(this.state.invalidFields).length&&fetch("/api/issues/"+this.props.match.params.id,{method:"put",headers:{"Content-type":"application/json"},body:JSON.stringify(this.state.issue)}).then(function(e){e.ok&&e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate)),t.setState({issue:e}),t.showSuccess("Updated Issue Successfully")})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created),t.completionDate=null!=t.completionDate&&""!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(t){e.showError("Failed to fetch issue : "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server : "+t.message)})}},{key:"showValidation",value:function(){this.setState({showingValidation:!0})}},{key:"dismissValidation",value:function(){this.setState({showingValidation:!1})}},{key:"showSuccess",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"success"})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"render",value:function(){var e=this.state.issue,t=null;return 0!==Object.keys(this.state.invalidFields).length&&this.state.showingValidation&&(t=o.default.createElement(l.Alert,{color:"danger",onDismiss:this.dismissValidation},"Please correct invalid fields before submitting.")),o.default.createElement(l.Card,{id:"issueEdit"},o.default.createElement(l.CardBody,null,o.default.createElement(l.CardTitle,null,"Edit Issue"),o.default.createElement(l.Form,{horizontal:!0,onSubmit:this.onSubmit},o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{tag:l.Label,sm:3},"ID"),o.default.createElement(l.Col,{sm:9},o.default.createElement(l.Input,{plaintext:!0},e._id))),o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{tag:l.Label,sm:3},"Created"),o.default.createElement(l.Col,{sm:9},o.default.createElement(l.Input,{type:"text",value:e.created?e.created.toDateString():""}))),o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{tag:l.Label,sm:3},"Status"),o.default.createElement(l.Col,{sm:9},o.default.createElement(l.Input,{type:"select",name:"status",value:e.status,onChange:this.onChange},o.default.createElement("option",{value:"New"},"New"),o.default.createElement("option",{value:"Open"},"Open"),o.default.createElement("option",{value:"Assigned"},"Assigned"),o.default.createElement("option",{value:"Fixed"},"Fixed"),o.default.createElement("option",{value:"Verified"},"Verified"),o.default.createElement("option",{value:"Closed"},"Closed")))),o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{tag:l.Label,sm:3},"Owner"),o.default.createElement(l.Col,{sm:9},o.default.createElement(l.Input,{name:"owner",value:e.owner,onChange:this.onChange}))),o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{tag:l.Label,sm:3},"Effort"),o.default.createElement(l.Col,{sm:9},o.default.createElement(l.Input,{tag:u.default,name:"effort",value:e.effort,onChange:this.onChange}))),o.default.createElement(l.Row,{tag:l.FormGroup,validationState:this.state.invalidFields.completionDate?"error":""},o.default.createElement(l.Col,{tag:l.Label,sm:3},"Completion Date"),o.default.createElement(l.Col,{sm:9},o.default.createElement(l.Input,{tag:s.default,name:"completionDate",value:e.completionDate,onChange:this.onChange,onValidityChange:this.onValidityChange}),o.default.createElement(l.FormFeedback,null))),o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{tag:l.Label,sm:3},"Title"),o.default.createElement(l.Col,{sm:9},o.default.createElement(l.Input,{name:"title",value:e.title,onChange:this.onChange}))),o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{sm:12},o.default.createElement("div",{className:"d-flex justify-content-center buttonsContainer"},o.default.createElement(l.Button,{color:"primary",type:"submit"},"Submit"),o.default.createElement(i.LinkContainer,{to:"/issues"},o.default.createElement(l.Button,{color:"secondary"},"Back"))))),o.default.createElement(l.Row,{tag:l.FormGroup},o.default.createElement(l.Col,{offset:3,sm:9},t))),o.default.createElement(c.default,{message:this.state.toastMessage,color:this.state.toastType,showing:this.state.toastVisible,onDismiss:this.dismissToast})))}}]),t}();t.default=d,d.contextTypes={initialState:r.default.shape({})},d.propTypes={match:r.default.shape({params:r.default.shape({id:r.default.string})}).isRequired}},171:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=i(n(1)),r=i(n(4)),l=n(47);function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:6,sm:4,md:3,lg:2},o.default.createElement(l.FormGroup,null,o.default.createElement(l.Label,null,"Status"),o.default.createElement(l.Input,{type:"select",value:this.state.status,onChange:this.onChangeStatus},o.default.createElement("option",{value:""},"(Any)"),o.default.createElement("option",{value:"New"},"New"),o.default.createElement("option",{value:"Open"},"Open"),o.default.createElement("option",{value:"Assigned"},"Assigned"),o.default.createElement("option",{value:"Fixed"},"Fixed"),o.default.createElement("option",{value:"Verified"},"Verified"),o.default.createElement("option",{value:"Closed"},"Closed")))),o.default.createElement(l.Col,{xs:6,sm:4,md:3,lg:2},o.default.createElement(l.FormGroup,null,o.default.createElement(l.Label,null,"Effort"),o.default.createElement(l.InputGroup,null,o.default.createElement(l.Input,{value:this.state.effort_gte,onChange:this.onChangeEffortGte}),o.default.createElement(l.InputGroupAddon,{addonType:"prepend append"},"-"),o.default.createElement(l.Input,{value:this.state.effort_lte,onChange:this.onChangeEffortLte})," "))),o.default.createElement(l.Col,{xs:6,sm:4,md:3,lg:3},o.default.createElement(l.FormGroup,null,o.default.createElement(l.Label,null,"Â "),o.default.createElement(l.InputGroup,null,o.default.createElement(l.InputGroupAddon,{addonType:"prepend"},o.default.createElement(l.Button,{color:"primary",onClick:this.applyFilter},"Apply")," "),o.default.createElement(l.InputGroupAddon,{addonType:"append"},o.default.createElement(l.Button,{color:"secondary",onClick:this.resetFilter,disabled:!this.state.changed},"Reset")," "),o.default.createElement(l.InputGroupAddon,{addonType:"append"},o.default.createElement(l.Button,{color:"info",onClick:this.clearFilter},"Clear"))))))}}]),t}();u.propTypes={setFilter:r.default.func.isRequired,initFilter:r.default.shape({status:r.default.string.isRequired,effort_gte:r.default.string.isRequired,effort_lte:r.default.string.isRequired}).isRequired},t.default=u},191:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=d(n(1));n(190);var r=d(n(4)),l=n(35),i=n(47),u=d(n(75)),s=d(n(172)),c=d(n(171)),f=d(n(74));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n)),o=n.initialState.data.records;return o.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),a.state={issues:o,query:{status:"",effort_gte:"",effort_lte:""},toastVisible:!1,toastMessage:"",toastType:"success",filterCollapse:!1},a.loadData=a.loadData.bind(a),a.setFilter=a.setFilter.bind(a),a.deleteIssue=a.deleteIssue.bind(a),a.showError=a.showError.bind(a),a.dismissToast=a.dismissToast.bind(a),a.toggleFilter=a.toggleFilter.bind(a),a.setFilter(a.state.query),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"toggleFilter",value:function(e){e.preventDefault(),this.setState({filterCollapse:!this.state.filterCollapse})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(t){e.showError("Failed to fetch issue: "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server + "+t.message)})}},{key:"deleteIssue",value:function(e){var t=this;fetch("/api/issues/"+e,{method:"DELETE"}).then(function(e){e.ok?t.loadData():t.showError("Failed to delete issue")})}},{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(i.Card,{id:"issueFilter"},o.default.createElement(i.CardBody,null,o.default.createElement(i.CardTitle,{onClick:this.toggleFilter,style:{cursor:"pointer"}},o.default.createElement(l.Link,{to:"",onClick:function(e){e.preventDefault()},style:{"text-decoration":"none"}},"Filter")),o.default.createElement(i.Collapse,{isOpen:this.state.filterCollapse},o.default.createElement(c.default,{setFilter:this.setFilter,initFilter:this.state.query})))),o.default.createElement(m,{issues:this.state.issues,deleteIssue:this.deleteIssue}),o.default.createElement(f.default,{showing:this.state.toastVisible,onDismiss:this.dismissToast,message:this.state.toastMessage,bsStyle:this.state.toastType}))}}]),t}(),h=function(e){return o.default.createElement("tr",null,o.default.createElement("td",null,o.default.createElement(l.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),o.default.createElement("td",null,e.issue.status),o.default.createElement("td",null,e.issue.owner),o.default.createElement("td",null,e.issue.created.toDateString()),o.default.createElement("td",null,e.issue.effort),o.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),o.default.createElement("td",null,e.issue.title),o.default.createElement("td",null,o.default.createElement(i.Button,{bsSize:"xsmall",onClick:function(){e.deleteIssue(e.issue._id)}},o.default.createElement(u.default,{icon:s.default}))))};function m(e){var t=e.issues.map(function(t){return o.default.createElement(h,{key:t._id,issue:t,deleteIssue:e.deleteIssue})});return o.default.createElement(i.Table,{striped:!0,bordered:!0},o.default.createElement("thead",null,o.default.createElement("tr",null,o.default.createElement("th",null,"Id"),o.default.createElement("th",null,"Status"),o.default.createElement("th",null,"Owner"),o.default.createElement("th",null,"Created"),o.default.createElement("th",null,"Effort"),o.default.createElement("th",null,"Completion date"),o.default.createElement("th",null,"Title"),o.default.createElement("th",null))),o.default.createElement("tbody",null,t))}h.propTypes={issue:r.default.shape({owner:r.default.string.isRequired,title:r.default.string.isRequired,_id:r.default.string,status:r.default.string,created:r.default.string,effort:r.default.number,completionDate:r.default.string}).isRequired,deleteIssue:r.default.func.isRequired},m.propTypes={issues:r.default.arrayOf({}).isRequired,deleteIssue:r.default.func.isRequired},p.contextTypes={initialState:r.default.shape({})},p.propTypes={location:r.default.shape({pathname:r.default.string.isRequired,search:r.default.string.isRequired,query:r.default.shape({}).isRequired}).isRequired,history:r.default.shape({push:r.default.func.isRequired}).isRequired},t.default=p},192:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(110);var a=f(n(1)),o=n(35),r=f(n(191)),l=f(n(170)),i=n(166),u=f(i),s=f(n(161)),c=f(n(160));f(n(159));function f(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return a.default.createElement(o.BrowserRouter,null,a.default.createElement("div",{className:"container"},a.default.createElement(u.default,null),a.default.createElement("hr",null),a.default.createElement(o.Switch,null,a.default.createElement(o.Route,{exact:!0,path:"/home",component:i.Home}),a.default.createElement(o.Route,{exact:!0,path:"/issues",component:(0,o.withRouter)(r.default)}),a.default.createElement(o.Route,{exact:!0,path:"/issues/:id",component:l.default}),a.default.createElement(o.Route,{path:"/articles",component:c.default}),a.default.createElement(o.Route,{path:"/*",component:s.default})),a.default.createElement(i.Footer,null)))}},432:function(e,t,n){"use strict";n(110);var a=u(n(1)),o=u(n(54)),r=n(35),l=u(n(192)),i=u(n(158));function u(e){return e&&e.__esModule?e:{default:e}}var s=document.getElementById("contents");o.default.render(a.default.createElement(function(e){return a.default.createElement(i.default,e,a.default.createElement(r.Router,{history:r.browserHistory},l.default))},window.__INITIAL_STATE__),s)},433:function(e,t,n){e.exports=n(432)},74:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=i(n(1)),r=n(47),l=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"componentDidUpdate",value:function(){this.props.showing&&clearTimeout(this.dismissTimer)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.dismissTimer)}},{key:"render",value:function(){return o.default.createElement(r.Collapse,{isOpen:this.props.showing},o.default.createElement("div",{style:{position:"fixed",top:30,left:0,right:0,textAlign:"center"}},o.default.createElement(r.Alert,{style:{display:"inline-block",width:500},color:this.props.bsStyle,toggle:this.props.onDismiss,isOpen:!0},this.props.message)))}}]),t}();t.default=u,u.propTypes={showing:l.default.bool.isRequired,onDismiss:l.default.func.isRequired,color:l.default.string,message:l.default.shape({}).isRequired},u.defaultProps={color:"success"}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
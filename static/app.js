!function(e){function t(t){for(var r,l,o=t[0],i=t[1],s=t[2],f=0,d=[];f<o.length;f++)l=o[f],a[l]&&d.push(a[l][0]),a[l]=0;for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r]);for(c&&c(t);d.length;)d.shift()();return u.push.apply(u,s||[]),n()}function n(){for(var e,t=0;t<u.length;t++){for(var n=u[t],r=!0,o=1;o<n.length;o++){var i=n[o];0!==a[i]&&(r=!1)}r&&(u.splice(t--,1),e=l(l.s=n[0]))}return e}var r={},a={1:0},u=[];function l(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,l),n.l=!0,n.exports}l.m=e,l.c=r,l.d=function(e,t,n){l.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},l.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="./";var o=window.webpackJsonp=window.webpackJsonp||[],i=o.push.bind(o);o.push=t,o=o.slice();for(var s=0;s<o.length;s++)t(o[s]);var c=i;u.push([70,0]),n()}({24:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=o(n(0)),u=n(7),l=o(n(1));function o(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("p",null,"This is a placeholder for editing issue ",this.props.match.params.id),a.default.createElement(u.Link,{to:"/issues"},"Back to issue list"))}}]),t}();t.default=i,i.propTypes={match:l.default.shape({params:l.default.shape({id:l.default.string})}).isRequired}},25:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(1));n(7);function l(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.clearFilter=e.clearFilter.bind(e),e.setFilterOpen=e.setFilterOpen.bind(e),e.setFilterAssigned=e.setFilterAssigned.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"setFilterOpen",value:function(e){e.preventDefault(),this.props.setFilter({status:"Open"})}},{key:"setFilterAssigned",value:function(e){e.preventDefault(),this.props.setFilter({status:"Assigned"})}},{key:"clearFilter",value:function(e){e.preventDefault(),this.props.setFilter({})}},{key:"render",value:function(){var e=function(){return a.default.createElement("span",null," | ")};return a.default.createElement("div",null,a.default.createElement("a",{href:"#",onClick:this.clearFilter},"All Issues"),a.default.createElement(e,null),a.default.createElement("a",{href:"#",onClick:this.setFilterOpen},"Open Issues"),a.default.createElement(e,null),a.default.createElement("a",{href:"#",onClick:this.setFilterAssigned},"Assigned Issues"))}}]),t}();t.default=o,o.propTypes={setFilter:u.default.func.isRequired}},26:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleSubmit=e.handleSubmit.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"handleSubmit",value:function(e){e.preventDefault();var t=document.forms.issueAdd;this.props.createIssue({owner:t.owner.value,title:t.title.value,status:"New",created:new Date}),t.owner.value="",t.title.value=""}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("form",{name:"issueAdd",onSubmit:this.handleSubmit},a.default.createElement("input",{type:"text",name:"owner",placeholder:"Owner"}),a.default.createElement("input",{type:"text",name:"title",placeholder:"Title"}),a.default.createElement("button",null,"Add")))}}]),t}();t.default=o,o.propTypes={createIssue:u.default.func.isRequired}},28:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0));n(27);var u=s(n(1)),l=n(7),o=s(n(26)),i=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.state={issues:[]},r.createIssue=r.createIssue.bind(r),r.loadData=r.loadData.bind(r),r.setFilter=r.setFilter.bind(r),r.setFilter({}),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"setFilter",value:function(e){this.props.history.push({pathname:this.props.location.pathname,search:e.status?"status="+e.status:""})}},{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;console.log(n),t.search!==n.search&&this.loadData()}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(e){alert("Failed to fetch issue: "+e.message)})}).catch(function(e){alert("Error in fetching data from server + "+e.message)})}},{key:"createIssue",value:function(e){var t=this;fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){e.ok?e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate));var n=t.state.issues.concat(e);t.setState({issues:n})}):e.json().then(function(e){alert("Failed to add issue: "+e.message)})}).catch(function(e){alert("Error in sending Data to server : "+e.message)})}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("h1",null,"Issue Tracker"),a.default.createElement(i.default,{setFilter:this.setFilter}),a.default.createElement("hr",null),a.default.createElement(d,{issues:this.state.issues}),a.default.createElement("hr",null),a.default.createElement(o.default,{createIssue:this.createIssue}))}}]),t}(),f=function(e){return a.default.createElement("tr",null,a.default.createElement("td",null,a.default.createElement(l.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),a.default.createElement("td",null,e.issue.status),a.default.createElement("td",null,e.issue.owner),a.default.createElement("td",null,e.issue.created.toDateString()),a.default.createElement("td",null,e.issue.effort),a.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),a.default.createElement("td",null,e.issue.title))};function d(e){var t=e.issues.map(function(e){return a.default.createElement(f,{key:e._id,issue:e})});return a.default.createElement("table",{className:"bordered-table"},a.default.createElement("thead",null,a.default.createElement("tr",null,a.default.createElement("th",null,"Id"),a.default.createElement("th",null,"Status"),a.default.createElement("th",null,"Owner"),a.default.createElement("th",null,"Created"),a.default.createElement("th",null,"Effort"),a.default.createElement("th",null,"Completion date"),a.default.createElement("th",null,"Title"))),a.default.createElement("tbody",null,t))}f.propTypes={issue:u.default.shape({owner:u.default.string.isRequired,title:u.default.string.isRequired,_id:u.default.string,status:u.default.string,created:u.default.string,effort:u.default.number,completionDate:u.default.string}).isRequired},d.propTypes={issues:u.default.arrayOf({}).isRequired},c.propTypes={location:u.default.shape({}).isRequired},t.default=c},69:function(e,t,n){"use strict";var r=i(n(0)),a=i(n(67)),u=n(7),l=i(n(28)),o=i(n(24));function i(e){return e&&e.__esModule?e:{default:e}}var s=document.getElementById("contents"),c=function(){return r.default.createElement("p",null,"Page Not Fount")};a.default.render(r.default.createElement(function(){return r.default.createElement(u.BrowserRouter,null,r.default.createElement(u.Switch,null,r.default.createElement(u.Redirect,{exact:!0,from:"/",to:"/issues"}),r.default.createElement(u.Route,{exact:!0,path:"/issues/",component:(0,u.withRouter)(l.default)}),r.default.createElement(u.Route,{exact:!0,path:"/issues/:id",component:o.default}),r.default.createElement(u.Route,{path:"*",component:c})))},null),s)},70:function(e,t,n){e.exports=n(69)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
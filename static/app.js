!function(e){function t(t){for(var a,o,u=t[0],i=t[1],s=t[2],f=0,d=[];f<u.length;f++)o=u[f],l[o]&&d.push(l[o][0]),l[o]=0;for(a in i)Object.prototype.hasOwnProperty.call(i,a)&&(e[a]=i[a]);for(c&&c(t);d.length;)d.shift()();return r.push.apply(r,s||[]),n()}function n(){for(var e,t=0;t<r.length;t++){for(var n=r[t],a=!0,u=1;u<n.length;u++){var i=n[u];0!==l[i]&&(a=!1)}a&&(r.splice(t--,1),e=o(o.s=n[0]))}return e}var a={},l={1:0},r=[];function o(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=a,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},o.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="./";var u=window.webpackJsonp=window.webpackJsonp||[],i=u.push.bind(u);u.push=t,u=u.slice();for(var s=0;s<u.length;s++)t(u[s]);var c=i;r.push([678,0]),n()}({273:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),r=n(89),o=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var i=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this,t=i.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?l.default.createElement("div",null,l.default.createElement("h3",{className:"title"},t.title),l.default.createElement("hr",null),l.default.createElement("p",{className:"text"},t.text)):l.default.createElement("div",null,"No Article with that key")}}]),t}(),c=function(e){var t=e.match;return l.default.createElement("div",{className:"articles"},l.default.createElement("h2",null,"Articles section"),l.default.createElement("ul",{className:"articles"},i.map(function(e){return l.default.createElement("li",{className:"article",key:e.key},l.default.createElement(r.Link,{to:t.url+"/"+e.key},e.title))})),l.default.createElement(r.Route,{path:t.url+"/:articleId",component:s}))};s.propTypes={match:o.default.shape({params:o.default.shape({articleId:o.default.string.isRequired})}).isRequired},c.propTypes={match:o.default.shape({}).isRequired},t.default=c},274:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a,l=n(0),r=(a=l)&&a.__esModule?a:{default:a};t.default=function(){return r.default.createElement("p",null,"Page Not Fount")}},279:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Header=t.Home=void 0;var a=s(n(0)),l=n(147),r=n(278),o=s(n(183)),u=s(n(276)),i=s(n(275));function s(e){return e&&e.__esModule?e:{default:e}}t.Home=function(){return a.default.createElement("div",{className:"home"},a.default.createElement("h1",null,"Home Section contents"))},t.Header=function(){return a.default.createElement(l.Navbar,{fluid:!0},a.default.createElement(l.Navbar.Header,null,a.default.createElement(l.Navbar.Brand,null,"Issue Tracker")),a.default.createElement(l.Nav,null,a.default.createElement(r.LinkContainer,{to:"/"},a.default.createElement(l.NavItem,null,"Home")),a.default.createElement(r.LinkContainer,{to:"/issues"},a.default.createElement(l.NavItem,null,"Issues")),a.default.createElement(r.LinkContainer,{to:"/reports"},a.default.createElement(l.NavItem,null,"Reports")),a.default.createElement(r.LinkContainer,{to:"/articles"},a.default.createElement(l.NavItem,null,"Articles"))),a.default.createElement(l.Nav,{pullRight:!0},a.default.createElement(l.NavItem,null,a.default.createElement(o.default,{icon:u.default})," Create Issue"),a.default.createElement(l.NavDropdown,{id:"user-dropdown",title:a.default.createElement(o.default,{icon:i.default}),noCaret:!0},a.default.createElement(l.MenuItem,null,"Logout"))))},t.Footer=function(){return a.default.createElement("div",{className:"footer"},a.default.createElement("h5",null,a.default.createElement("small",null," Full source code available at this Â ",a.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))))}},280:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=u(n(0)),o=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.editFormat(e.value),focused:!1,valid:!0},n.onBlur=n.onBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),l(t,null,[{key:"displayFormat",value:function(e){return e?new Date(e).toDateString():""}},{key:"editFormat",value:function(e){return e?new Date(e).toISOString().substr(0,10):""}},{key:"unformat",value:function(e){var t=new Date(e);return Number.isNaN(t.getTime())?null:t}}]),l(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.props.value&&this.setState({value:t.editFormat(e.value)})}},{key:"onFocus",value:function(){this.setState({focused:!0})}},{key:"onBlur",value:function(e){var n=t.unformat(this.state.value),a=""===this.state.value||null!=n;a!==this.state.valid&&this.props.onValidityChange&&this.props.onValidityChange(e,a),this.setState({focused:!1,valid:a}),a&&this.props.onChange(e,n)}},{key:"onChange",value:function(e){e.target.value.match(/^[\d-]*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){var e=this.state.focused||!this.state.valid?this.state.value:t.displayFormat(this.props.value),n=Object.assign({},this.props);return delete n.onValidityChange,r.default.createElement("input",a({type:"text"},n,{value:e,placeholder:this.state.focused?"yyyy-mm-dd":null,onFocus:this.onFocus,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=i,i.propTypes={value:o.default.shape({}).isRequired,onChange:o.default.func.isRequired,onValidityChange:o.default.func.isRequired,name:o.default.string.isRequired}},281:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=u(n(0)),o=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),l(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),l(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return r.default.createElement("input",a({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=i,i.propTypes={value:o.default.number.isRequired,onChange:o.default.func.isRequired}},282:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=c(n(0)),r=c(n(2)),o=n(147),u=n(278),i=c(n(281)),s=c(n(280));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issue:{_id:"",title:"",status:"",owner:"",effort:null,completionDate:"",created:null},invalidFields:{}},n.onChange=n.onChange.bind(n),n.loadData=n.loadData.bind(n),n.onValidityChange=n.onValidityChange.bind(n),n.onSubmit=n.onSubmit.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),a=void 0!==t?t:e.target.value;n[e.target.name]=a,this.setState({issue:n})}},{key:"onValidityChange",value:function(e,t){var n=Object.assign({},this.state.invalidFields);t?delete n[e.target.name]:n[e.target.name]=!0,this.setState({invalidFields:n})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault(),0===Object.keys(this.state.invalidFields).length&&fetch("/api/issues/"+this.props.match.params.id,{method:"put",headers:{"Content-type":"application/json"},body:JSON.stringify(this.state.issue)}).then(function(e){e.ok&&e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate)),t.setState({issue:e}),alert("Updated Issue Successfully")})}).catch(function(e){alert("Error in sending data to server: "+e.message)})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created),t.completionDate=null!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(e){alert("Failed to fetch issue : "+e.message)})}).catch(function(e){alert("Error in fetching data from server : "+e.message)})}},{key:"render",value:function(){var e=this.state.issue,t=0===Object.keys(this.state.invalidFields).length?null:l.default.createElement("div",{className:"error"},"Please correct invalid fields before submitting");return l.default.createElement(o.Panel,null,l.default.createElement(o.Panel.Heading,null,"Edit Issue"),l.default.createElement(o.Panel.Body,null,l.default.createElement(o.Form,{horizontal:!0,onSubmit:this.onSubmit},l.default.createElement(o.FormGroup,null,l.default.createElement(o.Col,{componentClass:o.ControlLabel,sm:3},"ID"),l.default.createElement(o.Col,{sm:9},l.default.createElement(o.FormControl.Static,null,e._id))),l.default.createElement(o.FormGroup,null,l.default.createElement(o.Col,{componentClass:o.ControlLabel,sm:3},"Created"),l.default.createElement(o.Col,{sm:9},l.default.createElement(o.FormControl.Static,null,e.created?e.created.toDateString():""))),l.default.createElement(o.FormGroup,null,l.default.createElement(o.Col,{componentClass:o.ControlLabel,sm:3},"Status"),l.default.createElement(o.Col,{sm:9},l.default.createElement(o.FormControl,{componentClass:"select",name:"status",value:e.status,onChange:this.onChange},l.default.createElement("option",{value:"New"},"New"),l.default.createElement("option",{value:"Open"},"Open"),l.default.createElement("option",{value:"Assigned"},"Assigned"),l.default.createElement("option",{value:"Fixed"},"Fixed"),l.default.createElement("option",{value:"Verified"},"Verified"),l.default.createElement("option",{value:"Closed"},"Closed")))),l.default.createElement(o.FormGroup,null,l.default.createElement(o.Col,{componentClass:o.ControlLabel,sm:3},"Owner"),l.default.createElement(o.Col,{sm:9},l.default.createElement(o.FormControl,{name:"owner",value:e.owner,onChange:this.onChange}))),l.default.createElement(o.FormGroup,null,l.default.createElement(o.Col,{componentClass:o.ControlLabel,sm:3},"Effort"),l.default.createElement(o.Col,{sm:9},l.default.createElement(o.FormControl,{componentClass:i.default,name:"effort",value:e.effort,onChange:this.onChange}))),l.default.createElement(o.FormGroup,{validationState:this.state.invalidFields.completionDate?"error":""},l.default.createElement(o.Col,{componentClass:o.ControlLabel,sm:3},"Completion Date"),l.default.createElement(o.Col,{sm:9},l.default.createElement(o.FormControl,{componentClass:s.default,name:"completionDate",value:e.completionDate,onChange:this.onChange,onValidityChange:this.onValidityChange}),l.default.createElement(o.FormControl.Feedback,null))),l.default.createElement(o.FormGroup,null,l.default.createElement(o.Col,{componentClass:o.ControlLabel,sm:3},"Title"),l.default.createElement(o.Col,{sm:9},l.default.createElement(o.FormControl,{name:"title",value:e.title,onChange:this.onChange}))),l.default.createElement(o.FormGroup,null,l.default.createElement(o.Col,{smOffset:3,sm:6},l.default.createElement(o.ButtonToolbar,null,l.default.createElement(o.Button,{bsStyle:"primary",type:"submit"},"Submit"),l.default.createElement(u.LinkContainer,{to:"/issues"},l.default.createElement(o.Button,{bsStyle:"link"},"Back"))))),t)))}}]),t}();t.default=f,f.propTypes={match:r.default.shape({params:r.default.shape({id:r.default.string})}).isRequired}},283:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),r=u(n(2)),o=n(147);function u(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return l.default.createElement(o.Row,null,l.default.createElement(o.Col,{xs:6,sm:4,md:3,lg:2},l.default.createElement(o.FormGroup,null,l.default.createElement(o.ControlLabel,null,"Status"),l.default.createElement(o.FormControl,{componentClass:"select",value:this.state.status,onChange:this.onChangeStatus},l.default.createElement("option",{value:""},"(Any)"),l.default.createElement("option",{value:"New"},"New"),l.default.createElement("option",{value:"Open"},"Open"),l.default.createElement("option",{value:"Assigned"},"Assigned"),l.default.createElement("option",{value:"Fixed"},"Fixed"),l.default.createElement("option",{value:"Verified"},"Verified"),l.default.createElement("option",{value:"Closed"},"Closed")))),l.default.createElement(o.Col,{xs:6,sm:4,md:3,lg:2},l.default.createElement(o.FormGroup,null,l.default.createElement(o.ControlLabel,null,"Effort"),l.default.createElement(o.InputGroup,null,l.default.createElement(o.FormControl,{value:this.state.effort_gte,onChange:this.onChangeEffortGte}),l.default.createElement(o.InputGroup.Addon,null,"-"),l.default.createElement(o.FormControl,{value:this.state.effort_lte,onChange:this.onChangeEffortLte})))),l.default.createElement(o.Col,{xs:6,sm:4,md:3,lg:3},l.default.createElement(o.FormGroup,null,l.default.createElement(o.ControlLabel,null,"Â "),l.default.createElement(o.ButtonToolbar,null,l.default.createElement(o.Button,{bsStyle:"primary",onClick:this.applyFilter},"Apply"),l.default.createElement(o.Button,{onClick:this.resetFilter,disabled:!this.state.changed},"Reset"),l.default.createElement(o.Button,{onClick:this.clearFilter},"Clear")))))}}]),t}();i.propTypes={setFilter:r.default.func.isRequired,initFilter:r.default.shape({status:r.default.string.isRequired,effort_gte:r.default.string.isRequired,effort_lte:r.default.string.isRequired}).isRequired},t.default=i},284:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),r=u(n(2)),o=n(147);function u(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleSubmit=e.handleSubmit.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"handleSubmit",value:function(e){e.preventDefault();var t=document.forms.issueAdd;this.props.createIssue({owner:t.owner.value,title:t.title.value,status:"New",created:new Date}),t.owner.value="",t.title.value=""}},{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement(o.Form,{inline:!0,name:"issueAdd",onSubmit:this.handleSubmit},l.default.createElement(o.FormGroup,null,l.default.createElement(o.FormControl,{name:"owner",placeholder:"Owner"}))," ",l.default.createElement(o.FormGroup,null,l.default.createElement(o.FormControl,{name:"title",placeholder:"Title"}))," ",l.default.createElement(o.FormGroup,null,l.default.createElement(o.Button,{type:"submit",bsStyle:"primary"},"Add"))))}}]),t}();t.default=i,i.propTypes={createIssue:r.default.func.isRequired}},434:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=d(n(0));n(433);var r=d(n(2)),o=n(89),u=n(147),i=d(n(183)),s=d(n(285)),c=d(n(284)),f=d(n(283));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issues:[],query:{status:"",effort_gte:"",effort_lte:""}},n.createIssue=n.createIssue.bind(n),n.loadData=n.loadData.bind(n),n.setFilter=n.setFilter.bind(n),n.deleteIssue=n.deleteIssue.bind(n),n.setFilter(n.state.query),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(e){alert("Failed to fetch issue: "+e.message)})}).catch(function(e){alert("Error in fetching data from server + "+e.message)})}},{key:"createIssue",value:function(e){var t=this;fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){e.ok?e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate));var n=t.state.issues.concat(e);t.setState({issues:n})}):e.json().then(function(e){alert("Failed to add issue: "+e.message)})}).catch(function(e){alert("Error in sending Data to server : "+e.message)})}},{key:"deleteIssue",value:function(e){var t=this;fetch("/api/issues/"+e,{method:"DELETE"}).then(function(e){e.ok?t.loadData():alert("Failed to delete issue")})}},{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement(u.Panel,null,l.default.createElement(u.Panel.Heading,null,l.default.createElement(u.Panel.Title,{toggle:!0},"Filter")),l.default.createElement(u.Panel.Collapse,null,l.default.createElement(u.Panel.Body,null,l.default.createElement(f.default,{setFilter:this.setFilter,initFilter:this.state.query})))),l.default.createElement(h,{issues:this.state.issues,deleteIssue:this.deleteIssue}),l.default.createElement(c.default,{createIssue:this.createIssue}))}}]),t}(),m=function(e){return l.default.createElement("tr",null,l.default.createElement("td",null,l.default.createElement(o.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),l.default.createElement("td",null,e.issue.status),l.default.createElement("td",null,e.issue.owner),l.default.createElement("td",null,e.issue.created.toDateString()),l.default.createElement("td",null,e.issue.effort),l.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),l.default.createElement("td",null,e.issue.title),l.default.createElement("td",null,l.default.createElement(u.Button,{bsSize:"xsmall",onClick:function(){e.deleteIssue(e.issue._id)}},l.default.createElement(i.default,{icon:s.default}))))};function h(e){var t=e.issues.map(function(t){return l.default.createElement(m,{key:t._id,issue:t,deleteIssue:e.deleteIssue})});return l.default.createElement(u.Table,{bordered:!0,condensed:!0,hover:!0,responsive:!0},l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"Id"),l.default.createElement("th",null,"Status"),l.default.createElement("th",null,"Owner"),l.default.createElement("th",null,"Created"),l.default.createElement("th",null,"Effort"),l.default.createElement("th",null,"Completion date"),l.default.createElement("th",null,"Title"),l.default.createElement("th",null))),l.default.createElement("tbody",null,t))}m.propTypes={issue:r.default.shape({owner:r.default.string.isRequired,title:r.default.string.isRequired,_id:r.default.string,status:r.default.string,created:r.default.string,effort:r.default.number,completionDate:r.default.string}).isRequired,deleteIssue:r.default.func.isRequired},h.propTypes={issues:r.default.arrayOf({}).isRequired,deleteIssue:r.default.func.isRequired},p.propTypes={location:r.default.shape({pathname:r.default.string.isRequired,search:r.default.string.isRequired,query:r.default.shape({}).isRequired}).isRequired,history:r.default.shape({push:r.default.func.isRequired}).isRequired},t.default=p},677:function(e,t,n){"use strict";n(676);var a=f(n(0)),l=f(n(24)),r=n(89),o=f(n(434)),u=f(n(282)),i=n(279),s=f(n(274)),c=f(n(273));function f(e){return e&&e.__esModule?e:{default:e}}var d=document.getElementById("contents");l.default.render(a.default.createElement(function(){return a.default.createElement(r.BrowserRouter,null,a.default.createElement("div",{className:"container"},a.default.createElement(i.Header,null),a.default.createElement("hr",null),a.default.createElement(r.Switch,null,a.default.createElement(r.Route,{exact:!0,path:"/",component:i.Home}),a.default.createElement(r.Route,{exact:!0,path:"/issues",component:(0,r.withRouter)(o.default)}),a.default.createElement(r.Route,{exact:!0,path:"/issues/:id",component:u.default}),a.default.createElement(r.Route,{path:"/articles",component:c.default}),a.default.createElement(r.Route,{path:"/*",component:s.default})),a.default.createElement(i.Footer,null)))},null),d)},678:function(e,t,n){e.exports=n(677)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
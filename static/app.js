!function(e){function t(t){for(var a,u,o=t[0],i=t[1],s=t[2],c=0,d=[];c<o.length;c++)u=o[c],r[u]&&d.push(r[u][0]),r[u]=0;for(a in i)Object.prototype.hasOwnProperty.call(i,a)&&(e[a]=i[a]);for(f&&f(t);d.length;)d.shift()();return l.push.apply(l,s||[]),n()}function n(){for(var e,t=0;t<l.length;t++){for(var n=l[t],a=!0,o=1;o<n.length;o++){var i=n[o];0!==r[i]&&(a=!1)}a&&(l.splice(t--,1),e=u(u.s=n[0]))}return e}var a={},r={1:0},l=[];function u(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,u),n.l=!0,n.exports}u.m=e,u.c=a,u.d=function(e,t,n){u.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},u.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},u.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(t,"a",t),t},u.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},u.p="./";var o=window.webpackJsonp=window.webpackJsonp||[],i=o.push.bind(o);o.push=t,o=o.slice();for(var s=0;s<o.length;s++)t(o[s]);var f=i;l.push([678,0]),n()}({273:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=o(n(0)),l=n(89),u=o(n(2));function o(e){return e&&e.__esModule?e:{default:e}}var i=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"render",value:function(){var e=this,t=i.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?r.default.createElement("div",null,r.default.createElement("h3",{className:"title"},t.title),r.default.createElement("hr",null),r.default.createElement("p",{className:"text"},t.text)):r.default.createElement("div",null,"No Article with that key")}}]),t}(),f=function(e){var t=e.match;return r.default.createElement("div",{className:"articles"},r.default.createElement("h2",null,"Articles section"),r.default.createElement("ul",{className:"articles"},i.map(function(e){return r.default.createElement("li",{className:"article",key:e.key},r.default.createElement(l.Link,{to:t.url+"/"+e.key},e.title))})),r.default.createElement(l.Route,{path:t.url+"/:articleId",component:s}))};s.propTypes={match:u.default.shape({params:u.default.shape({articleId:u.default.string.isRequired})}).isRequired},f.propTypes={match:u.default.shape({}).isRequired},t.default=f},274:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a,r=n(0),l=(a=r)&&a.__esModule?a:{default:a};t.default=function(){return l.default.createElement("p",null,"Page Not Fount")}},279:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Header=t.Home=void 0;var a=s(n(0)),r=n(229),l=n(278),u=s(n(182)),o=s(n(276)),i=s(n(275));function s(e){return e&&e.__esModule?e:{default:e}}t.Home=function(){return a.default.createElement("div",{className:"home"},a.default.createElement("h1",null,"Home Section contents"))},t.Header=function(){return a.default.createElement(r.Navbar,{fluid:!0},a.default.createElement(r.Navbar.Header,null,a.default.createElement(r.Navbar.Brand,null,"Issue Tracker")),a.default.createElement(r.Nav,null,a.default.createElement(l.LinkContainer,{to:"/"},a.default.createElement(r.NavItem,null,"Home")),a.default.createElement(l.LinkContainer,{to:"/issues"},a.default.createElement(r.NavItem,null,"Issues")),a.default.createElement(l.LinkContainer,{to:"/reports"},a.default.createElement(r.NavItem,null,"Reports")),a.default.createElement(l.LinkContainer,{to:"/articles"},a.default.createElement(r.NavItem,null,"Articles"))),a.default.createElement(r.Nav,{pullRight:!0},a.default.createElement(r.NavItem,null,a.default.createElement(u.default,{icon:o.default})," Create Issue"),a.default.createElement(r.NavDropdown,{id:"user-dropdown",title:a.default.createElement(u.default,{icon:i.default}),noCaret:!0},a.default.createElement(r.MenuItem,null,"Logout"))))},t.Footer=function(){return a.default.createElement("div",{className:"footer"},a.default.createElement("h5",null,a.default.createElement("small",null," Full source code available at this Â ",a.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))))}},280:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=u(n(0)),l=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.editFormat(e.value),focused:!1,valid:!0},n.onBlur=n.onBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,null,[{key:"displayFormat",value:function(e){return e?new Date(e).toDateString():""}},{key:"editFormat",value:function(e){return e?new Date(e).toISOString().substr(0,10):""}},{key:"unformat",value:function(e){var t=new Date(e);return Number.isNaN(t.getTime())?null:t}}]),a(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.props.value&&this.setState({value:t.editFormat(e.value)})}},{key:"onFocus",value:function(){this.setState({focused:!0})}},{key:"onBlur",value:function(e){var n=t.unformat(this.state.value),a=""===this.state.value||null!=n;a!==this.state.valid&&this.props.onValidityChange&&this.props.onValidityChange(e,a),this.setState({focused:!1,valid:a}),a&&this.props.onChange(e,n)}},{key:"onChange",value:function(e){e.target.value.match(/^[\d-]*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){var e=this.state.valid||this.state.focused?null:"invalid",n=this.state.focused||!this.state.valid?this.state.value:t.displayFormat(this.props.value);return r.default.createElement("input",{type:"text",size:20,name:this.props.name,className:e,value:n,placeholder:this.state.focused?"yyyy-mm-dd":null,onFocus:this.onFocus,onBlur:this.onBlur,onChange:this.onChange})}}]),t}();t.default=o,o.propTypes={value:l.default.shape({}).isRequired,onChange:l.default.func.isRequired,onValidityChange:l.default.func.isRequired,name:l.default.string.isRequired}},281:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=o(n(0)),u=o(n(2));function o(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),r(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),r(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return l.default.createElement("input",a({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=i,i.propTypes={value:u.default.number.isRequired,onChange:u.default.func.isRequired}},282:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=s(n(0)),l=n(89),u=s(n(2)),o=s(n(281)),i=s(n(280));function s(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issue:{_id:"",title:"",status:"",owner:"",effort:null,completionDate:"",created:null},invalidFields:{}},n.onChange=n.onChange.bind(n),n.loadData=n.loadData.bind(n),n.onValidityChange=n.onValidityChange.bind(n),n.onSubmit=n.onSubmit.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),a=void 0!==t?t:e.target.value;n[e.target.name]=a,this.setState({issue:n})}},{key:"onValidityChange",value:function(e,t){var n=Object.assign({},this.state.invalidFields);t?delete n[e.target.name]:n[e.target.name]=!0,this.setState({invalidFields:n})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault(),0===Object.keys(this.state.invalidFields).length&&fetch("/api/issues/"+this.props.match.params.id,{method:"put",headers:{"Content-type":"application/json"},body:JSON.stringify(this.state.issue)}).then(function(e){e.ok&&e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate)),t.setState({issue:e}),alert("Updated Issue Successfully")})}).catch(function(e){alert("Error in sending data to server: "+e.message)})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created),t.completionDate=null!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(e){alert("Failed to fetch issue : "+e.message)})}).catch(function(e){alert("Error in fetching data from server : "+e.message)})}},{key:"render",value:function(){var e=this.state.issue,t=0===Object.keys(this.state.invalidFields).length?null:r.default.createElement("div",{className:"error"},"Please correct invalid fields before submitting");return r.default.createElement("div",null,r.default.createElement("form",{onSubmit:this.onSubmit},"ID: ",e._id,r.default.createElement("br",null),"Created: ",e.created?e.created.toDateString():"",r.default.createElement("br",null),"Status:",r.default.createElement("select",{name:"status",value:e.status,onChange:this.onChange},r.default.createElement("option",{value:"New"},"New"),r.default.createElement("option",{value:"Open"},"Open"),r.default.createElement("option",{value:"Assigned"},"Assigned"),r.default.createElement("option",{value:"Fixed"},"Fixed"),r.default.createElement("option",{value:"Verified"},"Verified"),r.default.createElement("option",{value:"Closed"},"Closed")),r.default.createElement("br",null),"Owner:",r.default.createElement("input",{type:"text",name:"owner",value:e.owner,onChange:this.onChange}),r.default.createElement("br",null),"Effort:",r.default.createElement(o.default,{size:5,name:"effort",value:e.effort,onChange:this.onChange}),r.default.createElement("br",null),"Completion date:",r.default.createElement(i.default,{name:"completionDate",value:e.completionDate,onChange:this.onChange,onValidityChange:this.onValidityChange}),r.default.createElement("br",null),"Title:",r.default.createElement("input",{type:"text",size:50,name:"title",value:e.title,onChange:this.onChange}),r.default.createElement("br",null),t,r.default.createElement("button",{type:"submit"},"Submit"),r.default.createElement("br",null),r.default.createElement(l.Link,{to:"/issues"},"Back to issue list")))}}]),t}();t.default=f,f.propTypes={match:u.default.shape({params:u.default.shape({id:u.default.string})}).isRequired}},283:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=u(n(0)),l=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return r.default.createElement("div",null,"Status:Â ",r.default.createElement("select",{value:this.state.status,onChange:this.onChangeStatus},r.default.createElement("option",{value:""},"(Any)"),r.default.createElement("option",{value:"New"},"New"),r.default.createElement("option",{value:"Open"},"Open"),r.default.createElement("option",{value:"Assigned"},"Assigned"),r.default.createElement("option",{value:"Fixed"},"Fixed"),r.default.createElement("option",{value:"Verified"},"Verified"),r.default.createElement("option",{value:"Closed"},"Closed")),"Â Effort between:Â ",r.default.createElement("input",{size:5,value:this.state.effort_gte,onChange:this.onChangeEffortGte}),"Â -Â ",r.default.createElement("input",{size:5,value:this.state.effort_lte,onChange:this.onChangeEffortLte}),r.default.createElement("button",{onClick:this.applyFilter},"Apply"),r.default.createElement("button",{onClick:this.resetFilter,disabled:!this.state.changed},"Reset"),r.default.createElement("button",{onClick:this.clearFilter},"Clear"))}}]),t}();o.propTypes={setFilter:l.default.func.isRequired,initFilter:l.default.shape({status:l.default.string.isRequired,effort_gte:l.default.string.isRequired,effort_lte:l.default.string.isRequired}).isRequired},t.default=o},284:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=u(n(0)),l=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleSubmit=e.handleSubmit.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"handleSubmit",value:function(e){e.preventDefault();var t=document.forms.issueAdd;this.props.createIssue({owner:t.owner.value,title:t.title.value,status:"New",created:new Date}),t.owner.value="",t.title.value=""}},{key:"render",value:function(){return r.default.createElement("div",null,r.default.createElement("form",{name:"issueAdd",onSubmit:this.handleSubmit},r.default.createElement("input",{type:"text",name:"owner",placeholder:"Owner"}),r.default.createElement("input",{type:"text",name:"title",placeholder:"Title"}),r.default.createElement("button",null,"Add")))}}]),t}();t.default=o,o.propTypes={createIssue:l.default.func.isRequired}},434:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=d(n(0));n(433);var l=d(n(2)),u=n(89),o=n(229),i=d(n(182)),s=d(n(285)),f=d(n(284)),c=d(n(283));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issues:[],query:{status:"",effort_gte:"",effort_lte:""}},n.createIssue=n.createIssue.bind(n),n.loadData=n.loadData.bind(n),n.setFilter=n.setFilter.bind(n),n.deleteIssue=n.deleteIssue.bind(n),n.setFilter(n.state.query),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(e){alert("Failed to fetch issue: "+e.message)})}).catch(function(e){alert("Error in fetching data from server + "+e.message)})}},{key:"createIssue",value:function(e){var t=this;fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){e.ok?e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate));var n=t.state.issues.concat(e);t.setState({issues:n})}):e.json().then(function(e){alert("Failed to add issue: "+e.message)})}).catch(function(e){alert("Error in sending Data to server : "+e.message)})}},{key:"deleteIssue",value:function(e){var t=this;fetch("/api/issues/"+e,{method:"DELETE"}).then(function(e){e.ok?t.loadData():alert("Failed to delete issue")})}},{key:"render",value:function(){return r.default.createElement("div",null,r.default.createElement(c.default,{setFilter:this.setFilter,initFilter:this.state.query}),r.default.createElement("hr",null),r.default.createElement(m,{issues:this.state.issues,deleteIssue:this.deleteIssue}),r.default.createElement("hr",null),r.default.createElement(f.default,{createIssue:this.createIssue}))}}]),t}(),h=function(e){return r.default.createElement("tr",null,r.default.createElement("td",null,r.default.createElement(u.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),r.default.createElement("td",null,e.issue.status),r.default.createElement("td",null,e.issue.owner),r.default.createElement("td",null,e.issue.created.toDateString()),r.default.createElement("td",null,e.issue.effort),r.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),r.default.createElement("td",null,e.issue.title),r.default.createElement("td",null,r.default.createElement(o.Button,{bsSize:"xsmall",onClick:function(){e.deleteIssue(e.issue._id)}},r.default.createElement(i.default,{icon:s.default}))))};function m(e){var t=e.issues.map(function(t){return r.default.createElement(h,{key:t._id,issue:t,deleteIssue:e.deleteIssue})});return r.default.createElement("table",{className:"bordered-table"},r.default.createElement("thead",null,r.default.createElement("tr",null,r.default.createElement("th",null,"Id"),r.default.createElement("th",null,"Status"),r.default.createElement("th",null,"Owner"),r.default.createElement("th",null,"Created"),r.default.createElement("th",null,"Effort"),r.default.createElement("th",null,"Completion date"),r.default.createElement("th",null,"Title"),r.default.createElement("th",null))),r.default.createElement("tbody",null,t))}h.propTypes={issue:l.default.shape({owner:l.default.string.isRequired,title:l.default.string.isRequired,_id:l.default.string,status:l.default.string,created:l.default.string,effort:l.default.number,completionDate:l.default.string}).isRequired,deleteIssue:l.default.func.isRequired},m.propTypes={issues:l.default.arrayOf({}).isRequired,deleteIssue:l.default.func.isRequired},p.propTypes={location:l.default.shape({pathname:l.default.string.isRequired,search:l.default.string.isRequired,query:l.default.shape({}).isRequired}).isRequired,history:l.default.shape({push:l.default.func.isRequired}).isRequired},t.default=p},677:function(e,t,n){"use strict";n(676);var a=c(n(0)),r=c(n(24)),l=n(89),u=c(n(434)),o=c(n(282)),i=n(279),s=c(n(274)),f=c(n(273));function c(e){return e&&e.__esModule?e:{default:e}}var d=document.getElementById("contents");r.default.render(a.default.createElement(function(){return a.default.createElement(l.BrowserRouter,null,a.default.createElement("div",{className:"container"},a.default.createElement(i.Header,null),a.default.createElement("hr",null),a.default.createElement(l.Switch,null,a.default.createElement(l.Route,{exact:!0,path:"/",component:i.Home}),a.default.createElement(l.Route,{exact:!0,path:"/issues",component:(0,l.withRouter)(u.default)}),a.default.createElement(l.Route,{exact:!0,path:"/issues/:id",component:o.default}),a.default.createElement(l.Route,{path:"/articles",component:f.default}),a.default.createElement(l.Route,{path:"/*",component:s.default})),a.default.createElement(i.Footer,null)))},null),d)},678:function(e,t,n){e.exports=n(677)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
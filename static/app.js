!function(e){function t(t){for(var a,l,i=t[0],u=t[1],s=t[2],f=0,d=[];f<i.length;f++)l=i[f],r[l]&&d.push(r[l][0]),r[l]=0;for(a in u)Object.prototype.hasOwnProperty.call(u,a)&&(e[a]=u[a]);for(c&&c(t);d.length;)d.shift()();return o.push.apply(o,s||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],a=!0,i=1;i<n.length;i++){var u=n[i];0!==r[u]&&(a=!1)}a&&(o.splice(t--,1),e=l(l.s=n[0]))}return e}var a={},r={1:0},o=[];function l(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,l),n.l=!0,n.exports}l.m=e,l.c=a,l.d=function(e,t,n){l.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},l.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="./";var i=window.webpackJsonp=window.webpackJsonp||[],u=i.push.bind(i);i.push=t,i=i.slice();for(var s=0;s<i.length;s++)t(i[s]);var c=u;o.push([429,0]),n()}({157:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=i(n(2)),o=n(47),l=i(n(5));function i(e){return e&&e.__esModule?e:{default:e}}var u=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"render",value:function(){var e=this,t=u.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?r.default.createElement("div",null,r.default.createElement("h3",{className:"title"},t.title),r.default.createElement("hr",null),r.default.createElement("p",{className:"text"},t.text)):r.default.createElement("div",null,"No Article with that key")}}]),t}(),c=function(e){var t=e.match;return r.default.createElement("div",{className:"articles"},r.default.createElement("h2",null,"Articles section"),r.default.createElement("ul",{className:"articles"},u.map(function(e){return r.default.createElement("li",{className:"article",key:e.key},r.default.createElement(o.Link,{to:t.url+"/"+e.key},e.title))})),r.default.createElement(o.Route,{path:t.url+"/:articleId",component:s}))};s.propTypes={match:l.default.shape({params:l.default.shape({articleId:l.default.string.isRequired})}).isRequired},c.propTypes={match:l.default.shape({}).isRequired},t.default=c},158:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a,r=n(2),o=(a=r)&&a.__esModule?a:{default:a};t.default=function(){return o.default.createElement("p",null,"Page Not Fount")}},160:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=f(n(2)),o=n(47),l=f(n(5)),i=f(n(75)),u=f(n(159)),s=n(46),c=f(n(74));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={showing:!1,toastVisible:!1,toastMessage:"",toastType:"success"},n.showModal=n.showModal.bind(n),n.hideModal=n.hideModal.bind(n),n.submit=n.submit.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"showModal",value:function(e){e.preventDefault(),this.setState({showing:!0})}},{key:"hideModal",value:function(){this.setState({showing:!1})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"submit",value:function(e){var t=this;e.preventDefault(),this.hideModal();var n=document.forms.issueAdd,a={owner:n.owner.value,title:n.title.value,status:"New",created:new Date};fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(function(e){e.ok?e.json().then(function(e){t.props.history.push("/issues/"+e._id)}):e.json().then(function(e){t.showError("Failed to add issue: "+e.message)})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"render",value:function(){return r.default.createElement(s.NavItem,{className:"float-right d-flex align-items-center"},r.default.createElement(o.Link,{to:"",onClick:this.showModal,style:{"text-decoration":"none"}},r.default.createElement(i.default,{icon:u.default}),"Â Create Issue"),r.default.createElement(s.Modal,{isOpen:this.state.showing,toggle:this.hideModal},r.default.createElement(s.ModalHeader,{toggle:this.hideModal},"Create Issue"),r.default.createElement(s.ModalBody,null,r.default.createElement(s.Form,{name:"issueAdd"},r.default.createElement(s.FormGroup,null,r.default.createElement(s.Label,null,"Title"),r.default.createElement(s.Input,{name:"title",autoFocus:!0})),r.default.createElement(s.FormGroup,null,r.default.createElement(s.Label,null,"Owner"),r.default.createElement(s.Input,{name:"owner"})))),r.default.createElement(s.ModalFooter,null,r.default.createElement("div",null,r.default.createElement(s.Button,{type:"button",color:"primary",onClick:this.submit},"Submit")," ",r.default.createElement(s.Button,{color:"secondary",onClick:this.hideModal},"Cancel")))),r.default.createElement(c.default,{showing:this.state.toastVisible,message:this.state.toastMessage,onDismiss:this.dismissToast,bsStyle:this.state.toastType}))}}]),t}();d.propTypes={history:l.default.shape({push:l.default.func.isRequired}).isRequired},t.default=(0,o.withRouter)(d)},163:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Home=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=d(n(2)),o=n(46),l=n(111),i=n(47),u=d(n(75)),s=d(n(162)),c=d(n(161)),f=d(n(160));function d(e){return e&&e.__esModule?e:{default:e}}var p=r.default.createElement(i.Link,{to:"/home"},"Issue Tracker"),h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.toggle=n.toggle.bind(n),n.dropdownToggle=n.dropdownToggle.bind(n),n.onBlur=n.onBlur.bind(n),n.state={isOpen:!1,dropdownOpen:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"toggle",value:function(){this.setState({isOpen:!this.state.isOpen})}},{key:"dropdownToggle",value:function(){this.setState({dropdownOpen:!this.state.dropdownOpen})}},{key:"onBlur",value:function(){this.setState({isOpen:!1})}},{key:"render",value:function(){return r.default.createElement(o.Navbar,{expand:"md",onBlur:this.onBlur},r.default.createElement(o.NavbarBrand,null,p),r.default.createElement(o.NavbarToggler,{onClick:this.toggle},r.default.createElement(u.default,{icon:c.default})),r.default.createElement(o.Collapse,{isOpen:this.state.isOpen,navbar:!0,style:{"justify-content":"space-between"}},r.default.createElement(o.Nav,{navbar:!0},r.default.createElement(o.NavItem,{active:!0},r.default.createElement(l.LinkContainer,{to:"/home"},r.default.createElement(o.NavLink,null,"Home"))),r.default.createElement(o.NavItem,null,r.default.createElement(l.LinkContainer,{to:"/issues"},r.default.createElement(o.NavLink,null,"Issues"))),r.default.createElement(o.NavItem,null,r.default.createElement(l.LinkContainer,{to:"/reports"},r.default.createElement(o.NavLink,null,"Reports"))),r.default.createElement(o.NavItem,null,r.default.createElement(l.LinkContainer,{to:"/articles"},r.default.createElement(o.NavLink,null,"Articles")))),r.default.createElement(o.Nav,null,r.default.createElement(f.default,null),r.default.createElement(o.Dropdown,{nav:!0,isOpen:this.state.dropdownOpen,toggle:this.dropdownToggle},r.default.createElement(o.DropdownToggle,{id:"user-dropdown",color:"link"},r.default.createElement(u.default,{icon:s.default})),r.default.createElement(o.DropdownMenu,null,r.default.createElement(o.DropdownItem,null,"Logout"))))))}}]),t}();t.default=h,t.Home=function(){return r.default.createElement("div",{className:"home"},r.default.createElement("h1",null,"Home Section contents"))},t.Footer=function(){return r.default.createElement("div",{className:"footer"},r.default.createElement("h5",null,r.default.createElement("small",null," Full source code available at this Â ",r.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))))}},164:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=i(n(2)),l=i(n(5));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.editFormat(e.value),focused:!1,valid:!0},n.onBlur=n.onBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,null,[{key:"displayFormat",value:function(e){return null!=e&&""!==e?new Date(e).toDateString():""}},{key:"editFormat",value:function(e){return null!=e&&""!==e?new Date(e).toISOString().substr(0,10):""}},{key:"unformat",value:function(e){var t=new Date(e);return Number.isNaN(t.getTime())?null:t}}]),r(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.props.value&&this.setState({value:t.editFormat(e.value)})}},{key:"onFocus",value:function(){this.setState({focused:!0})}},{key:"onBlur",value:function(e){var n=t.unformat(this.state.value),a=""===this.state.value||null!=n;a!==this.state.valid&&this.props.onValidityChange&&this.props.onValidityChange(e,a),this.setState({focused:!1,valid:a}),a&&this.props.onChange(e,n)}},{key:"onChange",value:function(e){e.target.value.match(/^[\d-]*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){var e=this.state.focused||!this.state.valid?this.state.value:t.displayFormat(this.props.value),n=Object.assign({},this.props);return delete n.onValidityChange,o.default.createElement("input",a({type:"text"},n,{value:e,placeholder:this.state.focused?"yyyy-mm-dd":null,onFocus:this.onFocus,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=u,u.propTypes={value:l.default.shape({}).isRequired,onChange:l.default.func.isRequired,onValidityChange:l.default.func.isRequired,name:l.default.string.isRequired}},165:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=i(n(2)),l=i(n(5));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),r(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return o.default.createElement("input",a({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=u,u.propTypes={value:l.default.number.isRequired,onChange:l.default.func.isRequired}},167:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=f(n(2)),o=f(n(5)),l=n(46),i=n(111),u=f(n(165)),s=f(n(164)),c=f(n(74));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issue:{_id:"",title:"",status:"",owner:"",effort:null,completionDate:null,created:null},invalidFields:{},showingValidation:!1,toastVisible:!1,toastMessage:"",toastType:"success"},n.onChange=n.onChange.bind(n),n.loadData=n.loadData.bind(n),n.onValidityChange=n.onValidityChange.bind(n),n.onSubmit=n.onSubmit.bind(n),n.dismissValidation=n.dismissValidation.bind(n),n.showValidation=n.showValidation.bind(n),n.showSuccess=n.showSuccess.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),a=void 0!==t?t:e.target.value;n[e.target.name]=a,this.setState({issue:n})}},{key:"onValidityChange",value:function(e,t){var n=Object.assign({},this.state.invalidFields);t?delete n[e.target.name]:n[e.target.name]=!0,this.setState({invalidFields:n})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault(),this.showValidation(),0===Object.keys(this.state.invalidFields).length&&fetch("/api/issues/"+this.props.match.params.id,{method:"put",headers:{"Content-type":"application/json"},body:JSON.stringify(this.state.issue)}).then(function(e){e.ok&&e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate)),t.setState({issue:e}),t.showSuccess("Updated Issue Successfully")})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created),t.completionDate=null!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(t){e.showError("Failed to fetch issue : "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server : "+t.message)})}},{key:"showValidation",value:function(){this.setState({showingValidation:!0})}},{key:"dismissValidation",value:function(){this.setState({showingValidation:!1})}},{key:"showSuccess",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"success"})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"render",value:function(){var e=this.state.issue,t=null;return 0!==Object.keys(this.state.invalidFields).length&&this.state.showingValidation&&(t=r.default.createElement(l.Alert,{color:"danger",onDismiss:this.dismissValidation},"Please correct invalid fields before submitting.")),r.default.createElement(l.Card,{id:"issueEdit"},r.default.createElement(l.CardBody,null,r.default.createElement(l.CardTitle,null,"Edit Issue"),r.default.createElement(l.Form,{horizontal:!0,onSubmit:this.onSubmit},r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{tag:l.Label,sm:3},"ID"),r.default.createElement(l.Col,{sm:9},r.default.createElement(l.Input,{plaintext:!0},e._id))),r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{tag:l.Label,sm:3},"Created"),r.default.createElement(l.Col,{sm:9},r.default.createElement(l.Input,{type:"text",value:e.created?e.created.toDateString():""}))),r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{tag:l.Label,sm:3},"Status"),r.default.createElement(l.Col,{sm:9},r.default.createElement(l.Input,{type:"select",name:"status",value:e.status,onChange:this.onChange},r.default.createElement("option",{value:"New"},"New"),r.default.createElement("option",{value:"Open"},"Open"),r.default.createElement("option",{value:"Assigned"},"Assigned"),r.default.createElement("option",{value:"Fixed"},"Fixed"),r.default.createElement("option",{value:"Verified"},"Verified"),r.default.createElement("option",{value:"Closed"},"Closed")))),r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{tag:l.Label,sm:3},"Owner"),r.default.createElement(l.Col,{sm:9},r.default.createElement(l.Input,{name:"owner",value:e.owner,onChange:this.onChange}))),r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{tag:l.Label,sm:3},"Effort"),r.default.createElement(l.Col,{sm:9},r.default.createElement(l.Input,{tag:u.default,name:"effort",value:e.effort,onChange:this.onChange}))),r.default.createElement(l.Row,{tag:l.FormGroup,validationState:this.state.invalidFields.completionDate?"error":""},r.default.createElement(l.Col,{tag:l.Label,sm:3},"Completion Date"),r.default.createElement(l.Col,{sm:9},r.default.createElement(l.Input,{tag:s.default,name:"completionDate",value:e.completionDate,onChange:this.onChange,onValidityChange:this.onValidityChange}),r.default.createElement(l.FormFeedback,null))),r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{tag:l.Label,sm:3},"Title"),r.default.createElement(l.Col,{sm:9},r.default.createElement(l.Input,{name:"title",value:e.title,onChange:this.onChange}))),r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{sm:12},r.default.createElement("div",{className:"d-flex justify-content-center buttonsContainer"},r.default.createElement(l.Button,{color:"primary",type:"submit"},"Submit"),r.default.createElement(i.LinkContainer,{to:"/issues"},r.default.createElement(l.Button,{color:"secondary"},"Back"))))),r.default.createElement(l.Row,{tag:l.FormGroup},r.default.createElement(l.Col,{offset:3,sm:9},t))),r.default.createElement(c.default,{message:this.state.toastMessage,color:this.state.toastType,showing:this.state.toastVisible,onDismiss:this.dismissToast})))}}]),t}();t.default=d,d.propTypes={match:o.default.shape({params:o.default.shape({id:o.default.string})}).isRequired}},168:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=i(n(2)),o=i(n(5)),l=n(46);function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return r.default.createElement(l.Row,null,r.default.createElement(l.Col,{xs:6,sm:4,md:3,lg:2},r.default.createElement(l.FormGroup,null,r.default.createElement(l.Label,null,"Status"),r.default.createElement(l.Input,{type:"select",value:this.state.status,onChange:this.onChangeStatus},r.default.createElement("option",{value:""},"(Any)"),r.default.createElement("option",{value:"New"},"New"),r.default.createElement("option",{value:"Open"},"Open"),r.default.createElement("option",{value:"Assigned"},"Assigned"),r.default.createElement("option",{value:"Fixed"},"Fixed"),r.default.createElement("option",{value:"Verified"},"Verified"),r.default.createElement("option",{value:"Closed"},"Closed")))),r.default.createElement(l.Col,{xs:6,sm:4,md:3,lg:2},r.default.createElement(l.FormGroup,null,r.default.createElement(l.Label,null,"Effort"),r.default.createElement(l.InputGroup,null,r.default.createElement(l.Input,{value:this.state.effort_gte,onChange:this.onChangeEffortGte}),r.default.createElement(l.InputGroupAddon,{addonType:"prepend append"},"-"),r.default.createElement(l.Input,{value:this.state.effort_lte,onChange:this.onChangeEffortLte})," "))),r.default.createElement(l.Col,{xs:6,sm:4,md:3,lg:3},r.default.createElement(l.FormGroup,null,r.default.createElement(l.Label,null,"Â "),r.default.createElement(l.InputGroup,null,r.default.createElement(l.InputGroupAddon,{addonType:"prepend"},r.default.createElement(l.Button,{color:"primary",onClick:this.applyFilter},"Apply")," "),r.default.createElement(l.InputGroupAddon,{addonType:"append"},r.default.createElement(l.Button,{color:"secondary",onClick:this.resetFilter,disabled:!this.state.changed},"Reset")," "),r.default.createElement(l.InputGroupAddon,{addonType:"append"},r.default.createElement(l.Button,{color:"info",onClick:this.clearFilter},"Clear"))))))}}]),t}();u.propTypes={setFilter:o.default.func.isRequired,initFilter:o.default.shape({status:o.default.string.isRequired,effort_gte:o.default.string.isRequired,effort_lte:o.default.string.isRequired}).isRequired},t.default=u},187:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=d(n(2));n(186);var o=d(n(5)),l=n(47),i=n(46),u=d(n(75)),s=d(n(169)),c=d(n(168)),f=d(n(74));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issues:[],query:{status:"",effort_gte:"",effort_lte:""},toastVisible:!1,toastMessage:"",toastType:"success",filterCollapse:!1},n.loadData=n.loadData.bind(n),n.setFilter=n.setFilter.bind(n),n.deleteIssue=n.deleteIssue.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n.toggleFilter=n.toggleFilter.bind(n),n.setFilter(n.state.query),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"toggleFilter",value:function(e){e.preventDefault(),this.setState({filterCollapse:!this.state.filterCollapse})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(t){e.showError("Failed to fetch issue: "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server + "+t.message)})}},{key:"deleteIssue",value:function(e){var t=this;fetch("/api/issues/"+e,{method:"DELETE"}).then(function(e){e.ok?t.loadData():t.showError("Failed to delete issue")})}},{key:"render",value:function(){return r.default.createElement("div",null,r.default.createElement(i.Card,{id:"issueFilter"},r.default.createElement(i.CardBody,null,r.default.createElement(i.CardTitle,{onClick:this.toggleFilter,style:{cursor:"pointer"}},r.default.createElement(l.Link,{to:"",onClick:function(e){e.preventDefault()},style:{"text-decoration":"none"}},"Filter")),r.default.createElement(i.Collapse,{isOpen:this.state.filterCollapse},r.default.createElement(c.default,{setFilter:this.setFilter,initFilter:this.state.query})))),r.default.createElement(m,{issues:this.state.issues,deleteIssue:this.deleteIssue}),r.default.createElement(f.default,{showing:this.state.toastVisible,onDismiss:this.dismissToast,message:this.state.toastMessage,bsStyle:this.state.toastType}))}}]),t}(),h=function(e){return r.default.createElement("tr",null,r.default.createElement("td",null,r.default.createElement(l.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),r.default.createElement("td",null,e.issue.status),r.default.createElement("td",null,e.issue.owner),r.default.createElement("td",null,e.issue.created.toDateString()),r.default.createElement("td",null,e.issue.effort),r.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),r.default.createElement("td",null,e.issue.title),r.default.createElement("td",null,r.default.createElement(i.Button,{bsSize:"xsmall",onClick:function(){e.deleteIssue(e.issue._id)}},r.default.createElement(u.default,{icon:s.default}))))};function m(e){var t=e.issues.map(function(t){return r.default.createElement(h,{key:t._id,issue:t,deleteIssue:e.deleteIssue})});return r.default.createElement(i.Table,{striped:!0,bordered:!0},r.default.createElement("thead",null,r.default.createElement("tr",null,r.default.createElement("th",null,"Id"),r.default.createElement("th",null,"Status"),r.default.createElement("th",null,"Owner"),r.default.createElement("th",null,"Created"),r.default.createElement("th",null,"Effort"),r.default.createElement("th",null,"Completion date"),r.default.createElement("th",null,"Title"),r.default.createElement("th",null))),r.default.createElement("tbody",null,t))}h.propTypes={issue:o.default.shape({owner:o.default.string.isRequired,title:o.default.string.isRequired,_id:o.default.string,status:o.default.string,created:o.default.string,effort:o.default.number,completionDate:o.default.string}).isRequired,deleteIssue:o.default.func.isRequired},m.propTypes={issues:o.default.arrayOf({}).isRequired,deleteIssue:o.default.func.isRequired},p.propTypes={location:o.default.shape({pathname:o.default.string.isRequired,search:o.default.string.isRequired,query:o.default.shape({}).isRequired}).isRequired,history:o.default.shape({push:o.default.func.isRequired}).isRequired},t.default=p},428:function(e,t,n){"use strict";n(427);var a=d(n(2)),r=d(n(54)),o=n(47),l=d(n(187)),i=d(n(167)),u=n(163),s=d(u),c=d(n(158)),f=d(n(157));function d(e){return e&&e.__esModule?e:{default:e}}var p=document.getElementById("contents");r.default.render(a.default.createElement(function(){return a.default.createElement(o.BrowserRouter,null,a.default.createElement("div",{className:"container"},a.default.createElement(s.default,null),a.default.createElement("hr",null),a.default.createElement(o.Switch,null,a.default.createElement(o.Route,{exact:!0,path:"/home",component:u.Home}),a.default.createElement(o.Route,{exact:!0,path:"/issues",component:(0,o.withRouter)(l.default)}),a.default.createElement(o.Route,{exact:!0,path:"/issues/:id",component:i.default}),a.default.createElement(o.Route,{path:"/articles",component:f.default}),a.default.createElement(o.Route,{path:"/*",component:c.default})),a.default.createElement(u.Footer,null)))},null),p)},429:function(e,t,n){e.exports=n(428)},74:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=i(n(2)),o=n(46),l=i(n(5));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"componentDidUpdate",value:function(){this.props.showing&&clearTimeout(this.dismissTimer)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.dismissTimer)}},{key:"render",value:function(){return r.default.createElement(o.Collapse,{isOpen:this.props.showing},r.default.createElement("div",{style:{position:"fixed",top:30,left:0,right:0,textAlign:"center"}},r.default.createElement(o.Alert,{style:{display:"inline-block",width:500},color:this.props.bsStyle,toggle:this.props.onDismiss,isOpen:!0},this.props.message)))}}]),t}();t.default=u,u.propTypes={showing:l.default.bool.isRequired,onDismiss:l.default.func.isRequired,color:l.default.string,message:l.default.shape({}).isRequired},u.defaultProps={color:"success"}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
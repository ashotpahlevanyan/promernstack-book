!function(e){function t(t){for(var a,r,u=t[0],s=t[1],i=t[2],f=0,d=[];f<u.length;f++)r=u[f],l[r]&&d.push(l[r][0]),l[r]=0;for(a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a]);for(c&&c(t);d.length;)d.shift()();return o.push.apply(o,i||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],a=!0,u=1;u<n.length;u++){var s=n[u];0!==l[s]&&(a=!1)}a&&(o.splice(t--,1),e=r(r.s=n[0]))}return e}var a={},l={1:0},o=[];function r(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=a,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./";var u=window.webpackJsonp=window.webpackJsonp||[],s=u.push.bind(u);u.push=t,u=u.slice();for(var i=0;i<u.length;i++)t(u[i]);var c=s;o.push([679,0]),n()}({121:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),o=n(76),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentDidUpdate",value:function(){this.props.showing&&clearTimeout(this.dismissTimer)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.dismissTimer)}},{key:"render",value:function(){return l.default.createElement(o.Collapse,{in:this.props.showing},l.default.createElement("div",{style:{position:"fixed",top:30,left:0,right:0,textAlign:"center"}},l.default.createElement(o.Alert,{style:{display:"inline-block",width:500},bsStyle:this.props.bsStyle,onDismiss:this.props.onDismiss},this.props.message)))}}]),t}();t.default=s,s.propTypes={showing:r.default.bool.isRequired,onDismiss:r.default.func.isRequired,bsStyle:r.default.string,message:r.default.shape({}).isRequired},s.defaultProps={bsStyle:"success"}},275:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),o=n(77),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this,t=s.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?l.default.createElement("div",null,l.default.createElement("h3",{className:"title"},t.title),l.default.createElement("hr",null),l.default.createElement("p",{className:"text"},t.text)):l.default.createElement("div",null,"No Article with that key")}}]),t}(),c=function(e){var t=e.match;return l.default.createElement("div",{className:"articles"},l.default.createElement("h2",null,"Articles section"),l.default.createElement("ul",{className:"articles"},s.map(function(e){return l.default.createElement("li",{className:"article",key:e.key},l.default.createElement(o.Link,{to:t.url+"/"+e.key},e.title))})),l.default.createElement(o.Route,{path:t.url+"/:articleId",component:i}))};i.propTypes={match:r.default.shape({params:r.default.shape({articleId:r.default.string.isRequired})}).isRequired},c.propTypes={match:r.default.shape({}).isRequired},t.default=c},276:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a,l=n(0),o=(a=l)&&a.__esModule?a:{default:a};t.default=function(){return o.default.createElement("p",null,"Page Not Fount")}},278:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=f(n(0)),o=n(77),r=f(n(2)),u=f(n(122)),s=f(n(277)),i=n(76),c=f(n(121));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return a.state={showing:!1,toastVisible:!1,toastMessage:"",toastType:"success"},a.showModal=a.showModal.bind(a),a.hideModal=a.hideModal.bind(a),a.submit=a.submit.bind(a),a.showError=a.showError.bind(a),a.dismissToast=a.dismissToast.bind(a),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"showModal",value:function(){this.setState({showing:!0})}},{key:"hideModal",value:function(){this.setState({showing:!1})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"submit",value:function(e){var t=this;e.preventDefault(),this.hideModal();var n=document.forms.issueAdd,a={owner:n.owner.value,title:n.title.value,status:"New",created:new Date};fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(function(e){e.ok?e.json().then(function(e){t.props.history.push("/issues/"+e._id)}):e.json().then(function(e){t.showError("Failed to add issue: "+e.message)})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"render",value:function(){return l.default.createElement(i.NavItem,{onClick:this.showModal},l.default.createElement(u.default,{icon:s.default}),"Â Create Issue",l.default.createElement(i.Modal,{keyboard:!0,show:this.state.showing,onHide:this.hideModal},l.default.createElement(i.Modal.Header,{closeButton:!0},l.default.createElement(i.Modal.Title,null,"Create Issue")),l.default.createElement(i.Modal.Body,null,l.default.createElement(i.Form,{name:"issueAdd"},l.default.createElement(i.FormGroup,null,l.default.createElement(i.ControlLabel,null,"Title"),l.default.createElement(i.FormControl,{name:"title",autoFocus:!0})),l.default.createElement(i.FormGroup,null,l.default.createElement(i.ControlLabel,null,"Owner"),l.default.createElement(i.FormControl,{name:"owner"})))),l.default.createElement(i.Modal.Footer,null,l.default.createElement(i.ButtonToolbar,null,l.default.createElement(i.Button,{type:"button",bsStyle:"primary",onClick:this.submit},"Submit"),l.default.createElement(i.Button,{bsStyle:"default",onClick:this.hideModal},"Cancel")))),l.default.createElement(c.default,{showing:this.state.toastVisible,message:this.state.toastMessage,onDismiss:this.dismissToast,bsStyle:this.state.toastType}))}}]),t}();d.propTypes={history:r.default.shape({push:r.default.func.isRequired}).isRequired},t.default=(0,o.withRouter)(d)},280:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Header=t.Home=void 0;var a=c(n(0)),l=n(76),o=n(185),r=n(77),u=c(n(122)),s=c(n(279)),i=c(n(278));function c(e){return e&&e.__esModule?e:{default:e}}var f=a.default.createElement(r.Link,{to:"/home"},"Issue Tracker");t.Home=function(){return a.default.createElement("div",{className:"home"},a.default.createElement("h1",null,"Home Section contents"))},t.Header=function(){return a.default.createElement(l.Navbar,{fluid:!0},a.default.createElement(l.Navbar.Header,null,a.default.createElement(l.Navbar.Brand,null,f),a.default.createElement(l.Navbar.Toggle,null)),a.default.createElement(l.Navbar.Collapse,null,a.default.createElement(l.Nav,null,a.default.createElement(o.LinkContainer,{to:"/home"},a.default.createElement(l.NavItem,null,"Home")),a.default.createElement(o.LinkContainer,{to:"/issues"},a.default.createElement(l.NavItem,null,"Issues")),a.default.createElement(o.LinkContainer,{to:"/reports"},a.default.createElement(l.NavItem,null,"Reports")),a.default.createElement(o.LinkContainer,{to:"/articles"},a.default.createElement(l.NavItem,null,"Articles"))),a.default.createElement(l.Nav,{pullRight:!0},a.default.createElement(i.default,null),a.default.createElement(l.NavDropdown,{id:"user-dropdown",title:a.default.createElement(u.default,{icon:s.default}),noCaret:!0},a.default.createElement(l.MenuItem,null,"Logout")))))},t.Footer=function(){return a.default.createElement("div",{className:"footer"},a.default.createElement("h5",null,a.default.createElement("small",null," Full source code available at this Â ",a.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))))}},281:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=u(n(0)),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.editFormat(e.value),focused:!1,valid:!0},n.onBlur=n.onBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),l(t,null,[{key:"displayFormat",value:function(e){return null!=e&&""!==e?new Date(e).toDateString():""}},{key:"editFormat",value:function(e){return null!=e&&""!==e?new Date(e).toISOString().substr(0,10):""}},{key:"unformat",value:function(e){var t=new Date(e);return Number.isNaN(t.getTime())?null:t}}]),l(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.props.value&&this.setState({value:t.editFormat(e.value)})}},{key:"onFocus",value:function(){this.setState({focused:!0})}},{key:"onBlur",value:function(e){var n=t.unformat(this.state.value),a=""===this.state.value||null!=n;a!==this.state.valid&&this.props.onValidityChange&&this.props.onValidityChange(e,a),this.setState({focused:!1,valid:a}),a&&this.props.onChange(e,n)}},{key:"onChange",value:function(e){e.target.value.match(/^[\d-]*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){var e=this.state.focused||!this.state.valid?this.state.value:t.displayFormat(this.props.value),n=Object.assign({},this.props);return delete n.onValidityChange,o.default.createElement("input",a({type:"text"},n,{value:e,placeholder:this.state.focused?"yyyy-mm-dd":null,onFocus:this.onFocus,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=s,s.propTypes={value:r.default.shape({}).isRequired,onChange:r.default.func.isRequired,onValidityChange:r.default.func.isRequired,name:r.default.string.isRequired}},282:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=u(n(0)),r=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),l(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),l(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return o.default.createElement("input",a({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=s,s.propTypes={value:r.default.number.isRequired,onChange:r.default.func.isRequired}},284:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=f(n(0)),o=f(n(2)),r=n(76),u=n(185),s=f(n(282)),i=f(n(281)),c=f(n(121));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issue:{_id:"",title:"",status:"",owner:"",effort:null,completionDate:null,created:null},invalidFields:{},showingValidation:!1,toastVisible:!1,toastMessage:"",toastType:"success"},n.onChange=n.onChange.bind(n),n.loadData=n.loadData.bind(n),n.onValidityChange=n.onValidityChange.bind(n),n.onSubmit=n.onSubmit.bind(n),n.dismissValidation=n.dismissValidation.bind(n),n.showValidation=n.showValidation.bind(n),n.showSuccess=n.showSuccess.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),a=void 0!==t?t:e.target.value;n[e.target.name]=a,this.setState({issue:n})}},{key:"onValidityChange",value:function(e,t){var n=Object.assign({},this.state.invalidFields);t?delete n[e.target.name]:n[e.target.name]=!0,this.setState({invalidFields:n})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault(),this.showValidation(),0===Object.keys(this.state.invalidFields).length&&fetch("/api/issues/"+this.props.match.params.id,{method:"put",headers:{"Content-type":"application/json"},body:JSON.stringify(this.state.issue)}).then(function(e){e.ok&&e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate)),t.setState({issue:e}),t.showSuccess("Updated Issue Successfully")})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created),t.completionDate=null!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(t){e.showError("Failed to fetch issue : "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server : "+t.message)})}},{key:"showValidation",value:function(){this.setState({showingValidation:!0})}},{key:"dismissValidation",value:function(){this.setState({showingValidation:!1})}},{key:"showSuccess",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"success"})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"render",value:function(){var e=this.state.issue,t=null;return 0!==Object.keys(this.state.invalidFields).length&&this.state.showingValidation&&(t=l.default.createElement(r.Alert,{bsStyle:"danger",onDismiss:this.dismissValidation},"Please correct invalid fields before submitting.")),l.default.createElement(r.Panel,null,l.default.createElement(r.Panel.Heading,null,"Edit Issue"),l.default.createElement(r.Panel.Body,null,l.default.createElement(r.Form,{horizontal:!0,onSubmit:this.onSubmit},l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"ID"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl.Static,null,e._id))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Created"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl.Static,null,e.created?e.created.toDateString():""))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Status"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{componentClass:"select",name:"status",value:e.status,onChange:this.onChange},l.default.createElement("option",{value:"New"},"New"),l.default.createElement("option",{value:"Open"},"Open"),l.default.createElement("option",{value:"Assigned"},"Assigned"),l.default.createElement("option",{value:"Fixed"},"Fixed"),l.default.createElement("option",{value:"Verified"},"Verified"),l.default.createElement("option",{value:"Closed"},"Closed")))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Owner"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{name:"owner",value:e.owner,onChange:this.onChange}))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Effort"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{componentClass:s.default,name:"effort",value:e.effort,onChange:this.onChange}))),l.default.createElement(r.FormGroup,{validationState:this.state.invalidFields.completionDate?"error":""},l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Completion Date"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{componentClass:i.default,name:"completionDate",value:e.completionDate,onChange:this.onChange,onValidityChange:this.onValidityChange}),l.default.createElement(r.FormControl.Feedback,null))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{componentClass:r.ControlLabel,sm:3},"Title"),l.default.createElement(r.Col,{sm:9},l.default.createElement(r.FormControl,{name:"title",value:e.title,onChange:this.onChange}))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{smOffset:3,sm:6},l.default.createElement(r.ButtonToolbar,null,l.default.createElement(r.Button,{bsStyle:"primary",type:"submit"},"Submit"),l.default.createElement(u.LinkContainer,{to:"/issues"},l.default.createElement(r.Button,{bsStyle:"link"},"Back"))))),l.default.createElement(r.FormGroup,null,l.default.createElement(r.Col,{smOffset:3,sm:9},t))),l.default.createElement(c.default,{message:this.state.toastMessage,bsStyle:this.state.toastType,showing:this.state.toastVisible,onDismiss:this.dismissToast})))}}]),t}();t.default=d,d.propTypes={match:o.default.shape({params:o.default.shape({id:o.default.string})}).isRequired}},285:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=u(n(0)),o=u(n(2)),r=n(76);function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return l.default.createElement(r.Row,null,l.default.createElement(r.Col,{xs:6,sm:4,md:3,lg:2},l.default.createElement(r.FormGroup,null,l.default.createElement(r.ControlLabel,null,"Status"),l.default.createElement(r.FormControl,{componentClass:"select",value:this.state.status,onChange:this.onChangeStatus},l.default.createElement("option",{value:""},"(Any)"),l.default.createElement("option",{value:"New"},"New"),l.default.createElement("option",{value:"Open"},"Open"),l.default.createElement("option",{value:"Assigned"},"Assigned"),l.default.createElement("option",{value:"Fixed"},"Fixed"),l.default.createElement("option",{value:"Verified"},"Verified"),l.default.createElement("option",{value:"Closed"},"Closed")))),l.default.createElement(r.Col,{xs:6,sm:4,md:3,lg:2},l.default.createElement(r.FormGroup,null,l.default.createElement(r.ControlLabel,null,"Effort"),l.default.createElement(r.InputGroup,null,l.default.createElement(r.FormControl,{value:this.state.effort_gte,onChange:this.onChangeEffortGte}),l.default.createElement(r.InputGroup.Addon,null,"-"),l.default.createElement(r.FormControl,{value:this.state.effort_lte,onChange:this.onChangeEffortLte})))),l.default.createElement(r.Col,{xs:6,sm:4,md:3,lg:3},l.default.createElement(r.FormGroup,null,l.default.createElement(r.ControlLabel,null,"Â "),l.default.createElement(r.ButtonToolbar,null,l.default.createElement(r.Button,{bsStyle:"primary",onClick:this.applyFilter},"Apply"),l.default.createElement(r.Button,{onClick:this.resetFilter,disabled:!this.state.changed},"Reset"),l.default.createElement(r.Button,{onClick:this.clearFilter},"Clear")))))}}]),t}();s.propTypes={setFilter:o.default.func.isRequired,initFilter:o.default.shape({status:o.default.string.isRequired,effort_gte:o.default.string.isRequired,effort_lte:o.default.string.isRequired}).isRequired},t.default=s},435:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=d(n(0));n(434);var o=d(n(2)),r=n(77),u=n(76),s=d(n(122)),i=d(n(286)),c=d(n(285)),f=d(n(121));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issues:[],query:{status:"",effort_gte:"",effort_lte:""},toastVisible:!1,toastMessage:"",toastType:"success"},n.loadData=n.loadData.bind(n),n.setFilter=n.setFilter.bind(n),n.deleteIssue=n.deleteIssue.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n.setFilter(n.state.query),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),a(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(t){e.showError("Failed to fetch issue: "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server + "+t.message)})}},{key:"deleteIssue",value:function(e){var t=this;fetch("/api/issues/"+e,{method:"DELETE"}).then(function(e){e.ok?t.loadData():t.showError("Failed to delete issue")})}},{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement(u.Panel,null,l.default.createElement(u.Panel.Heading,null,l.default.createElement(u.Panel.Title,{toggle:!0},"Filter")),l.default.createElement(u.Panel.Collapse,null,l.default.createElement(u.Panel.Body,null,l.default.createElement(c.default,{setFilter:this.setFilter,initFilter:this.state.query})))),l.default.createElement(h,{issues:this.state.issues,deleteIssue:this.deleteIssue}),l.default.createElement(f.default,{showing:this.state.toastVisible,onDismiss:this.dismissToast,message:this.state.toastMessage,bsStyle:this.state.toastType}))}}]),t}(),m=function(e){return l.default.createElement("tr",null,l.default.createElement("td",null,l.default.createElement(r.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),l.default.createElement("td",null,e.issue.status),l.default.createElement("td",null,e.issue.owner),l.default.createElement("td",null,e.issue.created.toDateString()),l.default.createElement("td",null,e.issue.effort),l.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),l.default.createElement("td",null,e.issue.title),l.default.createElement("td",null,l.default.createElement(u.Button,{bsSize:"xsmall",onClick:function(){e.deleteIssue(e.issue._id)}},l.default.createElement(s.default,{icon:i.default}))))};function h(e){var t=e.issues.map(function(t){return l.default.createElement(m,{key:t._id,issue:t,deleteIssue:e.deleteIssue})});return l.default.createElement(u.Table,{bordered:!0,condensed:!0,hover:!0,responsive:!0},l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"Id"),l.default.createElement("th",null,"Status"),l.default.createElement("th",null,"Owner"),l.default.createElement("th",null,"Created"),l.default.createElement("th",null,"Effort"),l.default.createElement("th",null,"Completion date"),l.default.createElement("th",null,"Title"),l.default.createElement("th",null))),l.default.createElement("tbody",null,t))}m.propTypes={issue:o.default.shape({owner:o.default.string.isRequired,title:o.default.string.isRequired,_id:o.default.string,status:o.default.string,created:o.default.string,effort:o.default.number,completionDate:o.default.string}).isRequired,deleteIssue:o.default.func.isRequired},h.propTypes={issues:o.default.arrayOf({}).isRequired,deleteIssue:o.default.func.isRequired},p.propTypes={location:o.default.shape({pathname:o.default.string.isRequired,search:o.default.string.isRequired,query:o.default.shape({}).isRequired}).isRequired,history:o.default.shape({push:o.default.func.isRequired}).isRequired},t.default=p},678:function(e,t,n){"use strict";n(677);var a=f(n(0)),l=f(n(24)),o=n(77),r=f(n(435)),u=f(n(284)),s=n(280),i=f(n(276)),c=f(n(275));function f(e){return e&&e.__esModule?e:{default:e}}var d=document.getElementById("contents");l.default.render(a.default.createElement(function(){return a.default.createElement(o.BrowserRouter,null,a.default.createElement("div",{className:"container"},a.default.createElement(s.Header,null),a.default.createElement("hr",null),a.default.createElement(o.Switch,null,a.default.createElement(o.Route,{exact:!0,path:"/home",component:s.Home}),a.default.createElement(o.Route,{exact:!0,path:"/issues",component:(0,o.withRouter)(r.default)}),a.default.createElement(o.Route,{exact:!0,path:"/issues/:id",component:u.default}),a.default.createElement(o.Route,{path:"/articles",component:c.default}),a.default.createElement(o.Route,{path:"/*",component:i.default})),a.default.createElement(s.Footer,null)))},null),d)},679:function(e,t,n){e.exports=n(678)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RvYXN0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvQXJ0aWNsZXMuanN4Iiwid2VicGFjazovLy8uL3NyYy9Ob3RGb3VuZC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0lzc3VlQWRkTmF2SXRlbS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbW1vbi5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0RhdGVJbnB1dC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL051bUlucHV0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvSXNzdWVFZGl0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvSXNzdWVGaWx0ZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9Jc3N1ZUxpc3QuanN4Iiwid2VicGFjazovLy8uL3NyYy9BcHAuanN4Il0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsbGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjEiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsImJpbmQiLCJzbGljZSIsIl9yZWFjdEJvb3RzdHJhcCIsIlRvYXN0IiwiX3JlYWN0MiIsImRlZmF1bHQiLCJDb21wb25lbnQiLCJ0aGlzIiwicHJvcHMiLCJzaG93aW5nIiwiY2xlYXJUaW1lb3V0IiwiZGlzbWlzc1RpbWVyIiwiY3JlYXRlRWxlbWVudCIsIkNvbGxhcHNlIiwiaW4iLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInJpZ2h0IiwidGV4dEFsaWduIiwiQWxlcnQiLCJkaXNwbGF5Iiwid2lkdGgiLCJic1N0eWxlIiwib25EaXNtaXNzIiwibWVzc2FnZSIsInByb3BUeXBlcyIsIl9wcm9wVHlwZXMyIiwiYm9vbCIsImlzUmVxdWlyZWQiLCJmdW5jIiwic3RyaW5nIiwic2hhcGUiLCJkZWZhdWx0UHJvcHMiLCJfcmVhY3RSb3V0ZXJEb20iLCJhcnRpY2xlcyIsInRpdGxlIiwia2V5IiwidGV4dCIsIkFydGljbGUiLCJfdGhpczIiLCJhcnRpY2xlIiwiZmlsdGVyIiwiYXJ0IiwibWF0Y2giLCJwYXJhbXMiLCJhcnRpY2xlSWQiLCJjbGFzc05hbWUiLCJBcnRpY2xlcyIsIl9yZWYiLCJtYXAiLCJMaW5rIiwidG8iLCJ1cmwiLCJSb3V0ZSIsInBhdGgiLCJjb21wb25lbnQiLCJfcmVhY3QiLCJJc3N1ZUFkZE5hdkl0ZW0iLCJjb250ZXh0IiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwic3RhdGUiLCJ0b2FzdFZpc2libGUiLCJ0b2FzdE1lc3NhZ2UiLCJ0b2FzdFR5cGUiLCJzaG93TW9kYWwiLCJoaWRlTW9kYWwiLCJzdWJtaXQiLCJzaG93RXJyb3IiLCJkaXNtaXNzVG9hc3QiLCJzZXRTdGF0ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImZvcm0iLCJkb2N1bWVudCIsImZvcm1zIiwiaXNzdWVBZGQiLCJuZXdJc3N1ZSIsIm93bmVyIiwic3RhdHVzIiwiY3JlYXRlZCIsIkRhdGUiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwianNvbiIsInVwZGF0ZWRJc3N1ZSIsImhpc3RvcnkiLCJfaWQiLCJlcnJvciIsImNhdGNoIiwiZXJyIiwiTmF2SXRlbSIsIm9uQ2xpY2siLCJfcmVhY3RGb250YXdlc29tZTIiLCJpY29uIiwiX2ZhUGx1czIiLCJNb2RhbCIsImtleWJvYXJkIiwic2hvdyIsIm9uSGlkZSIsIkhlYWRlciIsImNsb3NlQnV0dG9uIiwiVGl0bGUiLCJCb2R5IiwiRm9ybSIsIkZvcm1Hcm91cCIsIkNvbnRyb2xMYWJlbCIsIkZvcm1Db250cm9sIiwiYXV0b0ZvY3VzIiwiRm9vdGVyIiwiQnV0dG9uVG9vbGJhciIsIkJ1dHRvbiIsInR5cGUiLCJfVG9hc3QyIiwid2l0aFJvdXRlciIsIl9yZWFjdFJvdXRlckJvb3RzdHJhcCIsIkJyYW5kIiwiSG9tZSIsIk5hdmJhciIsImZsdWlkIiwiVG9nZ2xlIiwiTmF2IiwiTGlua0NvbnRhaW5lciIsInB1bGxSaWdodCIsIl9Jc3N1ZUFkZE5hdkl0ZW0yIiwiTmF2RHJvcGRvd24iLCJpZCIsIl9mYUVsbGlwc2lzSDIiLCJub0NhcmV0IiwiTWVudUl0ZW0iLCJocmVmIiwiRGF0ZUlucHV0IiwiZWRpdEZvcm1hdCIsImZvY3VzZWQiLCJ2YWxpZCIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwib25Gb2N1cyIsImRhdGUiLCJ0b0RhdGVTdHJpbmciLCJ0b0lTT1N0cmluZyIsInN1YnN0ciIsInN0ciIsInZhbCIsIk51bWJlciIsImlzTmFOIiwiZ2V0VGltZSIsIm5ld1Byb3BzIiwidW5mb3JtYXQiLCJvblZhbGlkaXR5Q2hhbmdlIiwidGFyZ2V0IiwiZGlzcGxheUZvcm1hdCIsImNoaWxkUHJvcHMiLCJhc3NpZ24iLCJfZXh0ZW5kcyIsInBsYWNlaG9sZGVyIiwiTnVtSW5wdXQiLCJmb3JtYXQiLCJudW0iLCJ0b1N0cmluZyIsInBhcnNlSW50IiwibnVtYmVyIiwiSXNzdWVFZGl0IiwiaXNzdWUiLCJlZmZvcnQiLCJjb21wbGV0aW9uRGF0ZSIsImludmFsaWRGaWVsZHMiLCJzaG93aW5nVmFsaWRhdGlvbiIsImxvYWREYXRhIiwib25TdWJtaXQiLCJkaXNtaXNzVmFsaWRhdGlvbiIsInNob3dWYWxpZGF0aW9uIiwic2hvd1N1Y2Nlc3MiLCJwcmV2UHJvcHMiLCJldmVudCIsImNvbnZlcnRlZFZhbHVlIiwidW5kZWZpbmVkIiwia2V5cyIsIkNvbnRlbnQtdHlwZSIsIl90aGlzMyIsInZhbGlkYXRpb25NZXNzYWdlIiwiUGFuZWwiLCJIZWFkaW5nIiwiaG9yaXpvbnRhbCIsIkNvbCIsImNvbXBvbmVudENsYXNzIiwic20iLCJTdGF0aWMiLCJfTnVtSW5wdXQyIiwidmFsaWRhdGlvblN0YXRlIiwiX0RhdGVJbnB1dDIiLCJGZWVkYmFjayIsInNtT2Zmc2V0IiwiSXNzdWVGaWx0ZXIiLCJpbml0RmlsdGVyIiwiZWZmb3J0X2d0ZSIsImVmZm9ydF9sdGUiLCJjaGFuZ2VkIiwib25DaGFuZ2VTdGF0dXMiLCJvbkNoYW5nZUVmZm9ydEd0ZSIsIm9uQ2hhbmdlRWZmb3J0THRlIiwiYXBwbHlGaWx0ZXIiLCJyZXNldEZpbHRlciIsImNsZWFyRmlsdGVyIiwibmV3RmlsdGVyIiwic2V0RmlsdGVyIiwiUm93IiwieHMiLCJtZCIsImxnIiwiSW5wdXRHcm91cCIsIkFkZG9uIiwiZGlzYWJsZWQiLCJJc3N1ZUxpc3QiLCJpc3N1ZXMiLCJxdWVyeSIsImRlbGV0ZUlzc3VlIiwic2VhcmNoUXVlcnkiLCJvbGRRdWVyeSIsImxvY2F0aW9uIiwibmV3UXVlcnkiLCJzZWFyY2giLCJwYXRobmFtZSIsImNvbnN0cnVjdFF1ZXJ5IiwicmVjb3JkcyIsImZvckVhY2giLCJ0b2dnbGUiLCJfSXNzdWVGaWx0ZXIyIiwiSXNzdWVUYWJsZSIsIklzc3VlUm93IiwiYnNTaXplIiwiX2ZhVHJhc2hBbHQyIiwiaXNzdWVSb3dzIiwiVGFibGUiLCJib3JkZXJlZCIsImNvbmRlbnNlZCIsImhvdmVyIiwicmVzcG9uc2l2ZSIsImFycmF5T2YiLCJfQ29tbW9uIiwiY29udGVudE5vZGUiLCJnZXRFbGVtZW50QnlJZCIsIl9yZWFjdERvbTIiLCJyZW5kZXIiLCJCcm93c2VyUm91dGVyIiwiU3dpdGNoIiwiZXhhY3QiLCJfSXNzdWVMaXN0MiIsIl9Jc3N1ZUVkaXQyIiwiX0FydGljbGVzMiIsIl9Ob3RGb3VuZDIiXSwibWFwcGluZ3MiOiJhQUNBLFNBQUFBLEVBQUFDLEdBT0EsSUFOQSxJQUtBQyxFQUFBQyxFQUxBQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxHQUdBTSxFQUFBLEVBQUFDLEtBQ1FELEVBQUFILEVBQUFLLE9BQW9CRixJQUM1QkosRUFBQUMsRUFBQUcsR0FDQUcsRUFBQVAsSUFDQUssRUFBQUcsS0FBQUQsRUFBQVAsR0FBQSxJQUVBTyxFQUFBUCxHQUFBLEVBRUEsSUFBQUQsS0FBQUcsRUFDQU8sT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVYsRUFBQUgsS0FDQWMsRUFBQWQsR0FBQUcsRUFBQUgsSUFJQSxJQURBZSxLQUFBaEIsR0FDQU8sRUFBQUMsUUFDQUQsRUFBQVUsT0FBQVYsR0FPQSxPQUhBVyxFQUFBUixLQUFBUyxNQUFBRCxFQUFBYixPQUdBZSxJQUVBLFNBQUFBLElBRUEsSUFEQSxJQUFBQyxFQUNBZixFQUFBLEVBQWlCQSxFQUFBWSxFQUFBVixPQUE0QkYsSUFBQSxDQUc3QyxJQUZBLElBQUFnQixFQUFBSixFQUFBWixHQUNBaUIsR0FBQSxFQUNBQyxFQUFBLEVBQWtCQSxFQUFBRixFQUFBZCxPQUEyQmdCLElBQUEsQ0FDN0MsSUFBQUMsRUFBQUgsRUFBQUUsR0FDQSxJQUFBZixFQUFBZ0IsS0FBQUYsR0FBQSxHQUVBQSxJ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IjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV1cbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsbGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDE6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiLi9cIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzY3OSwwXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbGVydCwgQ29sbGFwc2UgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd2luZykge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGlzbWlzc1RpbWVyKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5kaXNtaXNzVGltZXIpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Q29sbGFwc2UgaW49e3RoaXMucHJvcHMuc2hvd2luZ30+XG4gICAgICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICB0b3A6IDMwLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxBbGVydFxuICAgICAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiA1MDAgfX1cbiAgICAgICAgICAgIGJzU3R5bGU9e3RoaXMucHJvcHMuYnNTdHlsZX1cbiAgICAgICAgICAgIG9uRGlzbWlzcz17dGhpcy5wcm9wcy5vbkRpc21pc3N9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RoaXMucHJvcHMubWVzc2FnZX1cbiAgICAgICAgICA8L0FsZXJ0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29sbGFwc2U+XG4gICAgKTtcbiAgfVxufVxuXG5Ub2FzdC5wcm9wVHlwZXMgPSB7XG4gIHNob3dpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgYnNTdHlsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLnNoYXBlKHt9KS5pc1JlcXVpcmVkLFxufTtcblxuVG9hc3QuZGVmYXVsdFByb3BzID0ge1xuICBic1N0eWxlOiAnc3VjY2VzcycsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvdXRlLCBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jb25zdCBhcnRpY2xlcyA9IFtcbiAgeyB0aXRsZTogJ0ZpcnN0IEFydGljbGUnLCBrZXk6ICdmaXJzdCcsIHRleHQ6ICdIZWxsbyBmcm9tIEZpcnN0IGFydGljbGUnIH0sXG4gIHsgdGl0bGU6ICdTZWNvbmQgQXJ0aWNsZScsIGtleTogJ3NlY29uZCcsIHRleHQ6ICdIZWxsbyBmcm9tIFNlY29uZCBhcnRpY2xlJyB9LFxuICB7IHRpdGxlOiAnVGhpcmQgQXJ0aWNsZScsIGtleTogJ3RoaXJkJywgdGV4dDogJ0hlbGxvIGZyb20gVGhpcmQgYXJ0aWNsZScgfSxcbiAgeyB0aXRsZTogJ0ZvdXJ0aCBBcnRpY2xlJywga2V5OiAnZm91cnRoJywgdGV4dDogJ0hlbGxvIGZyb20gRm91cnRoIGFydGljbGUnIH0sXG5dO1xuXG5jbGFzcyBBcnRpY2xlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGFydGljbGUgPSBhcnRpY2xlcy5maWx0ZXIoYXJ0ID0+IGFydC5rZXkgPT09IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmFydGljbGVJZClbMF07XG4gICAgbGV0IHRlbXBsYXRlO1xuICAgIGlmIChhcnRpY2xlKSB7XG4gICAgICB0ZW1wbGF0ZSA9IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGl0bGVcIj57YXJ0aWNsZS50aXRsZX08L2gzPlxuICAgICAgICAgIDxociAvPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHRcIj57YXJ0aWNsZS50ZXh0fTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZSA9IDxkaXY+Tm8gQXJ0aWNsZSB3aXRoIHRoYXQga2V5PC9kaXY+O1xuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbn1cblxuY29uc3QgQXJ0aWNsZXMgPSAoeyBtYXRjaCB9KSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwiYXJ0aWNsZXNcIj5cbiAgICA8aDI+QXJ0aWNsZXMgc2VjdGlvbjwvaDI+XG4gICAgPHVsIGNsYXNzTmFtZT1cImFydGljbGVzXCI+XG4gICAgICB7XG4gICAgICAgIGFydGljbGVzLm1hcChhcnRpY2xlID0+IChcbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiYXJ0aWNsZVwiIGtleT17YXJ0aWNsZS5rZXl9PlxuICAgICAgICAgICAgPExpbmsgdG89e2Ake21hdGNoLnVybH0vJHthcnRpY2xlLmtleX1gfT57YXJ0aWNsZS50aXRsZX08L0xpbms+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSlcbiAgICAgIH1cbiAgICA8L3VsPlxuICAgIDxSb3V0ZSBwYXRoPXtgJHttYXRjaC51cmx9LzphcnRpY2xlSWRgfSBjb21wb25lbnQ9e0FydGljbGV9IC8+XG4gIDwvZGl2PlxuKTtcblxuQXJ0aWNsZS5wcm9wVHlwZXMgPSB7XG4gIG1hdGNoOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHBhcmFtczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGFydGljbGVJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH0pLFxuICB9KS5pc1JlcXVpcmVkLFxufTtcblxuQXJ0aWNsZXMucHJvcFR5cGVzID0ge1xuICBtYXRjaDogUHJvcFR5cGVzLnNoYXBlKHt9KS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQXJ0aWNsZXM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBOb3RGb3VuZCA9ICgpID0+IChcbiAgPHA+UGFnZSBOb3QgRm91bnQ8L3A+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBOb3RGb3VuZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEZvbnRBd2Vzb21lSWNvbiBmcm9tICdAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWUnO1xuaW1wb3J0IGZhUGx1cyBmcm9tICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS1zb2xpZC9mYVBsdXMnO1xuaW1wb3J0IHtcbiAgTmF2SXRlbSwgTW9kYWwsIEZvcm0sIEZvcm1Hcm91cCwgRm9ybUNvbnRyb2wsXG4gIENvbnRyb2xMYWJlbCwgQnV0dG9uLCBCdXR0b25Ub29sYmFyLFxufSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuXG5pbXBvcnQgVG9hc3QgZnJvbSAnLi9Ub2FzdC5qc3gnO1xuXG5jbGFzcyBJc3N1ZUFkZE5hdkl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xuICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93aW5nOiBmYWxzZSxcbiAgICAgIHRvYXN0VmlzaWJsZTogZmFsc2UsXG4gICAgICB0b2FzdE1lc3NhZ2U6ICcnLFxuICAgICAgdG9hc3RUeXBlOiAnc3VjY2VzcycsXG4gICAgfTtcblxuICAgIHRoaXMuc2hvd01vZGFsID0gdGhpcy5zaG93TW9kYWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhpZGVNb2RhbCA9IHRoaXMuaGlkZU1vZGFsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdWJtaXQgPSB0aGlzLnN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2hvd0Vycm9yID0gdGhpcy5zaG93RXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRpc21pc3NUb2FzdCA9IHRoaXMuZGlzbWlzc1RvYXN0LmJpbmQodGhpcyk7XG4gIH1cblxuICBzaG93TW9kYWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dpbmc6IHRydWUgfSk7XG4gIH1cblxuICBoaWRlTW9kYWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dpbmc6IGZhbHNlIH0pO1xuICB9XG5cbiAgc2hvd0Vycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdG9hc3RWaXNpYmxlOiB0cnVlLCB0b2FzdE1lc3NhZ2U6IG1lc3NhZ2UsIHRvYXN0VHlwZTogJ2RhbmdlcicgfSk7XG4gIH1cblxuICBkaXNtaXNzVG9hc3QoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvYXN0VmlzaWJsZTogZmFsc2UgfSk7XG4gIH1cblxuICBzdWJtaXQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmhpZGVNb2RhbCgpO1xuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5mb3Jtcy5pc3N1ZUFkZDtcbiAgICBjb25zdCBuZXdJc3N1ZSA9IHtcbiAgICAgIG93bmVyOiBmb3JtLm93bmVyLnZhbHVlLFxuICAgICAgdGl0bGU6IGZvcm0udGl0bGUudmFsdWUsXG4gICAgICBzdGF0dXM6ICdOZXcnLFxuICAgICAgY3JlYXRlZDogbmV3IERhdGUoKSxcbiAgICB9O1xuXG4gICAgZmV0Y2goJy9hcGkvaXNzdWVzLycsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShuZXdJc3N1ZSksXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbigodXBkYXRlZElzc3VlKSA9PiB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goYC9pc3N1ZXMvJHt1cGRhdGVkSXNzdWUuX2lkfWApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChlcnJvcikgPT4ge1xuICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKGBGYWlsZWQgdG8gYWRkIGlzc3VlOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIHRoaXMuc2hvd0Vycm9yKGBFcnJvciBpbiBzZW5kaW5nIGRhdGEgdG8gc2VydmVyOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TmF2SXRlbSBvbkNsaWNrPXt0aGlzLnNob3dNb2RhbH0+XG4gICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQbHVzfSAvPlxuICAgICAgICAmbmJzcDtDcmVhdGUgSXNzdWVcbiAgICAgICAgPE1vZGFsIGtleWJvYXJkIHNob3c9e3RoaXMuc3RhdGUuc2hvd2luZ30gb25IaWRlPXt0aGlzLmhpZGVNb2RhbH0+XG4gICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgIDxNb2RhbC5UaXRsZT5DcmVhdGUgSXNzdWU8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPEZvcm0gbmFtZT1cImlzc3VlQWRkXCI+XG4gICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5UaXRsZTwvQ29udHJvbExhYmVsPlxuICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBuYW1lPVwidGl0bGVcIiBhdXRvRm9jdXMgLz5cbiAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5Pd25lcjwvQ29udHJvbExhYmVsPlxuICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBuYW1lPVwib3duZXJcIiAvPlxuICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiBic1N0eWxlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMuc3VibWl0fT5cbiAgICAgICAgICAgICAgICBTdWJtaXRcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDxCdXR0b24gYnNTdHlsZT1cImRlZmF1bHRcIiBvbkNsaWNrPXt0aGlzLmhpZGVNb2RhbH0+Q2FuY2VsPC9CdXR0b24+XG4gICAgICAgICAgICA8L0J1dHRvblRvb2xiYXI+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICAgIDxUb2FzdFxuICAgICAgICAgIHNob3dpbmc9e3RoaXMuc3RhdGUudG9hc3RWaXNpYmxlfVxuICAgICAgICAgIG1lc3NhZ2U9e3RoaXMuc3RhdGUudG9hc3RNZXNzYWdlfVxuICAgICAgICAgIG9uRGlzbWlzcz17dGhpcy5kaXNtaXNzVG9hc3R9XG4gICAgICAgICAgYnNTdHlsZT17dGhpcy5zdGF0ZS50b2FzdFR5cGV9XG4gICAgICAgIC8+XG4gICAgICA8L05hdkl0ZW0+XG4gICAgKTtcbiAgfVxufVxuXG5Jc3N1ZUFkZE5hdkl0ZW0ucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKElzc3VlQWRkTmF2SXRlbSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYsIE5hdkl0ZW0sIE5hdkRyb3Bkb3duLCBNZW51SXRlbSB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBMaW5rQ29udGFpbmVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgRm9udEF3ZXNvbWVJY29uIGZyb20gJ0Bmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZSc7XG5pbXBvcnQgZmFFbGxpcHNpc0ggZnJvbSAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUtc29saWQvZmFFbGxpcHNpc0gnO1xuaW1wb3J0IElzc3VlQWRkTmF2SXRlbSBmcm9tICcuL0lzc3VlQWRkTmF2SXRlbS5qc3gnO1xuXG5jb25zdCBIb21lID0gKCkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cImhvbWVcIj5cbiAgICA8aDE+SG9tZSBTZWN0aW9uIGNvbnRlbnRzPC9oMT5cbiAgPC9kaXY+XG4pO1xuXG5jb25zdCBCcmFuZCA9IDxMaW5rIHRvPVwiL2hvbWVcIj5Jc3N1ZSBUcmFja2VyPC9MaW5rPjtcblxuY29uc3QgSGVhZGVyID0gKCkgPT4gKFxuICA8TmF2YmFyIGZsdWlkPlxuICAgIDxOYXZiYXIuSGVhZGVyPlxuICAgICAgPE5hdmJhci5CcmFuZD57QnJhbmR9PC9OYXZiYXIuQnJhbmQ+XG4gICAgICA8TmF2YmFyLlRvZ2dsZSAvPlxuICAgIDwvTmF2YmFyLkhlYWRlcj5cbiAgICA8TmF2YmFyLkNvbGxhcHNlPlxuICAgICAgPE5hdj5cbiAgICAgICAgPExpbmtDb250YWluZXIgdG89XCIvaG9tZVwiPlxuICAgICAgICAgIDxOYXZJdGVtPkhvbWU8L05hdkl0ZW0+XG4gICAgICAgIDwvTGlua0NvbnRhaW5lcj5cbiAgICAgICAgPExpbmtDb250YWluZXIgdG89XCIvaXNzdWVzXCI+XG4gICAgICAgICAgPE5hdkl0ZW0+SXNzdWVzPC9OYXZJdGVtPlxuICAgICAgICA8L0xpbmtDb250YWluZXI+XG4gICAgICAgIDxMaW5rQ29udGFpbmVyIHRvPVwiL3JlcG9ydHNcIj5cbiAgICAgICAgICA8TmF2SXRlbT5SZXBvcnRzPC9OYXZJdGVtPlxuICAgICAgICA8L0xpbmtDb250YWluZXI+XG4gICAgICAgIDxMaW5rQ29udGFpbmVyIHRvPVwiL2FydGljbGVzXCI+XG4gICAgICAgICAgPE5hdkl0ZW0+QXJ0aWNsZXM8L05hdkl0ZW0+XG4gICAgICAgIDwvTGlua0NvbnRhaW5lcj5cbiAgICAgIDwvTmF2PlxuICAgICAgPE5hdiBwdWxsUmlnaHQ+XG4gICAgICAgIDxJc3N1ZUFkZE5hdkl0ZW0gLz5cbiAgICAgICAgPE5hdkRyb3Bkb3duIGlkPVwidXNlci1kcm9wZG93blwiIHRpdGxlPXs8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRWxsaXBzaXNIfSAvPn0gbm9DYXJldD5cbiAgICAgICAgICA8TWVudUl0ZW0+TG9nb3V0PC9NZW51SXRlbT5cbiAgICAgICAgPC9OYXZEcm9wZG93bj5cbiAgICAgIDwvTmF2PlxuICAgIDwvTmF2YmFyLkNvbGxhcHNlPlxuICA8L05hdmJhcj5cbik7XG5cbmNvbnN0IEZvb3RlciA9ICgpID0+IChcbiAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXJcIj5cbiAgICA8aDU+XG4gICAgICA8c21hbGw+IEZ1bGwgc291cmNlIGNvZGUgYXZhaWxhYmxlIGF0IHRoaXNcbiAgICAgICAgJm5ic3A7PGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9hc2hvdHBhaGxldmFueWFuL3Byb21lcm5zdGFjay1ib29rXCI+R2l0aHViIHJlcG9zaXRvcnk8L2E+XG4gICAgICA8L3NtYWxsPlxuICAgIDwvaDU+XG4gIDwvZGl2PlxuKTtcblxuZXhwb3J0IHtcbiAgSG9tZSxcbiAgSGVhZGVyLFxuICBGb290ZXIsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGVJbnB1dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBkaXNwbGF5Rm9ybWF0KGRhdGUpIHtcbiAgICByZXR1cm4gKGRhdGUgIT0gbnVsbCAmJiBkYXRlICE9PSAnJykgPyBuZXcgRGF0ZShkYXRlKS50b0RhdGVTdHJpbmcoKSA6ICcnO1xuICB9XG5cbiAgc3RhdGljIGVkaXRGb3JtYXQoZGF0ZSkge1xuICAgIHJldHVybiAoZGF0ZSAhPSBudWxsICYmIGRhdGUgIT09ICcnKSA/IChuZXcgRGF0ZShkYXRlKSkudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMTApIDogJyc7XG4gIH1cblxuICBzdGF0aWMgdW5mb3JtYXQoc3RyKSB7XG4gICAgY29uc3QgdmFsID0gbmV3IERhdGUoc3RyKTtcbiAgICByZXR1cm4gTnVtYmVyLmlzTmFOKHZhbC5nZXRUaW1lKCkpID8gbnVsbCA6IHZhbDtcbiAgfVxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogRGF0ZUlucHV0LmVkaXRGb3JtYXQocHJvcHMudmFsdWUpLFxuICAgICAgZm9jdXNlZDogZmFsc2UsXG4gICAgICB2YWxpZDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgdGhpcy5vbkJsdXIgPSB0aGlzLm9uQmx1ci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkZvY3VzID0gdGhpcy5vbkZvY3VzLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XG4gICAgaWYgKG5ld1Byb3BzLnZhbHVlICE9PSB0aGlzLnByb3BzLnZhbHVlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IERhdGVJbnB1dC5lZGl0Rm9ybWF0KG5ld1Byb3BzLnZhbHVlKSB9KTtcbiAgICB9XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBmb2N1c2VkOiB0cnVlIH0pO1xuICB9XG5cbiAgb25CbHVyKGUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IERhdGVJbnB1dC51bmZvcm1hdCh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICBjb25zdCB2YWxpZCA9IHRoaXMuc3RhdGUudmFsdWUgPT09ICcnIHx8IHZhbHVlICE9IG51bGw7XG4gICAgaWYgKHZhbGlkICE9PSB0aGlzLnN0YXRlLnZhbGlkICYmIHRoaXMucHJvcHMub25WYWxpZGl0eUNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5vblZhbGlkaXR5Q2hhbmdlKGUsIHZhbGlkKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGZvY3VzZWQ6IGZhbHNlLCB2YWxpZCB9KTtcbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2hhbmdlKGUpIHtcbiAgICBpZiAoZS50YXJnZXQudmFsdWUubWF0Y2goL15bXFxkLV0qJC8pKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB2YWx1ZSA9ICh0aGlzLnN0YXRlLmZvY3VzZWQgfHwgIXRoaXMuc3RhdGUudmFsaWQpID8gdGhpcy5zdGF0ZS52YWx1ZSA6XG4gICAgICBEYXRlSW5wdXQuZGlzcGxheUZvcm1hdCh0aGlzLnByb3BzLnZhbHVlKTtcbiAgICBjb25zdCBjaGlsZFByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25WYWxpZGl0eUNoYW5nZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgey4uLmNoaWxkUHJvcHN9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMuc3RhdGUuZm9jdXNlZCA/ICd5eXl5LW1tLWRkJyA6IG51bGx9XG4gICAgICAgIG9uRm9jdXM9e3RoaXMub25Gb2N1c31cbiAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1cn1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuRGF0ZUlucHV0LnByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IFByb3BUeXBlcy5zaGFwZSh7fSkuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uVmFsaWRpdHlDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdW1JbnB1dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBmb3JtYXQobnVtKSB7XG4gICAgcmV0dXJuIG51bSAhPSBudWxsID8gbnVtLnRvU3RyaW5nKCkgOiAnJztcbiAgfVxuXG4gIHN0YXRpYyB1bmZvcm1hdChzdHIpIHtcbiAgICBjb25zdCB2YWwgPSBwYXJzZUludChzdHIsIDEwKTtcbiAgICByZXR1cm4gTnVtYmVyLmlzTmFOKHZhbCkgPyBudWxsIDogdmFsO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0geyB2YWx1ZTogTnVtSW5wdXQuZm9ybWF0KHRoaXMucHJvcHMudmFsdWUpIH07XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQmx1ciA9IHRoaXMub25CbHVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBOdW1JbnB1dC5mb3JtYXQobmV3UHJvcHMudmFsdWUpIH0pO1xuICB9XG5cbiAgb25CbHVyKGUpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGUsIE51bUlucHV0LnVuZm9ybWF0KHRoaXMuc3RhdGUudmFsdWUpKTtcbiAgfVxuXG4gIG9uQ2hhbmdlKGUpIHtcbiAgICBpZiAoZS50YXJnZXQudmFsdWUubWF0Y2goL15cXGQqJC8pKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfVxuICAgICAgICBvbkJsdXI9e3RoaXMub25CbHVyfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuXG5OdW1JbnB1dC5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtcbiAgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCwgQ29udHJvbExhYmVsLCBCdXR0b25Ub29sYmFyLFxuICBCdXR0b24sIFBhbmVsLCBGb3JtLCBDb2wsIEFsZXJ0LFxufSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuXG5pbXBvcnQgeyBMaW5rQ29udGFpbmVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWJvb3RzdHJhcCc7XG5cbmltcG9ydCBOdW1JbnB1dCBmcm9tICcuL051bUlucHV0LmpzeCc7XG5pbXBvcnQgRGF0ZUlucHV0IGZyb20gJy4vRGF0ZUlucHV0LmpzeCc7XG5pbXBvcnQgVG9hc3QgZnJvbSAnLi9Ub2FzdC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJc3N1ZUVkaXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzc3VlOiB7XG4gICAgICAgIF9pZDogJycsXG4gICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgc3RhdHVzOiAnJyxcbiAgICAgICAgb3duZXI6ICcnLFxuICAgICAgICBlZmZvcnQ6IG51bGwsXG4gICAgICAgIGNvbXBsZXRpb25EYXRlOiBudWxsLFxuICAgICAgICBjcmVhdGVkOiBudWxsLFxuICAgICAgfSxcbiAgICAgIGludmFsaWRGaWVsZHM6IHt9LFxuICAgICAgc2hvd2luZ1ZhbGlkYXRpb246IGZhbHNlLFxuICAgICAgdG9hc3RWaXNpYmxlOiBmYWxzZSxcbiAgICAgIHRvYXN0TWVzc2FnZTogJycsXG4gICAgICB0b2FzdFR5cGU6ICdzdWNjZXNzJyxcbiAgICB9O1xuXG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmxvYWREYXRhID0gdGhpcy5sb2FkRGF0YS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25WYWxpZGl0eUNoYW5nZSA9IHRoaXMub25WYWxpZGl0eUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TdWJtaXQgPSB0aGlzLm9uU3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5kaXNtaXNzVmFsaWRhdGlvbiA9IHRoaXMuZGlzbWlzc1ZhbGlkYXRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLnNob3dWYWxpZGF0aW9uID0gdGhpcy5zaG93VmFsaWRhdGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2hvd1N1Y2Nlc3MgPSB0aGlzLnNob3dTdWNjZXNzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zaG93RXJyb3IgPSB0aGlzLnNob3dFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGlzbWlzc1RvYXN0ID0gdGhpcy5kaXNtaXNzVG9hc3QuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZERhdGEoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAocHJldlByb3BzLm1hdGNoLnBhcmFtcy5pZCAhPT0gdGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuaWQpIHtcbiAgICAgIHRoaXMubG9hZERhdGEoKTtcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZShldmVudCwgY29udmVydGVkVmFsdWUpIHtcbiAgICBjb25zdCBpc3N1ZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUuaXNzdWUpO1xuICAgIGNvbnN0IHZhbHVlID0gKGNvbnZlcnRlZFZhbHVlICE9PSB1bmRlZmluZWQpID9cbiAgICAgIGNvbnZlcnRlZFZhbHVlIDogZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIGlzc3VlW2V2ZW50LnRhcmdldC5uYW1lXSA9IHZhbHVlO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc3N1ZSB9KTtcbiAgfVxuXG4gIG9uVmFsaWRpdHlDaGFuZ2UoZXZlbnQsIHZhbGlkKSB7XG4gICAgY29uc3QgaW52YWxpZEZpZWxkcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUuaW52YWxpZEZpZWxkcyk7XG4gICAgaWYgKCF2YWxpZCkge1xuICAgICAgaW52YWxpZEZpZWxkc1tldmVudC50YXJnZXQubmFtZV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgaW52YWxpZEZpZWxkc1tldmVudC50YXJnZXQubmFtZV07XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyBpbnZhbGlkRmllbGRzIH0pO1xuICB9XG5cbiAgb25TdWJtaXQoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2hvd1ZhbGlkYXRpb24oKTtcblxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLnN0YXRlLmludmFsaWRGaWVsZHMpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZldGNoKGAvYXBpL2lzc3Vlcy8ke3RoaXMucHJvcHMubWF0Y2gucGFyYW1zLmlkfWAsIHtcbiAgICAgIG1ldGhvZDogJ3B1dCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuaXNzdWUpLFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oKHVwZGF0ZWRJc3N1ZSkgPT4ge1xuICAgICAgICAgIHVwZGF0ZWRJc3N1ZS5jcmVhdGVkID0gbmV3IERhdGUodXBkYXRlZElzc3VlLmNyZWF0ZWQpO1xuICAgICAgICAgIGlmICh1cGRhdGVkSXNzdWUuY29tcGxldGlvbkRhdGUpIHtcbiAgICAgICAgICAgIHVwZGF0ZWRJc3N1ZS5jb21wbGV0aW9uRGF0ZSA9IG5ldyBEYXRlKHVwZGF0ZWRJc3N1ZS5jb21wbGV0aW9uRGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc3N1ZTogdXBkYXRlZElzc3VlIH0pO1xuICAgICAgICAgIHRoaXMuc2hvd1N1Y2Nlc3MoJ1VwZGF0ZWQgSXNzdWUgU3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIHRoaXMuc2hvd0Vycm9yKGBFcnJvciBpbiBzZW5kaW5nIGRhdGEgdG8gc2VydmVyOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZERhdGEoKSB7XG4gICAgZmV0Y2goYC9hcGkvaXNzdWVzLyR7dGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuaWR9YClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbigoaXNzdWUpID0+IHtcbiAgICAgICAgICAgIGlzc3VlLmNyZWF0ZWQgPSBuZXcgRGF0ZShpc3N1ZS5jcmVhdGVkKTtcbiAgICAgICAgICAgIGlzc3VlLmNvbXBsZXRpb25EYXRlID0gaXNzdWUuY29tcGxldGlvbkRhdGUgIT0gbnVsbCA/XG4gICAgICAgICAgICAgIG5ldyBEYXRlKGlzc3VlLmNvbXBsZXRpb25EYXRlKS50b0RhdGVTdHJpbmcoKSA6ICcnO1xuICAgICAgICAgICAgLy8gaXNzdWUuZWZmb3J0ID0gaXNzdWUuZWZmb3J0ICE9IG51bGwgPyBpc3N1ZS5lZmZvcnQudG9TdHJpbmcoKSA6ICcnO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzc3VlIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93RXJyb3IoYEZhaWxlZCB0byBmZXRjaCBpc3N1ZSA6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICB0aGlzLnNob3dFcnJvcihgRXJyb3IgaW4gZmV0Y2hpbmcgZGF0YSBmcm9tIHNlcnZlciA6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHNob3dWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93aW5nVmFsaWRhdGlvbjogdHJ1ZSB9KTtcbiAgfVxuXG4gIGRpc21pc3NWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93aW5nVmFsaWRhdGlvbjogZmFsc2UgfSk7XG4gIH1cblxuICBzaG93U3VjY2VzcyhtZXNzYWdlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvYXN0VmlzaWJsZTogdHJ1ZSwgdG9hc3RNZXNzYWdlOiBtZXNzYWdlLCB0b2FzdFR5cGU6ICdzdWNjZXNzJyB9KTtcbiAgfVxuXG4gIHNob3dFcnJvcihtZXNzYWdlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvYXN0VmlzaWJsZTogdHJ1ZSwgdG9hc3RNZXNzYWdlOiBtZXNzYWdlLCB0b2FzdFR5cGU6ICdkYW5nZXInIH0pO1xuICB9XG5cbiAgZGlzbWlzc1RvYXN0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB0b2FzdFZpc2libGU6IGZhbHNlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGlzc3VlID0gdGhpcy5zdGF0ZS5pc3N1ZTtcbiAgICBsZXQgdmFsaWRhdGlvbk1lc3NhZ2UgPSBudWxsO1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLnN0YXRlLmludmFsaWRGaWVsZHMpLmxlbmd0aCAhPT0gMFxuICAgICAgJiYgdGhpcy5zdGF0ZS5zaG93aW5nVmFsaWRhdGlvbikge1xuICAgICAgdmFsaWRhdGlvbk1lc3NhZ2UgPSAoXG4gICAgICAgIDxBbGVydFxuICAgICAgICAgIGJzU3R5bGU9XCJkYW5nZXJcIlxuICAgICAgICAgIG9uRGlzbWlzcz17dGhpcy5kaXNtaXNzVmFsaWRhdGlvbn1cbiAgICAgICAgPlxuICAgICAgICAgIFBsZWFzZSBjb3JyZWN0IGludmFsaWQgZmllbGRzIGJlZm9yZSBzdWJtaXR0aW5nLlxuICAgICAgICA8L0FsZXJ0PlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lbD5cbiAgICAgICAgPFBhbmVsLkhlYWRpbmc+RWRpdCBJc3N1ZTwvUGFuZWwuSGVhZGluZz5cbiAgICAgICAgPFBhbmVsLkJvZHk+XG4gICAgICAgICAgPEZvcm0gaG9yaXpvbnRhbCBvblN1Ym1pdD17dGhpcy5vblN1Ym1pdH0+XG4gICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8Q29sIGNvbXBvbmVudENsYXNzPXtDb250cm9sTGFiZWx9IHNtPXszfT5JRDwvQ29sPlxuICAgICAgICAgICAgICA8Q29sIHNtPXs5fT5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wuU3RhdGljPntpc3N1ZS5faWR9PC9Gb3JtQ29udHJvbC5TdGF0aWM+XG4gICAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8Q29sIGNvbXBvbmVudENsYXNzPXtDb250cm9sTGFiZWx9IHNtPXszfT5DcmVhdGVkPC9Db2w+XG4gICAgICAgICAgICAgIDxDb2wgc209ezl9PlxuICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbC5TdGF0aWM+XG4gICAgICAgICAgICAgICAgICB7aXNzdWUuY3JlYXRlZCA/IGlzc3VlLmNyZWF0ZWQudG9EYXRlU3RyaW5nKCkgOiAnJ31cbiAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sLlN0YXRpYz5cbiAgICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb2wgY29tcG9uZW50Q2xhc3M9e0NvbnRyb2xMYWJlbH0gc209ezN9PlN0YXR1czwvQ29sPlxuICAgICAgICAgICAgICA8Q29sIHNtPXs5fT5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudENsYXNzPVwic2VsZWN0XCJcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJzdGF0dXNcIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9e2lzc3VlLnN0YXR1c31cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJOZXdcIj5OZXc8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJPcGVuXCI+T3Blbjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkFzc2lnbmVkXCI+QXNzaWduZWQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJGaXhlZFwiPkZpeGVkPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiVmVyaWZpZWRcIj5WZXJpZmllZDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkNsb3NlZFwiPkNsb3NlZDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8Q29sIGNvbXBvbmVudENsYXNzPXtDb250cm9sTGFiZWx9IHNtPXszfT5Pd25lcjwvQ29sPlxuICAgICAgICAgICAgICA8Q29sIHNtPXs5fT5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJvd25lclwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17aXNzdWUub3duZXJ9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPENvbCBjb21wb25lbnRDbGFzcz17Q29udHJvbExhYmVsfSBzbT17M30+RWZmb3J0PC9Db2w+XG4gICAgICAgICAgICAgIDxDb2wgc209ezl9PlxuICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgICAgY29tcG9uZW50Q2xhc3M9e051bUlucHV0fVxuICAgICAgICAgICAgICAgICAgbmFtZT1cImVmZm9ydFwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17aXNzdWUuZWZmb3J0fVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXAgdmFsaWRhdGlvblN0YXRlPXt0aGlzLnN0YXRlLmludmFsaWRGaWVsZHMuY29tcGxldGlvbkRhdGUgPyAnZXJyb3InIDogJyd9PlxuICAgICAgICAgICAgICA8Q29sIGNvbXBvbmVudENsYXNzPXtDb250cm9sTGFiZWx9IHNtPXszfT5Db21wbGV0aW9uIERhdGU8L0NvbD5cbiAgICAgICAgICAgICAgPENvbCBzbT17OX0+XG4gICAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgICBjb21wb25lbnRDbGFzcz17RGF0ZUlucHV0fVxuICAgICAgICAgICAgICAgICAgbmFtZT1cImNvbXBsZXRpb25EYXRlXCJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtpc3N1ZS5jb21wbGV0aW9uRGF0ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgb25WYWxpZGl0eUNoYW5nZT17dGhpcy5vblZhbGlkaXR5Q2hhbmdlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPEZvcm1Db250cm9sLkZlZWRiYWNrIC8+XG4gICAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8Q29sIGNvbXBvbmVudENsYXNzPXtDb250cm9sTGFiZWx9IHNtPXszfT5UaXRsZTwvQ29sPlxuICAgICAgICAgICAgICA8Q29sIHNtPXs5fT5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0aXRsZVwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17aXNzdWUudGl0bGV9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPENvbCBzbU9mZnNldD17M30gc209ezZ9PlxuICAgICAgICAgICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwicHJpbWFyeVwiIHR5cGU9XCJzdWJtaXRcIj5TdWJtaXQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxMaW5rQ29udGFpbmVyIHRvPVwiL2lzc3Vlc1wiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJzU3R5bGU9XCJsaW5rXCI+QmFjazwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvQnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb2wgc21PZmZzZXQ9ezN9IHNtPXs5fT57dmFsaWRhdGlvbk1lc3NhZ2V9PC9Db2w+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgICAgPFRvYXN0XG4gICAgICAgICAgICBtZXNzYWdlPXt0aGlzLnN0YXRlLnRvYXN0TWVzc2FnZX1cbiAgICAgICAgICAgIGJzU3R5bGU9e3RoaXMuc3RhdGUudG9hc3RUeXBlfVxuICAgICAgICAgICAgc2hvd2luZz17dGhpcy5zdGF0ZS50b2FzdFZpc2libGV9XG4gICAgICAgICAgICBvbkRpc21pc3M9e3RoaXMuZGlzbWlzc1RvYXN0fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvUGFuZWwuQm9keT5cbiAgICAgIDwvUGFuZWw+XG4gICAgKTtcbiAgfVxufVxuXG5Jc3N1ZUVkaXQucHJvcFR5cGVzID0ge1xuICBtYXRjaDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwYXJhbXM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9KSxcbiAgfSkuaXNSZXF1aXJlZCxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIENvbCwgUm93LCBGb3JtR3JvdXAsIEZvcm1Db250cm9sLFxuICBDb250cm9sTGFiZWwsIElucHV0R3JvdXAsIEJ1dHRvblRvb2xiYXIsIEJ1dHRvbixcbn0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcblxuY2xhc3MgSXNzdWVGaWx0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogcHJvcHMuaW5pdEZpbHRlci5zdGF0dXMgfHwgJycsXG4gICAgICBlZmZvcnRfZ3RlOiBwcm9wcy5pbml0RmlsdGVyLmVmZm9ydF9ndGUgfHwgJycsXG4gICAgICBlZmZvcnRfbHRlOiBwcm9wcy5pbml0RmlsdGVyLmVmZm9ydF9sdGUgfHwgJycsXG4gICAgICBjaGFuZ2VkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgdGhpcy5vbkNoYW5nZVN0YXR1cyA9IHRoaXMub25DaGFuZ2VTdGF0dXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2hhbmdlRWZmb3J0R3RlID0gdGhpcy5vbkNoYW5nZUVmZm9ydEd0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DaGFuZ2VFZmZvcnRMdGUgPSB0aGlzLm9uQ2hhbmdlRWZmb3J0THRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hcHBseUZpbHRlciA9IHRoaXMuYXBwbHlGaWx0ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlc2V0RmlsdGVyID0gdGhpcy5yZXNldEZpbHRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xlYXJGaWx0ZXIgPSB0aGlzLmNsZWFyRmlsdGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IG5ld1Byb3BzLmluaXRGaWx0ZXIuc3RhdHVzIHx8ICcnLFxuICAgICAgZWZmb3J0X2d0ZTogbmV3UHJvcHMuaW5pdEZpbHRlci5lZmZvcnRfZ3RlIHx8ICcnLFxuICAgICAgZWZmb3J0X2x0ZTogbmV3UHJvcHMuaW5pdEZpbHRlci5lZmZvcnRfbHRlIHx8ICcnLFxuICAgICAgY2hhbmdlZDogZmFsc2UsXG4gICAgfSk7XG4gIH1cblxuICBvbkNoYW5nZVN0YXR1cyhlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXR1czogZS50YXJnZXQudmFsdWUsIGNoYW5nZWQ6IHRydWUgfSk7XG4gIH1cblxuICBvbkNoYW5nZUVmZm9ydEd0ZShlKSB7XG4gICAgY29uc3QgZWZmb3J0U3RyaW5nID0gZS50YXJnZXQudmFsdWU7XG4gICAgaWYgKGVmZm9ydFN0cmluZy5tYXRjaCgvXlxcZCokLykpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZmZvcnRfZ3RlOiBlLnRhcmdldC52YWx1ZSwgY2hhbmdlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZUVmZm9ydEx0ZShlKSB7XG4gICAgY29uc3QgZWZmb3J0U3RyaW5nID0gZS50YXJnZXQudmFsdWU7XG4gICAgaWYgKGVmZm9ydFN0cmluZy5tYXRjaCgvXlxcZCokLykpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZmZvcnRfbHRlOiBlLnRhcmdldC52YWx1ZSwgY2hhbmdlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBhcHBseUZpbHRlcigpIHtcbiAgICBjb25zdCBuZXdGaWx0ZXIgPSB7fTtcbiAgICBpZiAodGhpcy5zdGF0ZS5zdGF0dXMpIHtcbiAgICAgIG5ld0ZpbHRlci5zdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuZWZmb3J0X2d0ZSkge1xuICAgICAgbmV3RmlsdGVyLmVmZm9ydF9ndGUgPSB0aGlzLnN0YXRlLmVmZm9ydF9ndGU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmVmZm9ydF9sdGUpIHtcbiAgICAgIG5ld0ZpbHRlci5lZmZvcnRfbHRlID0gdGhpcy5zdGF0ZS5lZmZvcnRfbHRlO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLnNldEZpbHRlcihuZXdGaWx0ZXIpO1xuICB9XG5cbiAgY2xlYXJGaWx0ZXIoKSB7XG4gICAgdGhpcy5wcm9wcy5zZXRGaWx0ZXIoe30pO1xuICB9XG5cbiAgcmVzZXRGaWx0ZXIoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IHRoaXMucHJvcHMuaW5pdEZpbHRlci5zdGF0dXMgfHwgJycsXG4gICAgICBlZmZvcnRfZ3RlOiB0aGlzLnByb3BzLmluaXRGaWx0ZXIuZWZmb3J0X2d0ZSB8fCAnJyxcbiAgICAgIGVmZm9ydF9sdGU6IHRoaXMucHJvcHMuaW5pdEZpbHRlci5lZmZvcnRfbHRlIHx8ICcnLFxuICAgICAgY2hhbmdlZDogZmFsc2UsXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3c+XG4gICAgICAgIDxDb2wgeHM9ezZ9IHNtPXs0fSBtZD17M30gbGc9ezJ9PlxuICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICA8Q29udHJvbExhYmVsPlN0YXR1czwvQ29udHJvbExhYmVsPlxuICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgIGNvbXBvbmVudENsYXNzPVwic2VsZWN0XCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc3RhdHVzfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZVN0YXR1c31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPihBbnkpPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJOZXdcIj5OZXc8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk9wZW5cIj5PcGVuPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJBc3NpZ25lZFwiPkFzc2lnbmVkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJGaXhlZFwiPkZpeGVkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJWZXJpZmllZFwiPlZlcmlmaWVkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJDbG9zZWRcIj5DbG9zZWQ8L29wdGlvbj5cbiAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDwvQ29sPlxuICAgICAgICA8Q29sIHhzPXs2fSBzbT17NH0gbWQ9ezN9IGxnPXsyfT5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5FZmZvcnQ8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgIDxJbnB1dEdyb3VwPlxuICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5lZmZvcnRfZ3RlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlRWZmb3J0R3RlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8SW5wdXRHcm91cC5BZGRvbj4tPC9JbnB1dEdyb3VwLkFkZG9uPlxuICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5lZmZvcnRfbHRlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlRWZmb3J0THRlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L0NvbD5cbiAgICAgICAgPENvbCB4cz17Nn0gc209ezR9IG1kPXszfSBsZz17M30+XG4gICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgIDxDb250cm9sTGFiZWw+Jm5ic3A7PC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICA8QnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBic1N0eWxlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMuYXBwbHlGaWx0ZXJ9PlxuICAgICAgICAgICAgICBBcHBseVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucmVzZXRGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmNoYW5nZWR9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBSZXNldFxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmNsZWFyRmlsdGVyfT5cbiAgICAgICAgICAgICAgICBDbGVhclxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPC9Db2w+XG4gICAgICA8L1Jvdz5cbiAgICApO1xuICB9XG59XG5cbklzc3VlRmlsdGVyLnByb3BUeXBlcyA9IHtcbiAgc2V0RmlsdGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpbml0RmlsdGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHN0YXR1czogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGVmZm9ydF9ndGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBlZmZvcnRfbHRlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIH0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJc3N1ZUZpbHRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgQnV0dG9uLCBUYWJsZSwgUGFuZWwgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IEZvbnRBd2Vzb21lSWNvbiBmcm9tICdAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWUnO1xuaW1wb3J0IGZhVHJhc2hBbHQgZnJvbSAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUtc29saWQvZmFUcmFzaEFsdC5qcyc7XG5cbi8vIGltcG9ydCBJc3N1ZUFkZCBmcm9tICcuL0lzc3VlQWRkLmpzeCc7XG5pbXBvcnQgSXNzdWVGaWx0ZXIgZnJvbSAnLi9Jc3N1ZUZpbHRlci5qc3gnO1xuaW1wb3J0IFRvYXN0IGZyb20gJy4vVG9hc3QuanN4JztcblxuY2xhc3MgSXNzdWVMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnN0cnVjdFF1ZXJ5KHF1ZXJ5KSB7XG4gICAgY29uc3Qgc3RhdCA9IHF1ZXJ5LnN0YXR1cyA/IGBzdGF0dXM9JHtxdWVyeS5zdGF0dXN9YCA6ICcnO1xuICAgIGNvbnN0IGVmZm9ydEd0ZSA9IHF1ZXJ5LmVmZm9ydF9ndGUgPyBgJmVmZm9ydF9ndGU9JHtxdWVyeS5lZmZvcnRfZ3RlfWAgOiAnJztcbiAgICBjb25zdCBlZmZvcnRMdGUgPSBxdWVyeS5lZmZvcnRfbHRlID8gYCZlZmZvcnRfbHRlPSR7cXVlcnkuZWZmb3J0X2x0ZX1gIDogJyc7XG4gICAgY29uc3Qgc2VhcmNoUXVlcnkgPSBgJHtzdGF0fSR7ZWZmb3J0R3RlfSR7ZWZmb3J0THRlfWA7XG4gICAgcmV0dXJuIHNlYXJjaFF1ZXJ5O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNzdWVzOiBbXSxcbiAgICAgIHF1ZXJ5OiB7XG4gICAgICAgIHN0YXR1czogJycsXG4gICAgICAgIGVmZm9ydF9ndGU6ICcnLFxuICAgICAgICBlZmZvcnRfbHRlOiAnJyxcbiAgICAgIH0sXG4gICAgICB0b2FzdFZpc2libGU6IGZhbHNlLFxuICAgICAgdG9hc3RNZXNzYWdlOiAnJyxcbiAgICAgIHRvYXN0VHlwZTogJ3N1Y2Nlc3MnLFxuICAgIH07XG4gICAgLy8gdGhpcy5jcmVhdGVJc3N1ZSA9IHRoaXMuY3JlYXRlSXNzdWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmxvYWREYXRhID0gdGhpcy5sb2FkRGF0YS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0RmlsdGVyID0gdGhpcy5zZXRGaWx0ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRlbGV0ZUlzc3VlID0gdGhpcy5kZWxldGVJc3N1ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2hvd0Vycm9yID0gdGhpcy5zaG93RXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRpc21pc3NUb2FzdCA9IHRoaXMuZGlzbWlzc1RvYXN0LmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnNldEZpbHRlcih0aGlzLnN0YXRlLnF1ZXJ5KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZERhdGEoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCBvbGRRdWVyeSA9IHByZXZQcm9wcy5sb2NhdGlvbjtcbiAgICBjb25zdCBuZXdRdWVyeSA9IHRoaXMucHJvcHMubG9jYXRpb247XG5cbiAgICBpZiAob2xkUXVlcnkuc2VhcmNoID09PSBuZXdRdWVyeS5zZWFyY2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxvYWREYXRhKCk7XG4gIH1cblxuICBzZXRGaWx0ZXIocXVlcnkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHF1ZXJ5LFxuICAgIH0pO1xuXG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goe1xuICAgICAgcGF0aG5hbWU6IHRoaXMucHJvcHMubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2g6IElzc3VlTGlzdC5jb25zdHJ1Y3RRdWVyeShxdWVyeSksXG4gICAgICBxdWVyeSxcbiAgICB9KTtcbiAgfVxuXG4gIHNob3dFcnJvcihtZXNzYWdlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvYXN0VmlzaWJsZTogdHJ1ZSwgdG9hc3RNZXNzYWdlOiBtZXNzYWdlLCB0b2FzdFR5cGU6ICdkYW5nZXInIH0pO1xuICB9XG5cbiAgZGlzbWlzc1RvYXN0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB0b2FzdFZpc2libGU6IGZhbHNlIH0pO1xuICB9XG5cbiAgbG9hZERhdGEoKSB7XG4gICAgZmV0Y2goYC9hcGkvaXNzdWVzJHt0aGlzLnByb3BzLmxvY2F0aW9uLnNlYXJjaH1gKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdUb3RhbCBDb3VudCBvZiByZWNvcmRzOiAnLCBkYXRhLl9tZXRhZGF0YS50b3RhbF9jb3VudCk7XG4gICAgICAgICAgZGF0YS5yZWNvcmRzLmZvckVhY2goKGlzc3VlKSA9PiB7XG4gICAgICAgICAgICBpc3N1ZS5jcmVhdGVkID0gbmV3IERhdGUoaXNzdWUuY3JlYXRlZCk7XG4gICAgICAgICAgICBpZiAoaXNzdWUuY29tcGxldGlvbkRhdGUpIHtcbiAgICAgICAgICAgICAgaXNzdWUuY29tcGxldGlvbkRhdGUgPSBuZXcgRGF0ZShpc3N1ZS5jb21wbGV0aW9uRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzc3VlczogZGF0YS5yZWNvcmRzIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChlcnJvcikgPT4ge1xuICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKGBGYWlsZWQgdG8gZmV0Y2ggaXNzdWU6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgdGhpcy5zaG93RXJyb3IoYEVycm9yIGluIGZldGNoaW5nIGRhdGEgZnJvbSBzZXJ2ZXIgKyAke2Vyci5tZXNzYWdlfWApO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gY3JlYXRlSXNzdWUobmV3SXNzdWUpIHtcbiAgLy8gICBmZXRjaCgnL2FwaS9pc3N1ZXMvJywge1xuICAvLyAgICAgbWV0aG9kOiAnUE9TVCcsXG4gIC8vICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgLy8gICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG5ld0lzc3VlKSxcbiAgLy8gICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAvLyAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gIC8vICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKCh1cGRhdGVkSXNzdWUpID0+IHtcbiAgLy8gICAgICAgICB1cGRhdGVkSXNzdWUuY3JlYXRlZCA9IG5ldyBEYXRlKHVwZGF0ZWRJc3N1ZS5jcmVhdGVkKTtcbiAgLy8gICAgICAgICBpZiAodXBkYXRlZElzc3VlLmNvbXBsZXRpb25EYXRlKSB7XG4gIC8vICAgICAgICAgICB1cGRhdGVkSXNzdWUuY29tcGxldGlvbkRhdGUgPSBuZXcgRGF0ZSh1cGRhdGVkSXNzdWUuY29tcGxldGlvbkRhdGUpO1xuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgICBjb25zdCBuZXdJc3N1ZXMgPSB0aGlzLnN0YXRlLmlzc3Vlcy5jb25jYXQodXBkYXRlZElzc3VlKTtcbiAgLy8gICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNzdWVzOiBuZXdJc3N1ZXMgfSk7XG4gIC8vICAgICAgIH0pO1xuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oKGVycm9yKSA9PiB7XG4gIC8vICAgICAgICAgdGhpcy5zaG93RXJyb3IoYEZhaWxlZCB0byBhZGQgaXNzdWU6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgLy8gICAgICAgfSk7XG4gIC8vICAgICB9XG4gIC8vICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAvLyAgICAgdGhpcy5zaG93RXJyb3IoYEVycm9yIGluIHNlbmRpbmcgRGF0YSB0byBzZXJ2ZXIgOiAke2Vyci5tZXNzYWdlfWApO1xuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgZGVsZXRlSXNzdWUoaWQpIHtcbiAgICBmZXRjaChgL2FwaS9pc3N1ZXMvJHtpZH1gLCB7IG1ldGhvZDogJ0RFTEVURScgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhpcy5zaG93RXJyb3IoJ0ZhaWxlZCB0byBkZWxldGUgaXNzdWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9hZERhdGEoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFBhbmVsPlxuICAgICAgICAgIDxQYW5lbC5IZWFkaW5nPlxuICAgICAgICAgICAgPFBhbmVsLlRpdGxlIHRvZ2dsZT5cbiAgICAgICAgICAgICAgRmlsdGVyXG4gICAgICAgICAgICA8L1BhbmVsLlRpdGxlPlxuICAgICAgICAgIDwvUGFuZWwuSGVhZGluZz5cbiAgICAgICAgICA8UGFuZWwuQ29sbGFwc2U+XG4gICAgICAgICAgICA8UGFuZWwuQm9keT5cbiAgICAgICAgICAgICAgPElzc3VlRmlsdGVyXG4gICAgICAgICAgICAgICAgc2V0RmlsdGVyPXt0aGlzLnNldEZpbHRlcn1cbiAgICAgICAgICAgICAgICBpbml0RmlsdGVyPXt0aGlzLnN0YXRlLnF1ZXJ5fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9QYW5lbC5Cb2R5PlxuICAgICAgICAgIDwvUGFuZWwuQ29sbGFwc2U+XG4gICAgICAgIDwvUGFuZWw+XG4gICAgICAgIDxJc3N1ZVRhYmxlIGlzc3Vlcz17dGhpcy5zdGF0ZS5pc3N1ZXN9IGRlbGV0ZUlzc3VlPXt0aGlzLmRlbGV0ZUlzc3VlfSAvPlxuICAgICAgICA8VG9hc3RcbiAgICAgICAgICBzaG93aW5nPXt0aGlzLnN0YXRlLnRvYXN0VmlzaWJsZX1cbiAgICAgICAgICBvbkRpc21pc3M9e3RoaXMuZGlzbWlzc1RvYXN0fVxuICAgICAgICAgIG1lc3NhZ2U9e3RoaXMuc3RhdGUudG9hc3RNZXNzYWdlfVxuICAgICAgICAgIGJzU3R5bGU9e3RoaXMuc3RhdGUudG9hc3RUeXBlfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBJc3N1ZVJvdyA9IChwcm9wcykgPT4ge1xuICBmdW5jdGlvbiBvbkRlbGV0ZUNsaWNrKCkge1xuICAgIHByb3BzLmRlbGV0ZUlzc3VlKHByb3BzLmlzc3VlLl9pZCk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8dHI+XG4gICAgICA8dGQ+XG4gICAgICAgIDxMaW5rIHRvPXtgL2lzc3Vlcy8ke3Byb3BzLmlzc3VlLl9pZH1gfT57cHJvcHMuaXNzdWUuX2lkLnN1YnN0cigtNCl9PC9MaW5rPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZD57cHJvcHMuaXNzdWUuc3RhdHVzfTwvdGQ+XG4gICAgICA8dGQ+e3Byb3BzLmlzc3VlLm93bmVyfTwvdGQ+XG4gICAgICA8dGQ+e3Byb3BzLmlzc3VlLmNyZWF0ZWQudG9EYXRlU3RyaW5nKCl9PC90ZD5cbiAgICAgIDx0ZD57cHJvcHMuaXNzdWUuZWZmb3J0fTwvdGQ+XG4gICAgICA8dGQ+e3Byb3BzLmlzc3VlLmNvbXBsZXRpb25EYXRlID8gcHJvcHMuaXNzdWUuY29tcGxldGlvbkRhdGUudG9EYXRlU3RyaW5nKCkgOiAnJ308L3RkPlxuICAgICAgPHRkPntwcm9wcy5pc3N1ZS50aXRsZX08L3RkPlxuICAgICAgPHRkPlxuICAgICAgICA8QnV0dG9uIGJzU2l6ZT1cInhzbWFsbFwiIG9uQ2xpY2s9e29uRGVsZXRlQ2xpY2t9PlxuICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUcmFzaEFsdH0gLz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICk7XG59O1xuXG5mdW5jdGlvbiBJc3N1ZVRhYmxlKHByb3BzKSB7XG4gIGNvbnN0IGlzc3VlUm93cyA9IHByb3BzLmlzc3Vlcy5tYXAoaXNzdWUgPT5cbiAgICA8SXNzdWVSb3cga2V5PXtpc3N1ZS5faWR9IGlzc3VlPXtpc3N1ZX0gZGVsZXRlSXNzdWU9e3Byb3BzLmRlbGV0ZUlzc3VlfSAvPik7XG4gIHJldHVybiAoXG4gICAgPFRhYmxlIGJvcmRlcmVkIGNvbmRlbnNlZCBob3ZlciByZXNwb25zaXZlPlxuICAgICAgPHRoZWFkPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPklkPC90aD5cbiAgICAgICAgICA8dGg+U3RhdHVzPC90aD5cbiAgICAgICAgICA8dGg+T3duZXI8L3RoPlxuICAgICAgICAgIDx0aD5DcmVhdGVkPC90aD5cbiAgICAgICAgICA8dGg+RWZmb3J0PC90aD5cbiAgICAgICAgICA8dGg+Q29tcGxldGlvbiBkYXRlPC90aD5cbiAgICAgICAgICA8dGg+VGl0bGU8L3RoPlxuICAgICAgICAgIDx0aCAvPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAge2lzc3VlUm93c31cbiAgICAgIDwvdGJvZHk+XG4gICAgPC9UYWJsZT5cbiAgKTtcbn1cblxuSXNzdWVSb3cucHJvcFR5cGVzID0ge1xuICBpc3N1ZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBvd25lcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgX2lkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjcmVhdGVkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGVmZm9ydDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjb21wbGV0aW9uRGF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfSkuaXNSZXF1aXJlZCxcbiAgZGVsZXRlSXNzdWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5Jc3N1ZVRhYmxlLnByb3BUeXBlcyA9IHtcbiAgaXNzdWVzOiBQcm9wVHlwZXMuYXJyYXlPZih7XG4gIH0pLmlzUmVxdWlyZWQsXG4gIGRlbGV0ZUlzc3VlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuSXNzdWVMaXN0LnByb3BUeXBlcyA9IHtcbiAgbG9jYXRpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGF0aG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZWFyY2g6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBxdWVyeTogUHJvcFR5cGVzLnNoYXBlKHt9KS5pc1JlcXVpcmVkLFxuICB9KS5pc1JlcXVpcmVkLFxuICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJc3N1ZUxpc3Q7XG4iLCJpbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgU3dpdGNoLCB3aXRoUm91dGVyIC8qIExpbmssIFJlZGlyZWN0ICovIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgSXNzdWVMaXN0IGZyb20gJy4vSXNzdWVMaXN0LmpzeCc7XG5pbXBvcnQgSXNzdWVFZGl0IGZyb20gJy4vSXNzdWVFZGl0LmpzeCc7XG5pbXBvcnQgeyBIb21lLCBIZWFkZXIsIEZvb3RlciB9IGZyb20gJy4vQ29tbW9uLmpzeCc7XG5pbXBvcnQgTm90Rm91bmQgZnJvbSAnLi9Ob3RGb3VuZC5qc3gnO1xuaW1wb3J0IEFydGljbGVzIGZyb20gJy4vQXJ0aWNsZXMuanN4JztcblxuY29uc3QgY29udGVudE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudHMnKTtcblxuY29uc3QgUm91dGVkQXBwID0gKCkgPT4gKFxuICA8Um91dGVyPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICA8SGVhZGVyIC8+XG4gICAgICA8aHIgLz5cbiAgICAgIDxTd2l0Y2g+XG4gICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2hvbWVcIiBjb21wb25lbnQ9e0hvbWV9IC8+XG4gICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2lzc3Vlc1wiIGNvbXBvbmVudD17d2l0aFJvdXRlcihJc3N1ZUxpc3QpfSAvPlxuICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9pc3N1ZXMvOmlkXCIgY29tcG9uZW50PXtJc3N1ZUVkaXR9IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2FydGljbGVzXCIgY29tcG9uZW50PXtBcnRpY2xlc30gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvKlwiIGNvbXBvbmVudD17Tm90Rm91bmR9IC8+XG4gICAgICA8L1N3aXRjaD5cbiAgICAgIDxGb290ZXIgLz5cbiAgICA8L2Rpdj5cbiAgPC9Sb3V0ZXI+XG4pO1xuXG5SZWFjdERPTS5yZW5kZXIoPFJvdXRlZEFwcCAvPiwgY29udGVudE5vZGUpO1xuXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
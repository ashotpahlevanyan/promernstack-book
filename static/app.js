!function(e){function t(t){for(var r,u,o=t[0],i=t[1],s=t[2],c=0,d=[];c<o.length;c++)u=o[c],a[u]&&d.push(a[u][0]),a[u]=0;for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r]);for(f&&f(t);d.length;)d.shift()();return l.push.apply(l,s||[]),n()}function n(){for(var e,t=0;t<l.length;t++){for(var n=l[t],r=!0,o=1;o<n.length;o++){var i=n[o];0!==a[i]&&(r=!1)}r&&(l.splice(t--,1),e=u(u.s=n[0]))}return e}var r={},a={1:0},l=[];function u(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,u),n.l=!0,n.exports}u.m=e,u.c=r,u.d=function(e,t,n){u.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},u.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},u.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(t,"a",t),t},u.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},u.p="./";var o=window.webpackJsonp=window.webpackJsonp||[],i=o.push.bind(o);o.push=t,o=o.slice();for(var s=0;s<o.length;s++)t(o[s]);var f=i;l.push([402,0]),n()}({149:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=o(n(6)),l=n(56),u=o(n(10));function o(e){return e&&e.__esModule?e:{default:e}}var i=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){var e=this,t=i.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?a.default.createElement("div",null,a.default.createElement("h3",{className:"title"},t.title),a.default.createElement("hr",null),a.default.createElement("p",{className:"text"},t.text)):a.default.createElement("div",null,"No Article with that key")}}]),t}(),f=function(e){var t=e.match;return a.default.createElement("div",{className:"articles"},a.default.createElement("h2",null,"Articles section"),a.default.createElement("ul",{className:"articles"},i.map(function(e){return a.default.createElement("li",{className:"article",key:e.key},a.default.createElement(l.Link,{to:t.url+"/"+e.key},e.title))})),a.default.createElement(l.Route,{path:t.url+"/:articleId",component:s}))};s.propTypes={match:u.default.shape({params:u.default.shape({articleId:u.default.string.isRequired})}).isRequired},f.propTypes={match:u.default.shape({}).isRequired},t.default=f},150:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(6),l=(r=a)&&r.__esModule?r:{default:r};t.default=function(){return l.default.createElement("p",null,"Page Not Fount")}},151:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Header=t.Home=void 0;var r,a=n(6),l=(r=a)&&r.__esModule?r:{default:r};t.Home=function(){return l.default.createElement("div",{className:"home"},l.default.createElement("h1",null,"Home Section contents"))},t.Header=function(){return l.default.createElement("div",{className:"header"},l.default.createElement("h1",null,"Issue Tracker"))},t.Footer=function(){return l.default.createElement("div",{className:"footer"},"Full source code available at this ",l.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))}},152:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=o(n(6)),u=o(n(10));function o(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return l.default.createElement("input",r({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=i,i.propTypes={value:u.default.number.isRequired,onChange:u.default.func.isRequired}},153:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=i(n(6)),l=n(56),u=i(n(10)),o=i(n(152));function i(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issue:{_id:"",title:"",status:"",owner:"",effort:null,completionDate:"",created:""}},n.onChange=n.onChange.bind(n),n.loadData=n.loadData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),r=void 0!==t?t:e.target.value;n[e.target.name]=r,this.setState({issue:n})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created).toDateString(),t.completionDate=null!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(e){alert("Failed to fetch issue : "+e.message)})}).catch(function(e){alert("Error in fetching data from server : "+e.message)})}},{key:"render",value:function(){var e=this.state.issue;return a.default.createElement("div",null,a.default.createElement("form",null,"ID: ",e._id,a.default.createElement("br",null),"Created: ",e.created,a.default.createElement("br",null),"Status:",a.default.createElement("select",{name:"status",value:e.status,onChange:this.onChange},a.default.createElement("option",{value:"New"},"New"),a.default.createElement("option",{value:"Open"},"Open"),a.default.createElement("option",{value:"Assigned"},"Assigned"),a.default.createElement("option",{value:"Fixed"},"Fixed"),a.default.createElement("option",{value:"Verified"},"Verified"),a.default.createElement("option",{value:"Closed"},"Closed")),a.default.createElement("br",null),"Owner:",a.default.createElement("input",{type:"text",name:"owner",value:e.owner,onChange:this.onChange}),a.default.createElement("br",null),"Effort:",a.default.createElement(o.default,{size:5,name:"effort",value:e.effort,onChange:this.onChange}),a.default.createElement("br",null),"Completion date:",a.default.createElement("input",{type:"text",name:"completionDate",value:e.completionDate,onChange:this.onChange}),a.default.createElement("br",null),"Title:",a.default.createElement("input",{type:"text",size:50,name:"title",value:e.title,onChange:this.onChange}),a.default.createElement("br",null),a.default.createElement("button",{type:"submit"},"Submit"),a.default.createElement("br",null),a.default.createElement(l.Link,{to:"/issues"},"Back to issue list")))}}]),t}();t.default=s,s.propTypes={match:u.default.shape({params:u.default.shape({id:u.default.string})}).isRequired}},154:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(6)),l=u(n(10));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return a.default.createElement("div",null,"Status: ",a.default.createElement("select",{value:this.state.status,onChange:this.onChangeStatus},a.default.createElement("option",{value:""},"(Any)"),a.default.createElement("option",{value:"New"},"New"),a.default.createElement("option",{value:"Open"},"Open"),a.default.createElement("option",{value:"Assigned"},"Assigned"),a.default.createElement("option",{value:"Fixed"},"Fixed"),a.default.createElement("option",{value:"Verified"},"Verified"),a.default.createElement("option",{value:"Closed"},"Closed"))," Effort between: ",a.default.createElement("input",{size:5,value:this.state.effort_gte,onChange:this.onChangeEffortGte})," - ",a.default.createElement("input",{size:5,value:this.state.effort_lte,onChange:this.onChangeEffortLte}),a.default.createElement("button",{onClick:this.applyFilter},"Apply"),a.default.createElement("button",{onClick:this.resetFilter,disabled:!this.state.changed},"Reset"),a.default.createElement("button",{onClick:this.clearFilter},"Clear"))}}]),t}();o.propTypes={setFilter:l.default.func.isRequired,initFilter:l.default.shape({status:l.default.string.isRequired,effort_gte:l.default.string.isRequired,effort_lte:l.default.string.isRequired}).isRequired},t.default=o},155:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(6)),l=u(n(10));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleSubmit=e.handleSubmit.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"handleSubmit",value:function(e){e.preventDefault();var t=document.forms.issueAdd;this.props.createIssue({owner:t.owner.value,title:t.title.value,status:"New",created:new Date}),t.owner.value="",t.title.value=""}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("form",{name:"issueAdd",onSubmit:this.handleSubmit},a.default.createElement("input",{type:"text",name:"owner",placeholder:"Owner"}),a.default.createElement("input",{type:"text",name:"title",placeholder:"Title"}),a.default.createElement("button",null,"Add")))}}]),t}();t.default=o,o.propTypes={createIssue:l.default.func.isRequired}},157:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(6));n(156);var l=s(n(10)),u=n(56),o=s(n(155)),i=s(n(154));function s(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={issues:[],query:{status:"",effort_gte:"",effort_lte:""}},n.createIssue=n.createIssue.bind(n),n.loadData=n.loadData.bind(n),n.setFilter=n.setFilter.bind(n),n.setFilter(n.state.query),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),r(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(e){alert("Failed to fetch issue: "+e.message)})}).catch(function(e){alert("Error in fetching data from server + "+e.message)})}},{key:"createIssue",value:function(e){var t=this;fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){e.ok?e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate));var n=t.state.issues.concat(e);t.setState({issues:n})}):e.json().then(function(e){alert("Failed to add issue: "+e.message)})}).catch(function(e){alert("Error in sending Data to server : "+e.message)})}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement(i.default,{setFilter:this.setFilter,initFilter:this.state.query}),a.default.createElement("hr",null),a.default.createElement(d,{issues:this.state.issues}),a.default.createElement("hr",null),a.default.createElement(o.default,{createIssue:this.createIssue}))}}]),t}(),c=function(e){return a.default.createElement("tr",null,a.default.createElement("td",null,a.default.createElement(u.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),a.default.createElement("td",null,e.issue.status),a.default.createElement("td",null,e.issue.owner),a.default.createElement("td",null,e.issue.created.toDateString()),a.default.createElement("td",null,e.issue.effort),a.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),a.default.createElement("td",null,e.issue.title))};function d(e){var t=e.issues.map(function(e){return a.default.createElement(c,{key:e._id,issue:e})});return a.default.createElement("table",{className:"bordered-table"},a.default.createElement("thead",null,a.default.createElement("tr",null,a.default.createElement("th",null,"Id"),a.default.createElement("th",null,"Status"),a.default.createElement("th",null,"Owner"),a.default.createElement("th",null,"Created"),a.default.createElement("th",null,"Effort"),a.default.createElement("th",null,"Completion date"),a.default.createElement("th",null,"Title"))),a.default.createElement("tbody",null,t))}c.propTypes={issue:l.default.shape({owner:l.default.string.isRequired,title:l.default.string.isRequired,_id:l.default.string,status:l.default.string,created:l.default.string,effort:l.default.number,completionDate:l.default.string}).isRequired},d.propTypes={issues:l.default.arrayOf({}).isRequired},f.propTypes={location:l.default.shape({pathname:l.default.string.isRequired,search:l.default.string.isRequired,query:l.default.shape({}).isRequired}).isRequired,history:l.default.shape({push:l.default.func.isRequired}).isRequired},t.default=f},401:function(e,t,n){"use strict";n(400);var r=c(n(6)),a=c(n(196)),l=n(56),u=c(n(157)),o=c(n(153)),i=n(151),s=c(n(150)),f=c(n(149));function c(e){return e&&e.__esModule?e:{default:e}}var d=document.getElementById("contents");a.default.render(r.default.createElement(function(){return r.default.createElement(l.BrowserRouter,null,r.default.createElement("div",null,r.default.createElement(i.Header,null),r.default.createElement("ul",null,r.default.createElement("li",null,r.default.createElement(l.Link,{to:"/"},"Home")),r.default.createElement("li",null,r.default.createElement(l.Link,{to:"/issues"},"Issues")),r.default.createElement("li",null,r.default.createElement(l.Link,{to:"/articles"},"Articles"))),r.default.createElement("hr",null),r.default.createElement(l.Switch,null,r.default.createElement(l.Route,{exact:!0,path:"/",component:i.Home}),r.default.createElement(l.Route,{exact:!0,path:"/issues",component:(0,l.withRouter)(u.default)}),r.default.createElement(l.Route,{exact:!0,path:"/issues/:id",component:o.default}),r.default.createElement(l.Route,{path:"/articles",component:f.default}),r.default.createElement(l.Route,{path:"/*",component:s.default})),r.default.createElement(i.Footer,null)))},null),d)},402:function(e,t,n){e.exports=n(401)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
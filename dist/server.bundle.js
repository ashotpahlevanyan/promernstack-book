!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){function t(e){var t=require("./"+e+"."+a+".hot-update.js");!function(e,t){if(!b[e]||!y[e])return;for(var n in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(p[n]=t[n]);0==--h&&0===v&&x()}(t.id,t.modules)}var n,r=!0,a="09fca723d05f4dff69d6",o={},i=[],s=[];function l(e){var t=O[e];if(!t)return j;var r=function(r){return t.hot.active?(O[r]?O[r].parents.includes(e)||O[r].parents.push(e):(i=[e],n=r),t.children.includes(r)||t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),i=[]),j(r)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return j[e]},set:function(t){j[e]=t}}};for(var o in j)Object.prototype.hasOwnProperty.call(j,o)&&"e"!==o&&Object.defineProperty(r,o,a(o));return r.e=function(e){return"ready"===c&&f("prepare"),v++,j.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===c&&(g[e]||_(e),0===v&&0===h&&x())}},r}var u=[],c="idle";function f(e){c=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var d,p,m,h=0,v=0,g={},y={},b={};function w(e){return+e+""===e?+e:e}function E(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return r=e,f("check"),function(){try{var e=require("./"+a+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return f("idle"),null;y={},g={},b=e.c,m=e.h,f("prepare");var t=new Promise(function(e,t){d={resolve:e,reject:t}});p={};return _(0),"prepare"===c&&0===v&&0===h&&x(),t})}function _(e){b[e]?(y[e]=!0,h++,t(e)):g[e]=!0}function x(){f("ready");var e=d;if(d=null,e)if(r)Promise.resolve().then(function(){return k(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&t.push(w(n));e.resolve(t)}}function k(t){if("ready"!==c)throw new Error("apply() is only allowed in ready status");var n,r,s,l,u;function d(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var a=r.pop(),o=a.id,i=a.chain;if((l=O[o])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:o};if(l.hot._main)return{type:"unaccepted",chain:i,moduleId:o};for(var s=0;s<l.parents.length;s++){var u=l.parents[s],c=O[u];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:i.concat([u]),moduleId:o,parentId:u};t.includes(u)||(c.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),h(n[u],[o])):(delete n[u],t.push(u),r.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.includes(r)||e.push(r)}}t=t||{};var v={},g=[],y={},E=function(){console.warn("[HMR] unexpected require("+x.moduleId+") to disposed module")};for(var _ in p)if(Object.prototype.hasOwnProperty.call(p,_)){var x;u=w(_);var k=!1,C=!1,S=!1,M="";switch((x=p[_]?d(u):{type:"disposed",moduleId:_}).chain&&(M="\nUpdate propagation: "+x.chain.join(" -> ")),x.type){case"self-declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+x.moduleId+M));break;case"declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+x.moduleId+" in "+x.parentId+M));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(x),t.ignoreUnaccepted||(k=new Error("Aborted because "+u+" is not accepted"+M));break;case"accepted":t.onAccepted&&t.onAccepted(x),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(x),S=!0;break;default:throw new Error("Unexception type "+x.type)}if(k)return f("abort"),Promise.reject(k);if(C)for(u in y[u]=p[u],h(g,x.outdatedModules),x.outdatedDependencies)Object.prototype.hasOwnProperty.call(x.outdatedDependencies,u)&&(v[u]||(v[u]=[]),h(v[u],x.outdatedDependencies[u]));S&&(h(g,[x.moduleId]),y[u]=E)}var T,D=[];for(r=0;r<g.length;r++)u=g[r],O[u]&&O[u].hot._selfAccepted&&D.push({module:u,errorHandler:O[u].hot._selfAccepted});f("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var I,P,N=g.slice();N.length>0;)if(u=N.pop(),l=O[u]){var F={},A=l.hot._disposeHandlers;for(s=0;s<A.length;s++)(n=A[s])(F);for(o[u]=F,l.hot.active=!1,delete O[u],delete v[u],s=0;s<l.children.length;s++){var R=O[l.children[s]];R&&((T=R.parents.indexOf(u))>=0&&R.parents.splice(T,1))}}for(u in v)if(Object.prototype.hasOwnProperty.call(v,u)&&(l=O[u]))for(P=v[u],s=0;s<P.length;s++)I=P[s],(T=l.children.indexOf(I))>=0&&l.children.splice(T,1);for(u in f("apply"),a=m,y)Object.prototype.hasOwnProperty.call(y,u)&&(e[u]=y[u]);var z=null;for(u in v)if(Object.prototype.hasOwnProperty.call(v,u)&&(l=O[u])){P=v[u];var L=[];for(r=0;r<P.length;r++)if(I=P[r],n=l.hot._acceptedDependencies[I]){if(L.includes(n))continue;L.push(n)}for(r=0;r<L.length;r++){n=L[r];try{n(P)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:P[r],error:e}),t.ignoreErrored||z||(z=e)}}}for(r=0;r<D.length;r++){var q=D[r];u=q.module,i=[u];try{j(u)}catch(e){if("function"==typeof q.errorHandler)try{q.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||z||(z=n),z||(z=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||z||(z=e)}}return z?(f("fail"),Promise.reject(z)):(f("idle"),new Promise(function(e){e(g)}))}var O={};function j(t){if(O[t])return O[t].exports;var r=O[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:E,apply:k,status:function(e){if(!e)return c;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:o[e]};return n=void 0,t}(t),parents:(s=i,i=[],s),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}return j.m=e,j.c=O,j.d=function(e,t,n){j.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},j.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},j.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return j.d(t,"a",t),t},j.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},j.p="",j.w={},j.h=function(){return a},l(0)(j.s=0)}({"./node_modules/@fortawesome/fontawesome-free-solid/faBars.js":function(e,t){e.exports={prefix:"fas",iconName:"bars",icon:[448,512,[],"f0c9","M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"]}},"./node_modules/@fortawesome/fontawesome-free-solid/faEllipsisH.js":function(e,t){e.exports={prefix:"fas",iconName:"ellipsis-h",icon:[512,512,[],"f141","M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"]}},"./node_modules/@fortawesome/fontawesome-free-solid/faPlus.js":function(e,t){e.exports={prefix:"fas",iconName:"plus",icon:[448,512,[],"f067","M448 294.2v-76.4c0-13.3-10.7-24-24-24H286.2V56c0-13.3-10.7-24-24-24h-76.4c-13.3 0-24 10.7-24 24v137.8H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h137.8V456c0 13.3 10.7 24 24 24h76.4c13.3 0 24-10.7 24-24V318.2H424c13.3 0 24-10.7 24-24z"]}},"./node_modules/@fortawesome/fontawesome-free-solid/faTrashAlt.js":function(e,t){e.exports={prefix:"fas",iconName:"trash-alt",icon:[448,512,[],"f2ed","M0 84V56c0-13.3 10.7-24 24-24h112l9.4-18.7c4-8.2 12.3-13.3 21.4-13.3h114.3c9.1 0 17.4 5.1 21.5 13.3L312 32h112c13.3 0 24 10.7 24 24v28c0 6.6-5.4 12-12 12H12C5.4 96 0 90.6 0 84zm416 56v324c0 26.5-21.5 48-48 48H80c-26.5 0-48-21.5-48-48V140c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12zm-272 68c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208z"]}},"./node_modules/@fortawesome/react-fontawesome/index.es.js":function(e,t,n){"use strict";n.r(t);var r=function(){},a={},o={},i=null,s={mark:r,measure:r};try{"undefined"!=typeof window&&(a=window),"undefined"!=typeof document&&(o=document),"undefined"!=typeof MutationObserver&&(i=MutationObserver),"undefined"!=typeof performance&&(s=performance)}catch(e){}var l=(a.navigator||{}).userAgent,u=void 0===l?"":l,c=a,f=o,d=i,p=s,m=!!c.document,h=!!f.documentElement&&!!f.head&&"function"==typeof f.addEventListener&&"function"==typeof f.createElement,v=~u.indexOf("MSIE")||~u.indexOf("Trident/"),g=16,y="data-fa-i2svg",b="data-fa-pseudo-element",w="fontawesome-i2svg",E=function(){try{return!0}catch(e){return!1}}(),_=[1,2,3,4,5,6,7,8,9,10],x=_.concat([11,12,13,14,15,16,17,18,19,20]),k=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],O=["xs","sm","lg","fw","ul","li","border","pull-left","pull-right","spin","pulse","rotate-90","rotate-180","rotate-270","flip-horizontal","flip-vertical","stack","stack-1x","stack-2x","inverse","layers","layers-text","layers-counter"].concat(_.map(function(e){return e+"x"})).concat(x.map(function(e){return"w-"+e})),j=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},T=c.FontAwesomeConfig||{},D=Object.keys(T),I=S({familyPrefix:"fa",replacementClass:"svg-inline--fa",autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},T);I.autoReplaceSvg||(I.observeMutations=!1);var P=S({},I);function N(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).asNewDefault,n=void 0!==t&&t,r=Object.keys(P),a=n?function(e){return~r.indexOf(e)&&!~D.indexOf(e)}:function(e){return~r.indexOf(e)};Object.keys(e).forEach(function(t){a(t)&&(P[t]=e[t])})}c.FontAwesomeConfig=P;var F=c||{};F.___FONT_AWESOME___||(F.___FONT_AWESOME___={}),F.___FONT_AWESOME___.styles||(F.___FONT_AWESOME___.styles={}),F.___FONT_AWESOME___.hooks||(F.___FONT_AWESOME___.hooks={}),F.___FONT_AWESOME___.shims||(F.___FONT_AWESOME___.shims=[]);var A=F.___FONT_AWESOME___,R=[],z=!1;h&&((z=(f.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(f.readyState))||f.addEventListener("DOMContentLoaded",function e(){f.removeEventListener("DOMContentLoaded",e),z=1,R.map(function(e){return e()})}));var L=function(e){h&&(z?setTimeout(e,0):R.push(e))},q=g,H={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function V(e){if(e&&h){var t=f.createElement("style");t.setAttribute("type","text/css"),t.innerHTML=e;for(var n=f.head.childNodes,r=null,a=n.length-1;a>-1;a--){var o=n[a],i=(o.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(i)>-1&&(r=o)}return f.head.insertBefore(t,r),e}}var B=0;function W(){return++B}function G(e){for(var t=[],n=(e||[]).length>>>0;n--;)t[n]=e[n];return t}function U(e){return e.classList?G(e.classList):(e.getAttribute("class")||"").split(" ").filter(function(e){return e})}function X(e,t){var n,r=t.split("-"),a=r[0],o=r.slice(1).join("-");return a!==e||""===o||(n=o,~O.indexOf(n))?null:o}function Y(e){return(""+e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function K(e){return Object.keys(e||{}).reduce(function(t,n){return t+(n+": ")+e[n]+";"},"")}function $(e){return e.size!==H.size||e.x!==H.x||e.y!==H.y||e.rotate!==H.rotate||e.flipX||e.flipY}function J(e){var t=e.transform,n=e.containerWidth,r=e.iconWidth;return{outer:{transform:"translate("+n/2+" 256)"},inner:{transform:"translate("+32*t.x+", "+32*t.y+") "+" "+("scale("+t.size/16*(t.flipX?-1:1)+", "+t.size/16*(t.flipY?-1:1)+") ")+" "+("rotate("+t.rotate+" 0 0)")},path:{transform:"translate("+r/2*-1+" -256)"}}}var Q={x:0,y:0,width:"100%",height:"100%"},Z=function(e){var t=e.children,n=e.attributes,r=e.main,a=e.mask,o=e.transform,i=r.width,s=r.icon,l=a.width,u=a.icon,c=J({transform:o,containerWidth:l,iconWidth:i}),f={tag:"rect",attributes:S({},Q,{fill:"white"})},d={tag:"g",attributes:S({},c.inner),children:[{tag:"path",attributes:S({},s.attributes,c.path,{fill:"black"})}]},p={tag:"g",attributes:S({},c.outer),children:[d]},m="mask-"+W(),h="clip-"+W(),v={tag:"defs",children:[{tag:"clipPath",attributes:{id:h},children:[u]},{tag:"mask",attributes:S({},Q,{id:m,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[f,p]}]};return t.push(v,{tag:"rect",attributes:S({fill:"currentColor","clip-path":"url(#"+h+")",mask:"url(#"+m+")"},Q)}),{children:t,attributes:n}},ee=function(e){var t=e.children,n=e.attributes,r=e.main,a=e.transform,o=K(e.styles);if(o.length>0&&(n.style=o),$(a)){var i=J({transform:a,containerWidth:r.width,iconWidth:r.width});t.push({tag:"g",attributes:S({},i.outer),children:[{tag:"g",attributes:S({},i.inner),children:[{tag:r.icon.tag,children:r.icon.children,attributes:S({},r.icon.attributes,i.path)}]}]})}else t.push(r.icon);return{children:t,attributes:n}},te=function(e){var t=e.children,n=e.main,r=e.mask,a=e.attributes,o=e.styles,i=e.transform;if($(i)&&n.found&&!r.found){var s={x:n.width/n.height/2,y:.5};a.style=K(S({},o,{"transform-origin":s.x+i.x/16+"em "+(s.y+i.y/16)+"em"}))}return[{tag:"svg",attributes:a,children:t}]},ne=function(e){var t=e.prefix,n=e.iconName,r=e.children,a=e.attributes,o=e.symbol,i=!0===o?t+"-"+P.familyPrefix+"-"+n:o;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:S({},a,{id:i}),children:r}]}]};function re(e){var t=e.icons,n=t.main,r=t.mask,a=e.prefix,o=e.iconName,i=e.transform,s=e.symbol,l=e.title,u=e.extra,c=e.watchable,f=void 0!==c&&c,d=r.found?r:n,p=d.width,m=d.height,h="fa-w-"+Math.ceil(p/m*16),v=[P.replacementClass,o?P.familyPrefix+"-"+o:"",h].concat(u.classes).join(" "),g={children:[],attributes:S({},u.attributes,{"data-prefix":a,"data-icon":o,class:v,role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 "+p+" "+m})};f&&(g.attributes[y]=""),l&&g.children.push({tag:"title",attributes:{id:g.attributes["aria-labelledby"]||"title-"+W()},children:[l]});var b=S({},g,{prefix:a,iconName:o,main:n,mask:r,transform:i,symbol:s,styles:u.styles}),w=r.found&&n.found?Z(b):ee(b),E=w.children,_=w.attributes;return b.children=E,b.attributes=_,s?ne(b):te(b)}function ae(e){var t=e.content,n=e.width,r=e.height,a=e.transform,o=e.title,i=e.extra,s=e.watchable,l=void 0!==s&&s,u=S({},i.attributes,o?{title:o}:{},{class:i.classes.join(" ")});l&&(u[y]="");var c=S({},i.styles);$(a)&&(c.transform=function(e){var t=e.transform,n=e.width,r=void 0===n?g:n,a=e.height,o=void 0===a?g:a,i=e.startCentered,s=void 0!==i&&i,l="";return l+=s&&v?"translate("+(t.x/q-r/2)+"em, "+(t.y/q-o/2)+"em) ":s?"translate(calc(-50% + "+t.x/q+"em), calc(-50% + "+t.y/q+"em)) ":"translate("+t.x/q+"em, "+t.y/q+"em) ",l+="scale("+t.size/q*(t.flipX?-1:1)+", "+t.size/q*(t.flipY?-1:1)+") ",l+="rotate("+t.rotate+"deg) "}({transform:a,startCentered:!0,width:n,height:r}),c["-webkit-transform"]=c.transform);var f=K(c);f.length>0&&(u.style=f);var d=[];return d.push({tag:"span",attributes:u,children:[t]}),o&&d.push({tag:"span",attributes:{class:"sr-only"},children:[o]}),d}var oe=function(){},ie=P.measurePerformance&&p&&p.mark&&p.measure?p:{mark:oe,measure:oe},se=function(e){ie.mark('FA "5.0.7" '+e+" ends"),ie.measure('FA "5.0.7" '+e,'FA "5.0.7" '+e+" begins",'FA "5.0.7" '+e+" ends")},le={begin:function(e){return ie.mark('FA "5.0.7" '+e+" begins"),function(){return se(e)}},end:se},ue=function(e,t,n,r){var a,o,i,s=Object.keys(e),l=s.length,u=void 0!==r?function(e,t){return function(n,r,a,o){return e.call(t,n,r,a,o)}}(t,r):t;for(void 0===n?(a=1,i=e[s[0]]):(a=0,i=n);a<l;a++)i=u(i,e[o=s[a]],o,e);return i},ce=A.styles,fe=A.shims,de={},pe={},me={},he=function(){var e=function(e){return ue(ce,function(t,n,r){return t[r]=ue(n,e,{}),t},{})};de=e(function(e,t,n){return e[t[3]]=n,e}),pe=e(function(e,t,n){var r=t[2];return e[n]=n,r.forEach(function(t){e[t]=n}),e});var t="far"in ce;me=ue(fe,function(e,n){var r=n[0],a=n[1],o=n[2];return"far"!==a||t||(a="fas"),e[r]={prefix:a,iconName:o},e},{})};he();var ve=A.styles,ge=function(){return{prefix:null,iconName:null,rest:[]}};function ye(e){return e.reduce(function(e,t){var n=X(P.familyPrefix,t);if(ve[t])e.prefix=t;else if(n){var r="fa"===e.prefix?me[n]||{prefix:null,iconName:null}:{};e.iconName=r.iconName||n,e.prefix=r.prefix||e.prefix}else t!==P.replacementClass&&0!==t.indexOf("fa-w-")&&e.rest.push(t);return e},ge())}function be(e,t,n){if(e&&e[t]&&e[t][n])return{prefix:t,iconName:n,icon:e[t][n]}}function we(e){var t=e.tag,n=e.attributes,r=void 0===n?{}:n,a=e.children,o=void 0===a?[]:a;return"string"==typeof e?Y(e):"<"+t+" "+function(e){return Object.keys(e||{}).reduce(function(t,n){return t+(n+'="')+Y(e[n])+'" '},"").trim()}(r)+">"+o.map(we).join("")+"</"+t+">"}var Ee=function(){};function _e(e){return"string"==typeof(e.getAttribute?e.getAttribute(y):null)}var xe={replace:function(e){var t=e[0],n=e[1].map(function(e){return we(e)}).join("\n");if(t.parentNode&&t.outerHTML)t.outerHTML=n+(P.keepOriginalSource&&"svg"!==t.tagName.toLowerCase()?"\x3c!-- "+t.outerHTML+" --\x3e":"");else if(t.parentNode){var r=document.createElement("span");t.parentNode.replaceChild(r,t),r.outerHTML=n}},nest:function(e){var t=e[0],n=e[1];if(~U(t).indexOf(P.replacementClass))return xe.replace(e);var r=new RegExp(P.familyPrefix+"-.*");delete n[0].attributes.style;var a=n[0].attributes.class.split(" ").reduce(function(e,t){return t===P.replacementClass||t.match(r)?e.toSvg.push(t):e.toNode.push(t),e},{toNode:[],toSvg:[]});n[0].attributes.class=a.toSvg.join(" ");var o=n.map(function(e){return we(e)}).join("\n");t.setAttribute("class",a.toNode.join(" ")),t.setAttribute(y,""),t.innerHTML=o}};function ke(e,t){var n="function"==typeof t?t:Ee;0===e.length?n():(c.requestAnimationFrame||function(e){return e()})(function(){var t=!0===P.autoReplaceSvg?xe.replace:xe[P.autoReplaceSvg]||xe.replace,r=le.begin("mutate");e.map(t),r(),n()})}var Oe=!1;var je=null;var Ce=function(e){var t=e.getAttribute("style"),n=[];return t&&(n=t.split(";").reduce(function(e,t){var n=t.split(":"),r=n[0],a=n.slice(1);return r&&a.length>0&&(e[r]=a.join(":").trim()),e},{})),n};var Se=function(e){var t,n,r=e.getAttribute("data-prefix"),a=e.getAttribute("data-icon"),o=void 0!==e.innerText?e.innerText.trim():"",i=ye(U(e));return r&&a&&(i.prefix=r,i.iconName=a),i.prefix&&o.length>1?i.iconName=(t=i.prefix,n=e.innerText,pe[t][n]):i.prefix&&1===o.length&&(i.iconName=function(e,t){return de[e][t]}(i.prefix,function(e){for(var t="",n=0;n<e.length;n++)t+=("000"+e.charCodeAt(n).toString(16)).slice(-4);return t}(e.innerText))),i},Me=function(e){var t={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return e?e.toLowerCase().split(" ").reduce(function(e,t){var n=t.toLowerCase().split("-"),r=n[0],a=n.slice(1).join("-");if(r&&"h"===a)return e.flipX=!0,e;if(r&&"v"===a)return e.flipY=!0,e;if(a=parseFloat(a),isNaN(a))return e;switch(r){case"grow":e.size=e.size+a;break;case"shrink":e.size=e.size-a;break;case"left":e.x=e.x-a;break;case"right":e.x=e.x+a;break;case"up":e.y=e.y-a;break;case"down":e.y=e.y+a;break;case"rotate":e.rotate=e.rotate+a}return e},t):t},Te=function(e){return Me(e.getAttribute("data-fa-transform"))},De=function(e){var t=e.getAttribute("data-fa-symbol");return null!==t&&(""===t||t)},Ie=function(e){var t=G(e.attributes).reduce(function(e,t){return"class"!==e.name&&"style"!==e.name&&(e[t.name]=t.value),e},{}),n=e.getAttribute("title");return P.autoA11y&&(n?t["aria-labelledby"]=P.replacementClass+"-title-"+W():t["aria-hidden"]="true"),t},Pe=function(e){var t=e.getAttribute("data-fa-mask");return t?ye(t.split(" ").map(function(e){return e.trim()})):ge()};function Ne(e){this.name="MissingIcon",this.message=e||"Icon unavailable",this.stack=(new Error).stack}Ne.prototype=Object.create(Error.prototype),Ne.prototype.constructor=Ne;var Fe={fill:"currentColor"},Ae={attributeType:"XML",repeatCount:"indefinite",dur:"2s"},Re={tag:"path",attributes:S({},Fe,{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})},ze=S({},Ae,{attributeName:"opacity"}),Le={tag:"g",children:[Re,{tag:"circle",attributes:S({},Fe,{cx:"256",cy:"364",r:"28"}),children:[{tag:"animate",attributes:S({},Ae,{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:S({},ze,{values:"1;0;1;1;0;1;"})}]},{tag:"path",attributes:S({},Fe,{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:[{tag:"animate",attributes:S({},ze,{values:"1;0;0;0;0;1;"})}]},{tag:"path",attributes:S({},Fe,{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:S({},ze,{values:"0;0;1;1;0;0;"})}]}]},qe=A.styles,He="fa-layers-text",Ve=/Font Awesome 5 (Solid|Regular|Light|Brands)/,Be={Solid:"fas",Regular:"far",Light:"fal",Brands:"fab"};function We(e,t){var n={found:!1,width:512,height:512,icon:Le};if(e&&t&&qe[t]&&qe[t][e]){var r=qe[t][e];n={found:!0,width:r[0],height:r[1],icon:{tag:"path",attributes:{fill:"currentColor",d:r.slice(4)[0]}}}}else if(e&&t&&!P.showMissingIcons)throw new Ne("Icon is missing for prefix "+t+" with icon name "+e);return n}function Ge(e){var t=function(e){var t=Se(e),n=t.iconName,r=t.prefix,a=t.rest,o=Ce(e),i=Te(e),s=De(e),l=Ie(e),u=Pe(e);return{iconName:n,title:e.getAttribute("title"),prefix:r,transform:i,symbol:s,mask:u,extra:{classes:a,styles:o,attributes:l}}}(e);return~t.extra.classes.indexOf(He)?function(e,t){var n=t.title,r=t.transform,a=t.extra,o=null,i=null;if(v){var s=parseInt(getComputedStyle(e).fontSize,10),l=e.getBoundingClientRect();o=l.width/s,i=l.height/s}return P.autoA11y&&!n&&(a.attributes["aria-hidden"]="true"),[e,ae({content:e.innerHTML,width:o,height:i,transform:r,title:n,extra:a,watchable:!0})]}(e,t):function(e,t){var n=t.iconName,r=t.title,a=t.prefix,o=t.transform,i=t.symbol,s=t.mask,l=t.extra;return[e,re({icons:{main:We(n,a),mask:We(s.iconName,s.prefix)},prefix:a,iconName:n,transform:o,symbol:i,mask:s,title:r,extra:l,watchable:!0})]}(e,t)}function Ue(e){"function"==typeof e.remove?e.remove():e&&e.parentNode&&e.parentNode.removeChild(e)}function Xe(e){if(h){var t=le.begin("searchPseudoElements");Oe=!0,function(){G(e.querySelectorAll("*")).forEach(function(e){[":before",":after"].forEach(function(t){var n=c.getComputedStyle(e,t),r=n.getPropertyValue("font-family").match(Ve),a=G(e.children).filter(function(e){return e.getAttribute(b)===t})[0];if(a&&(a.nextSibling&&a.nextSibling.textContent.indexOf(b)>-1&&Ue(a.nextSibling),Ue(a),a=null),r&&!a){var o=n.getPropertyValue("content"),i=f.createElement("i");i.setAttribute("class",""+Be[r[1]]),i.setAttribute(b,t),i.innerText=3===o.length?o.substr(1,1):o,":before"===t?e.insertBefore(i,e.firstChild):e.appendChild(i)}})})}(),Oe=!1,t()}}function Ye(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(h){var n=f.documentElement.classList,r=function(e){return n.add(w+"-"+e)},a=function(e){return n.remove(w+"-"+e)},o=Object.keys(qe),i=["."+He+":not(["+y+"])"].concat(o.map(function(e){return"."+e+":not(["+y+"])"})).join(", ");if(0!==i.length){var s=G(e.querySelectorAll(i));if(s.length>0){r("pending"),a("complete");var l=le.begin("onTree"),u=s.reduce(function(e,t){try{var n=Ge(t);n&&e.push(n)}catch(e){E||e instanceof Ne&&console.error(e)}return e},[]);l(),ke(u,function(){r("active"),r("complete"),a("pending"),"function"==typeof t&&t()})}}}}function Ke(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=Ge(e);n&&ke([n],t)}var $e=function(){var e="svg-inline--fa",t=P.familyPrefix,n=P.replacementClass,r='svg:not(:root).svg-inline--fa {\n  overflow: visible; }\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -.125em; }\n  .svg-inline--fa.fa-lg {\n    vertical-align: -.225em; }\n  .svg-inline--fa.fa-w-1 {\n    width: 0.0625em; }\n  .svg-inline--fa.fa-w-2 {\n    width: 0.125em; }\n  .svg-inline--fa.fa-w-3 {\n    width: 0.1875em; }\n  .svg-inline--fa.fa-w-4 {\n    width: 0.25em; }\n  .svg-inline--fa.fa-w-5 {\n    width: 0.3125em; }\n  .svg-inline--fa.fa-w-6 {\n    width: 0.375em; }\n  .svg-inline--fa.fa-w-7 {\n    width: 0.4375em; }\n  .svg-inline--fa.fa-w-8 {\n    width: 0.5em; }\n  .svg-inline--fa.fa-w-9 {\n    width: 0.5625em; }\n  .svg-inline--fa.fa-w-10 {\n    width: 0.625em; }\n  .svg-inline--fa.fa-w-11 {\n    width: 0.6875em; }\n  .svg-inline--fa.fa-w-12 {\n    width: 0.75em; }\n  .svg-inline--fa.fa-w-13 {\n    width: 0.8125em; }\n  .svg-inline--fa.fa-w-14 {\n    width: 0.875em; }\n  .svg-inline--fa.fa-w-15 {\n    width: 0.9375em; }\n  .svg-inline--fa.fa-w-16 {\n    width: 1em; }\n  .svg-inline--fa.fa-w-17 {\n    width: 1.0625em; }\n  .svg-inline--fa.fa-w-18 {\n    width: 1.125em; }\n  .svg-inline--fa.fa-w-19 {\n    width: 1.1875em; }\n  .svg-inline--fa.fa-w-20 {\n    width: 1.25em; }\n  .svg-inline--fa.fa-pull-left {\n    margin-right: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-pull-right {\n    margin-left: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-border {\n    height: 1.5em; }\n  .svg-inline--fa.fa-li {\n    width: 2em; }\n  .svg-inline--fa.fa-fw {\n    width: 1.25em; }\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -.125em;\n  width: 1em; }\n  .fa-layers svg.svg-inline--fa {\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n\n.fa-layers-text, .fa-layers-counter {\n  display: inline-block;\n  position: absolute;\n  text-align: center; }\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center; }\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: .25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right; }\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left; }\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left; }\n\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -.0667em; }\n\n.fa-xs {\n  font-size: .75em; }\n\n.fa-sm {\n  font-size: .875em; }\n\n.fa-1x {\n  font-size: 1em; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-6x {\n  font-size: 6em; }\n\n.fa-7x {\n  font-size: 7em; }\n\n.fa-8x {\n  font-size: 8em; }\n\n.fa-9x {\n  font-size: 9em; }\n\n.fa-10x {\n  font-size: 10em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em; }\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit; }\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n  padding: .2em .25em .15em; }\n\n.fa-pull-left {\n  float: left; }\n\n.fa-pull-right {\n  float: right; }\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: .3em; }\n\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8); }\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1); }\n\n.fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1); }\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  -webkit-filter: none;\n          filter: none; }\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2em; }\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1em; }\n\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n';if("fa"!==t||n!==e){var a=new RegExp("\\.fa\\-","g"),o=new RegExp("\\."+e,"g");r=r.replace(a,"."+t+"-").replace(o,"."+n)}return r};function Je(e){return{found:!0,width:e[0],height:e[1],icon:{tag:"path",attributes:{fill:"currentColor",d:e.slice(4)[0]}}}}var Qe=!1;function Ze(){P.autoAddCss&&(Qe||V($e()),Qe=!0)}function et(e,t){return Object.defineProperty(e,"abstract",{get:t}),Object.defineProperty(e,"html",{get:function(){return e.abstract.map(function(e){return we(e)})}}),Object.defineProperty(e,"node",{get:function(){if(h){var t=f.createElement("div");return t.innerHTML=e.html,t.children}}}),e}function tt(e){var t=e.prefix,n=void 0===t?"fa":t,r=e.iconName;if(r)return be(rt.definitions,n,r)||be(A.styles,n,r)}var nt,rt=new(function(){function e(){j(this,e),this.definitions={}}return C(e,[{key:"add",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var a=n.reduce(this._pullDefinitions,{});Object.keys(a).forEach(function(t){e.definitions[t]=S({},e.definitions[t]||{},a[t]),function e(t,n){var r=Object.keys(n).reduce(function(e,t){var r=n[t];return r.icon?e[r.iconName]=r.icon:e[t]=r,e},{});"function"==typeof A.hooks.addPack?A.hooks.addPack(t,r):A.styles[t]=S({},A.styles[t]||{},r),"fas"===t&&e("fa",n)}(t,a[t])})}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(e,t){var n=t.prefix&&t.iconName&&t.icon?{0:t}:t;return Object.keys(n).map(function(t){var r=n[t],a=r.prefix,o=r.iconName,i=r.icon;e[a]||(e[a]={}),e[a][o]=i}),e}}]),e}()),at=(nt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.transform,r=void 0===n?H:n,a=t.symbol,o=void 0!==a&&a,i=t.mask,s=void 0===i?null:i,l=t.title,u=void 0===l?null:l,c=t.classes,f=void 0===c?[]:c,d=t.attributes,p=void 0===d?{}:d,m=t.styles,h=void 0===m?{}:m;if(e){var v=e.prefix,g=e.iconName,y=e.icon;return et(S({type:"icon"},e),function(){return Ze(),P.autoA11y&&(u?p["aria-labelledby"]=P.replacementClass+"-title-"+W():p["aria-hidden"]="true"),re({icons:{main:Je(y),mask:s?Je(s.icon):{found:!1,width:null,height:null,icon:{}}},prefix:v,iconName:g,transform:S({},H,r),symbol:o,title:u,extra:{attributes:p,styles:h,classes:f}})})}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(e||{}).icon?e:tt(e||{}),r=t.mask;return r&&(r=(r||{}).icon?r:tt(r||{})),nt(n,S({},t,{mask:r}))}),ot={noAuto:function(){var e;N({autoReplaceSvg:e=!1,observeMutations:e}),je&&je.disconnect()},dom:{i2svg:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(h){Ze();var t=e.node,n=void 0===t?f:t,r=e.callback,a=void 0===r?function(){}:r;P.searchPseudoElements&&Xe(n),Ye(n,a)}},css:$e,insertCss:function(){V($e())}},library:rt,parse:{transform:function(e){return Me(e)}},findIconDefinition:tt,icon:at,text:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.transform,r=void 0===n?H:n,a=t.title,o=void 0===a?null:a,i=t.classes,s=void 0===i?[]:i,l=t.attributes,u=void 0===l?{}:l,c=t.styles,f=void 0===c?{}:c;return et({type:"text",content:e},function(){return Ze(),ae({content:e,transform:S({},H,r),title:o,extra:{attributes:u,styles:f,classes:[P.familyPrefix+"-layers-text"].concat(M(s))}})})},layer:function(e){return et({type:"layer"},function(){Ze();var t=[];return e(function(e){Array.isArray(e)?e.map(function(e){t=t.concat(e.abstract)}):t=t.concat(e.abstract)}),[{tag:"span",attributes:{class:P.familyPrefix+"-layers"},children:t}]})}},it=function(){h&&P.autoReplaceSvg&&ot.dom.i2svg({node:f})};Object.defineProperty(ot,"config",{get:function(){return P},set:function(e){N(e)}}),h&&function(e){try{e()}catch(e){if(!E)throw e}}(function(){m&&(c.FontAwesome||(c.FontAwesome=ot),L(function(){Object.keys(A.styles).length>0&&it(),P.observeMutations&&"function"==typeof MutationObserver&&function(e){if(d){var t=e.treeCallback,n=e.nodeCallback,r=e.pseudoElementsCallback;je=new d(function(e){Oe||G(e).forEach(function(e){if("childList"===e.type&&e.addedNodes.length>0&&!_e(e.addedNodes[0])&&(P.searchPseudoElements&&r(e.target),t(e.target)),"attributes"===e.type&&e.target.parentNode&&P.searchPseudoElements&&r(e.target.parentNode),"attributes"===e.type&&_e(e.target)&&~k.indexOf(e.attributeName))if("class"===e.attributeName){var a=ye(U(e.target)),o=a.prefix,i=a.iconName;o&&e.target.setAttribute("data-prefix",o),i&&e.target.setAttribute("data-icon",i)}else n(e.target)})}),h&&je.observe(f.getElementsByTagName("body")[0],{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}({treeCallback:Ye,nodeCallback:Ke,pseudoElementsCallback:Xe})})),A.hooks=S({},A.hooks,{addPack:function(e,t){A.styles[e]=S({},A.styles[e]||{},t),he(),it()},addShims:function(e){var t;(t=A.shims).push.apply(t,M(e)),he(),it()}})});ot.config;var st=ot,lt=n("prop-types"),ut=n.n(lt),ct=n("react"),ft=n.n(ct),dt="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};var pt=function(e,t){return e(t={exports:{}},t.exports),t.exports}(function(e){var t,n,r,a,o,i,s,l,u,c,f,d,p,m,h;t=dt,n=function(e,t,r){if(!l(t)||c(t)||f(t)||d(t)||s(t))return t;var a,o=0,i=0;if(u(t))for(a=[],i=t.length;o<i;o++)a.push(n(e,t[o],r));else for(var p in a={},t)Object.prototype.hasOwnProperty.call(t,p)&&(a[e(p,r)]=n(e,t[p],r));return a},r=function(e){return p(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,function(e,t){return t?t.toUpperCase():""})).substr(0,1).toLowerCase()+e.substr(1)},a=function(e){var t=r(e);return t.substr(0,1).toUpperCase()+t.substr(1)},o=function(e,t){return function(e,t){var n=(t=t||{}).separator||"_",r=t.split||/(?=[A-Z])/;return e.split(r).join(n)}(e,t).toLowerCase()},i=Object.prototype.toString,s=function(e){return"function"==typeof e},l=function(e){return e===Object(e)},u=function(e){return"[object Array]"==i.call(e)},c=function(e){return"[object Date]"==i.call(e)},f=function(e){return"[object RegExp]"==i.call(e)},d=function(e){return"[object Boolean]"==i.call(e)},p=function(e){return(e-=0)==e},m=function(e,t){var n=t&&"process"in t?t.process:t;return"function"!=typeof n?e:function(t,r){return n(t,e,r)}},h={camelize:r,decamelize:o,pascalize:a,depascalize:o,camelizeKeys:function(e,t){return n(m(r,t),e)},decamelizeKeys:function(e,t){return n(m(o,t),e,t)},pascalizeKeys:function(e,t){return n(m(a,t),e)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}},e.exports?e.exports=h:t.humps=h}),mt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ht=(function(){function e(e){this.value=e}function t(t){var n,r;function a(n,r){try{var i=t[n](r),s=i.value;s instanceof e?Promise.resolve(s.value).then(function(e){a("next",e)},function(e){a("throw",e)}):o(i.done?"return":"normal",i.value)}catch(e){o("throw",e)}}function o(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?a(n.key,n.arg):r=null}this._invoke=function(e,t){return new Promise(function(o,i){var s={key:e,arg:t,resolve:o,reject:i,next:null};r?r=r.next=s:(n=r=s,a(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}(),function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}),vt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},gt=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},yt=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)};function bt(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=(t.children||[]).map(bt.bind(null,e)),a=Object.keys(t.attributes||{}).reduce(function(e,n){var r=t.attributes[n];switch(n){case"class":e.attrs.className=r,delete t.attributes.class;break;case"style":e.attrs.style=r.split(";").map(function(e){return e.trim()}).filter(function(e){return e}).reduce(function(e,t){var n,r=t.indexOf(":"),a=pt.camelize(t.slice(0,r)),o=t.slice(r+1).trim();return a.startsWith("webkit")?e[(n=a,n.charAt(0).toUpperCase()+n.slice(1))]=o:e[a]=o,e},{});break;default:0===n.indexOf("aria-")||0===n.indexOf("data-")?e.attrs[n.toLowerCase()]=r:e.attrs[pt.camelize(n)]=r}return e},{attrs:{}}),o=n.style,i=void 0===o?{}:o,s=gt(n,["style"]);return a.attrs.style=vt({},a.attrs.style,i),e.apply(void 0,[t.tag,vt({},a.attrs,s)].concat(yt(r)))}var wt=!1;try{wt=!0}catch(e){}var Et=function(){var e;!wt&&console&&"function"==typeof console.error&&(e=console).error.apply(e,arguments)};function _t(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?ht({},e,t):{}}function xt(e){return null===e?null:"object"===(void 0===e?"undefined":mt(e))&&e.prefix&&e.iconName?e:Array.isArray(e)&&2===e.length?{prefix:e[0],iconName:e[1]}:"string"==typeof e?{prefix:"fas",iconName:e}:void 0}function kt(e){var t=e.icon,n=e.mask,r=e.symbol,a=e.className,o=xt(t),i=_t("classes",[].concat(yt(function(e){var t,n=(t={"fa-spin":e.spin,"fa-pulse":e.pulse,"fa-fw":e.fixedWidth,"fa-border":e.border,"fa-li":e.listItem,"fa-flip-horizontal":"horizontal"===e.flip||"both"===e.flip,"fa-flip-vertical":"vertical"===e.flip||"both"===e.flip},ht(t,"fa-"+e.size,null!==e.size),ht(t,"fa-rotate-"+e.rotation,null!==e.rotation),ht(t,"fa-pull-"+e.pull,null!==e.pull),t);return Object.keys(n).map(function(e){return n[e]?e:null}).filter(function(e){return e})}(e)),yt(a.split(" ")))),s=_t("transform","string"==typeof e.transform?st.parse.transform(e.transform):e.transform),l=_t("mask",xt(n)),u=st.icon(o,vt({},i,s,l,{symbol:r}));if(!u)return Et("Could not find icon",o),null;var c=u.abstract,f=bt.bind(null,ft.a.createElement),d={};return Object.keys(e).forEach(function(t){kt.defaultProps.hasOwnProperty(t)||(d[t]=e[t])}),f(c[0],d)}kt.propTypes={border:ut.a.bool,className:ut.a.string,mask:ut.a.oneOfType([ut.a.object,ut.a.array,ut.a.string]),fixedWidth:ut.a.bool,flip:ut.a.oneOf(["horizontal","vertical","both"]),icon:ut.a.oneOfType([ut.a.object,ut.a.array,ut.a.string]),listItem:ut.a.bool,pull:ut.a.oneOf(["right","left"]),pulse:ut.a.bool,name:ut.a.string,rotation:ut.a.oneOf([90,180,270]),size:ut.a.oneOf(["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:ut.a.bool,symbol:ut.a.oneOfType([ut.a.bool,ut.a.string]),transform:ut.a.oneOfType([ut.a.string,ut.a.object])},kt.defaultProps={border:!1,className:"",mask:null,fixedWidth:!1,flip:null,icon:null,listItem:!1,pull:null,pulse:!1,name:"",rotation:null,size:null,spin:!1,symbol:!1,transform:null},st.noAuto();t.default=kt},"./node_modules/webpack/hot/log-apply-result.js":function(e,t,n){e.exports=function(e,t){var r=e.filter(function(e){return t&&t.indexOf(e)<0}),a=n("./node_modules/webpack/hot/log.js");(r.length>0&&(a("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),r.forEach(function(e){a("warning","[HMR]  - "+e)})),t&&0!==t.length)?(a("info","[HMR] Updated modules:"),t.forEach(function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");a.groupCollapsed("info","[HMR]  - "+t.pop()),a("info","[HMR]  - "+e),a.groupEnd("info")}else a("info","[HMR]  - "+e)}),t.every(function(e){return"number"==typeof e})&&a("info","[HMR] Consider using the NamedModulesPlugin for module names.")):a("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":function(e,t){var n="info";function r(){}function a(e){return"info"===n&&"info"===e||["info","warning"].indexOf(n)>=0&&"warning"===e||["info","warning","error"].indexOf(n)>=0&&"error"===e}function o(e){return function(t,n){a(t)&&e(n)}}e.exports=function(e,t){a(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,s=console.groupCollapsed||r,l=console.groupEnd||r;e.exports.group=o(i),e.exports.groupCollapsed=o(s),e.exports.groupEnd=o(l),e.exports.setLogLevel=function(e){n=e}},"./node_modules/webpack/hot/poll.js?1000":function(e,t,n){(function(t){var r=+t.substr(1)||6e5,a=n("./node_modules/webpack/hot/log.js");setInterval(function t(r){"idle"===e.hot.status()&&e.hot.check(!0).then(function(e){e?(n("./node_modules/webpack/hot/log-apply-result.js")(e,e),t(!0)):r&&a("info","[HMR] Update applied.")}).catch(function(t){var n=e.hot.status();["abort","fail"].indexOf(n)>=0?(a("warning","[HMR] Cannot apply update."),a("warning","[HMR] "+t.stack||t.message),a("warning","[HMR] You need to restart the application!")):a("warning","[HMR] Update failed: "+t.stack||t.message)})},r)}).call(this,"?1000")},"./server/index.js":function(e,t,n){"use strict";var r=o(n("source-map-support"));n("babel-polyfill");var a=o(n("http"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install();var i=n("mongodb").MongoClient,s=n("./server/server.js"),l=void 0,u=void 0;i.connect("mongodb://localhost/issuetracker").then(function(e){l=e.db("issuetracker"),u=a.default.createServer(),s.setDb(l),u.on("request",s.app),u.listen(3e3,function(){console.log("App started on port 3000")})}).catch(function(e){console.log("ERROR",e)}),e.hot.accept("./server/server.js",function(e){u.removeListener("request",s.app),s.require("./server.js"),s.setDb(l),u.on("request",s.app)})},"./server/issue.js":function(e,t,n){"use strict";var r={New:!0,Open:!0,Assigned:!0,Fixed:!0,Verified:!0,Closed:!0},a={status:"required",owner:"required",effort:"optional",created:"required",completionDate:"optional",title:"required"};function o(e){var t={};return Object.keys(e).forEach(function(n){a[n]&&(t[n]=e[n])}),t}e.exports={validateIssue:function(e){var t=[];return Object.keys(a).forEach(function(n){"required"!==a[n]||e[n]||t.push("Missing mandatory field: "+n)}),r[e.status]||t.push(e.status+" is not a valid status."),t.length?t.join("; "):null},cleanupIssue:o,convertIssue:function(e){return e.created&&(e.created=new Date(e.created)),e.completionDate&&(e.completionDate=new Date(e.completionDate)),o(e)}}},"./server/renderedPageRouter.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n("react")),a=n("react-dom/server"),o=n("react-router-dom"),i=c(n("express")),s=c(n("./server/template.js")),l=c(n("./src/Routes.jsx")),u=c(n("./src/ContextWrapper.jsx"));function c(e){return e&&e.__esModule?e:{default:e}}var f=new i.default;f.get("*",function(e,t){(0,o.match)({routes:l.default,location:e.url},function(n,i,l){n?t.status(500).send(n.message):i?t.redirect(302,i.pathname+i.search):l?fetch("https://localhost:3000/api"+e.url).then(function(e){return e.json()}).then(function(e){var n={data:e},i=(0,a.renderToString)(r.default.createElement(u.default,{initialState:n},r.default.createElement(o.RouterContext,l)));t.status(200).send((0,s.default)(i,n))}).catch(function(e){console.log("error rendering to string: "+e)}):t.status(404).send("not found")})}),t.default=f},"./server/server.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setDb=t.app=void 0;var r=s(n("express")),a=s(n("body-parser")),o=s(n("./server/issue.js")),i=s(n("./server/renderedPageRouter.jsx"));function s(e){return e&&e.__esModule?e:{default:e}}var l=n("mongodb").ObjectID,u=(0,r.default)();u.use(r.default.static("static")),u.use(a.default.json());var c=void 0;u.get("/api/issues",function(e,t){var n={};e.query.status&&(n.status=e.query.status),(e.query.effort_lte||e.query.effort_gte)&&(n.effort={}),e.query.effort_lte&&(n.effort.$lte=parseInt(e.query.effort_lte,10)),e.query.effort_gte&&(n.effort.$gte=parseInt(e.query.effort_gte,10)),c.collection("issues").find(n).toArray().then(function(e){var n={total_count:e.length};t.json({_metadata:n,records:e})}).catch(function(e){console.log(e),t.status(500).json({message:"Internal Server Error: "+e})})}),u.post("/api/issues",function(e,t){var n=e.body;n.created=new Date,n.status||(n.status="New");var r=o.default.validateIssue(n);r?t.status(422).json({message:"Invalid request: "+r}):c.collection("issues").insertOne(o.default.cleanupIssue(n)).then(function(e){return c.collection("issues").find({_id:e.insertedId}).limit(1).next()}).then(function(e){t.json(e)}).catch(function(e){console.log(e),t.status(500).json({message:"Internal Server Error: "+e})})}),u.get("/api/issues/:id",function(e,t){var n=void 0;try{n=new l(e.params.id)}catch(e){return void t.status(422).json({message:"Invalid issue Id format: "+e})}c.collection("issues").find({_id:n}).limit(1).next().then(function(e){e?t.json(e):t.status(404).json({message:"No such issue: "+n})}).catch(function(e){console.log(e),t.status(500).json({message:"Internal Server error: "+e})})}),u.put("/api/issues/:id",function(e,t){var n=void 0;try{n=new l(e.params.id)}catch(e){return void t.status(422).json({message:"Invalid Issue ID format: "+e})}var r=e.body;delete r._id;var a=o.default.validateIssue(r);a?t.status(422).json({message:"Invalid request: "+a}):c.collection("issues").update({_id:n},o.default.convertIssue(r)).then(function(){return c.collection("issues").find({_id:n}).limit(1).next()}).then(function(e){t.json(e)}).catch(function(e){t.status(500).json({message:"Internal Server Error: "+e})})}),u.delete("/api/issues/:id",function(e,t){var n=void 0;try{n=new l(e.params.id)}catch(e){return void t.status(422).json({message:"Invalid issue ID format: "+e})}c.collection("issues").deleteOne({_id:n}).then(function(e){1===e.result.n?t.json({status:"OK"}):t.json({status:"Warning: object not found"})}).catch(function(e){console.log(e),t.status(500).json({message:"Internal server error: "+e})})}),u.use("/",i.default),t.app=u,t.setDb=function(e){c=e}},"./server/template.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return'<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\t<title>Pro MERN Stack</title>\n  <link rel="stylesheet" type="text/css" href="/bootstrap/css/bootstrap.min.css">\n  <link rel="stylesheet" type="text/css" href="/node_modules/@fortawesome/fontawesome/styles.css">\n\t\x3c!--<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.13.0/polyfill.js"><\/script>--\x3e\n\n  <style>\n    .panel-title a {display: block; width: 100%; cursor: pointer; text-decoration: none;}\n    .header {border-bottom: 1px solid silver; margin-bottom: 20px;}\n    .footer {\n      border-top: 1px solid silver; padding-top: 5px; margin-top: 20px;\n      font-family: Helvetica; font-size: 10px; color: grey;\n    }\n    .table td {\n      vertical-align: middle;\n    }\n    .table td:last-child {\n      text-align: center;\n    }\n    .buttonsContainer .btn + .btn {\n      margin-left: 10px;\n    }\n\t</style>\n</head>\n<body>\n\t<div id="contents">'+e+"</div>\n\t<script>window.__INITIAL_STATE__ = "+JSON.stringify(t)+";<\/script>\n\t<script type='text/javascript' src=\"/vendor.js\"><\/script>\n\t<script type='text/javascript' src=\"/app.js\"><\/script>\n</body>\n</html>\n"}},"./src/App.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n("babel-polyfill");var r,a=n("react"),o=(r=a)&&r.__esModule?r:{default:r};var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),t}();t.default=i},"./src/Articles.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n("react")),o=n("react-router-dom"),i=s(n("prop-types"));function s(e){return e&&e.__esModule?e:{default:e}}var l=[{title:"First Article",key:"first",text:"Hello from First article"},{title:"Second Article",key:"second",text:"Hello from Second article"},{title:"Third Article",key:"third",text:"Hello from Third article"},{title:"Fourth Article",key:"fourth",text:"Hello from Fourth article"}],u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){var e=this,t=l.filter(function(t){return t.key===e.props.match.params.articleId})[0];return t?a.default.createElement("div",null,a.default.createElement("h3",{className:"title"},t.title),a.default.createElement("hr",null),a.default.createElement("p",{className:"text"},t.text)):a.default.createElement("div",null,"No Article with that key")}}]),t}(),c=function(e){var t=e.match;return a.default.createElement("div",{className:"articles"},a.default.createElement("h2",null,"Articles section"),a.default.createElement("ul",{className:"articles"},l.map(function(e){return a.default.createElement("li",{className:"article",key:e.key},a.default.createElement(o.Link,{to:t.url+"/"+e.key},e.title))})),a.default.createElement(o.Route,{path:t.url+"/:articleId",component:u}))};u.propTypes={match:i.default.shape({params:i.default.shape({articleId:i.default.string.isRequired})}).isRequired},c.propTypes={match:i.default.shape({}).isRequired},t.default=c},"./src/Common.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=t.Home=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=d(n("react")),o=n("reactstrap"),i=n("react-router-bootstrap"),s=n("react-router-dom"),l=d(n("./node_modules/@fortawesome/react-fontawesome/index.es.js")),u=d(n("./node_modules/@fortawesome/fontawesome-free-solid/faEllipsisH.js")),c=d(n("./node_modules/@fortawesome/fontawesome-free-solid/faBars.js")),f=d(n("./src/IssueAddNavItem.jsx"));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.toggle=n.toggle.bind(n),n.dropdownToggle=n.dropdownToggle.bind(n),n.onBlur=n.onBlur.bind(n),n.state={isOpen:!1,dropdownOpen:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"toggle",value:function(){this.setState({isOpen:!this.state.isOpen})}},{key:"dropdownToggle",value:function(){this.setState({dropdownOpen:!this.state.dropdownOpen})}},{key:"onBlur",value:function(){this.setState({isOpen:!1})}},{key:"render",value:function(){return a.default.createElement(o.Navbar,{expand:"md",light:!0,onBlur:this.onBlur,style:{"background-color":"#abcdef"}},a.default.createElement(o.NavbarBrand,{tag:s.Link,to:"/home",href:"/home",style:{"text-decoration":"none"}},"Issue Tracker"),a.default.createElement(o.NavbarToggler,{onClick:this.toggle},a.default.createElement(l.default,{icon:c.default})),a.default.createElement(o.Collapse,{isOpen:this.state.isOpen,navbar:!0,style:{"justify-content":"space-between"}},a.default.createElement(o.Nav,{navbar:!0},a.default.createElement(o.NavItem,{active:!0},a.default.createElement(i.LinkContainer,{to:"/home"},a.default.createElement(o.NavLink,null,"Home"))),a.default.createElement(o.NavItem,null,a.default.createElement(i.LinkContainer,{to:"/issues"},a.default.createElement(o.NavLink,null,"Issues"))),a.default.createElement(o.NavItem,null,a.default.createElement(i.LinkContainer,{to:"/reports"},a.default.createElement(o.NavLink,null,"Reports"))),a.default.createElement(o.NavItem,null,a.default.createElement(i.LinkContainer,{to:"/articles"},a.default.createElement(o.NavLink,null,"Articles")))),a.default.createElement(o.Nav,null,a.default.createElement(f.default,null),a.default.createElement(o.Dropdown,{nav:!0,isOpen:this.state.dropdownOpen,toggle:this.dropdownToggle},a.default.createElement(o.DropdownToggle,{id:"user-dropdown",nav:!0,color:"link"},a.default.createElement(l.default,{icon:u.default})),a.default.createElement(o.DropdownMenu,{right:!0},a.default.createElement(o.DropdownItem,null,"Logout"))))))}}]),t}();t.default=p,t.Home=function(){return a.default.createElement("div",{className:"home"},a.default.createElement("h1",null,"Home Section contents"))},t.Footer=function(){return a.default.createElement("div",{className:"footer"},a.default.createElement("h5",null,a.default.createElement("small",null," Full source code available at this  ",a.default.createElement("a",{href:"https://github.com/ashotpahlevanyan/promernstack-book"},"Github repository"))))}},"./src/ContextWrapper.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=i(n("react")),o=i(n("prop-types"));function i(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.getChildContext=r.getChildContext.bind(r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"getChildContext",value:function(){return{initialState:this.props.initialState}}},{key:"render",value:function(){return this.props.children}}]),t}();t.default=s,s.childContextTypes={initialState:o.default.shape({})},s.propTypes={children:o.default.shape({}).isRequired,initialState:o.default.shape({})}},"./src/DateInput.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n("react")),i=s(n("prop-types"));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.editFormat(e.value),focused:!1,valid:!0},n.onBlur=n.onBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,null,[{key:"displayFormat",value:function(e){return null!=e&&""!==e?new Date(e).toDateString():""}},{key:"editFormat",value:function(e){return null!=e&&""!==e?new Date(e).toISOString().substr(0,10):""}},{key:"unformat",value:function(e){var t=new Date(e);return Number.isNaN(t.getTime())?null:t}}]),a(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.props.value&&this.setState({value:t.editFormat(e.value)})}},{key:"onFocus",value:function(){this.setState({focused:!0})}},{key:"onBlur",value:function(e){var n=t.unformat(this.state.value),r=""===this.state.value||null!=n;r!==this.state.valid&&this.props.onValidityChange&&this.props.onValidityChange(e,r),this.setState({focused:!1,valid:r}),r&&this.props.onChange(e,n)}},{key:"onChange",value:function(e){e.target.value.match(/^[\d-]*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){var e=this.state.focused||!this.state.valid?this.state.value:t.displayFormat(this.props.value),n=Object.assign({},this.props);return delete n.onValidityChange,o.default.createElement("input",r({type:"text"},n,{value:e,placeholder:this.state.focused?"yyyy-mm-dd":null,onFocus:this.onFocus,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=l,l.propTypes={value:i.default.shape({}).isRequired,onChange:i.default.func.isRequired,onValidityChange:i.default.func.isRequired,name:i.default.string.isRequired}},"./src/IssueAddNavItem.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n("react")),o=n("react-router-dom"),i=f(n("prop-types")),s=f(n("./node_modules/@fortawesome/react-fontawesome/index.es.js")),l=f(n("./node_modules/@fortawesome/fontawesome-free-solid/faPlus.js")),u=n("reactstrap"),c=f(n("./src/Toast.jsx"));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={showing:!1,toastVisible:!1,toastMessage:"",toastType:"success"},n.showModal=n.showModal.bind(n),n.hideModal=n.hideModal.bind(n),n.submit=n.submit.bind(n),n.showError=n.showError.bind(n),n.dismissToast=n.dismissToast.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"showModal",value:function(e){e.preventDefault(),this.setState({showing:!0})}},{key:"hideModal",value:function(){this.setState({showing:!1})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"submit",value:function(e){var t=this;e.preventDefault(),this.hideModal();var n=document.forms.issueAdd,r={owner:n.owner.value,title:n.title.value,status:"New",created:new Date};fetch("/api/issues/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)}).then(function(e){e.ok?e.json().then(function(e){t.props.history.push("/issues/"+e._id)}):e.json().then(function(e){t.showError("Failed to add issue: "+e.message)})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"render",value:function(){return a.default.createElement(u.NavItem,{className:"float-right d-flex align-items-center"},a.default.createElement(o.Link,{to:"",onClick:this.showModal,style:{"text-decoration":"none"}},a.default.createElement(s.default,{icon:l.default})," Create Issue"),a.default.createElement(u.Modal,{isOpen:this.state.showing,toggle:this.hideModal},a.default.createElement(u.ModalHeader,{toggle:this.hideModal},"Create Issue"),a.default.createElement(u.ModalBody,null,a.default.createElement(u.Form,{name:"issueAdd"},a.default.createElement(u.FormGroup,null,a.default.createElement(u.Label,null,"Title"),a.default.createElement(u.Input,{name:"title",autoFocus:!0})),a.default.createElement(u.FormGroup,null,a.default.createElement(u.Label,null,"Owner"),a.default.createElement(u.Input,{name:"owner"})))),a.default.createElement(u.ModalFooter,null,a.default.createElement("div",null,a.default.createElement(u.Button,{type:"button",color:"primary",onClick:this.submit},"Submit")," ",a.default.createElement(u.Button,{color:"secondary",onClick:this.hideModal},"Cancel")))),a.default.createElement(c.default,{showing:this.state.toastVisible,message:this.state.toastMessage,onDismiss:this.dismissToast,bsStyle:this.state.toastType}))}}]),t}();d.propTypes={history:i.default.shape({push:i.default.func.isRequired}).isRequired},t.default=(0,o.withRouter)(d)},"./src/IssueEdit.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n("react")),o=f(n("prop-types")),i=n("reactstrap"),s=n("react-router-bootstrap"),l=f(n("./src/NumInput.jsx")),u=f(n("./src/DateInput.jsx")),c=f(n("./src/Toast.jsx"));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n)),a=n.initialState.data;return a.created=new Date(a.created),a.completionDate=null!=a.completionDate?new Date(a.completionDate):null,r.state={issue:a,invalidFields:{},showingValidation:!1,toastVisible:!1,toastMessage:"",toastType:"success"},r.onChange=r.onChange.bind(r),r.loadData=r.loadData.bind(r),r.onValidityChange=r.onValidityChange.bind(r),r.onSubmit=r.onSubmit.bind(r),r.dismissValidation=r.dismissValidation.bind(r),r.showValidation=r.showValidation.bind(r),r.showSuccess=r.showSuccess.bind(r),r.showError=r.showError.bind(r),r.dismissToast=r.dismissToast.bind(r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){e.match.params.id!==this.props.match.params.id&&this.loadData()}},{key:"onChange",value:function(e,t){var n=Object.assign({},this.state.issue),r=void 0!==t?t:e.target.value;n[e.target.name]=r,this.setState({issue:n})}},{key:"onValidityChange",value:function(e,t){var n=Object.assign({},this.state.invalidFields);t?delete n[e.target.name]:n[e.target.name]=!0,this.setState({invalidFields:n})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault(),this.showValidation(),0===Object.keys(this.state.invalidFields).length&&fetch("/api/issues/"+this.props.match.params.id,{method:"put",headers:{"Content-type":"application/json"},body:JSON.stringify(this.state.issue)}).then(function(e){e.ok&&e.json().then(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate)),t.setState({issue:e}),t.showSuccess("Updated Issue Successfully")})}).catch(function(e){t.showError("Error in sending data to server: "+e.message)})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues/"+this.props.match.params.id).then(function(t){t.ok?t.json().then(function(t){t.created=new Date(t.created),t.completionDate=null!=t.completionDate&&""!=t.completionDate?new Date(t.completionDate).toDateString():"",e.setState({issue:t})}):t.json().then(function(t){e.showError("Failed to fetch issue : "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server : "+t.message)})}},{key:"showValidation",value:function(){this.setState({showingValidation:!0})}},{key:"dismissValidation",value:function(){this.setState({showingValidation:!1})}},{key:"showSuccess",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"success"})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"render",value:function(){var e=this.state.issue,t=null;return 0!==Object.keys(this.state.invalidFields).length&&this.state.showingValidation&&(t=a.default.createElement(i.Alert,{color:"danger",onDismiss:this.dismissValidation},"Please correct invalid fields before submitting.")),a.default.createElement(i.Card,{id:"issueEdit"},a.default.createElement(i.CardBody,null,a.default.createElement(i.CardTitle,null,"Edit Issue"),a.default.createElement(i.Form,{horizontal:!0,onSubmit:this.onSubmit},a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{tag:i.Label,sm:3},"ID"),a.default.createElement(i.Col,{sm:9},a.default.createElement(i.Input,{plaintext:!0},e._id))),a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{tag:i.Label,sm:3},"Created"),a.default.createElement(i.Col,{sm:9},a.default.createElement(i.Input,{type:"text",value:e.created?e.created.toDateString():""}))),a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{tag:i.Label,sm:3},"Status"),a.default.createElement(i.Col,{sm:9},a.default.createElement(i.Input,{type:"select",name:"status",value:e.status,onChange:this.onChange},a.default.createElement("option",{value:"New"},"New"),a.default.createElement("option",{value:"Open"},"Open"),a.default.createElement("option",{value:"Assigned"},"Assigned"),a.default.createElement("option",{value:"Fixed"},"Fixed"),a.default.createElement("option",{value:"Verified"},"Verified"),a.default.createElement("option",{value:"Closed"},"Closed")))),a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{tag:i.Label,sm:3},"Owner"),a.default.createElement(i.Col,{sm:9},a.default.createElement(i.Input,{name:"owner",value:e.owner,onChange:this.onChange}))),a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{tag:i.Label,sm:3},"Effort"),a.default.createElement(i.Col,{sm:9},a.default.createElement(i.Input,{tag:l.default,name:"effort",value:e.effort,onChange:this.onChange}))),a.default.createElement(i.Row,{tag:i.FormGroup,validationState:this.state.invalidFields.completionDate?"error":""},a.default.createElement(i.Col,{tag:i.Label,sm:3},"Completion Date"),a.default.createElement(i.Col,{sm:9},a.default.createElement(i.Input,{tag:u.default,name:"completionDate",value:e.completionDate,onChange:this.onChange,onValidityChange:this.onValidityChange}),a.default.createElement(i.FormFeedback,null))),a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{tag:i.Label,sm:3},"Title"),a.default.createElement(i.Col,{sm:9},a.default.createElement(i.Input,{name:"title",value:e.title,onChange:this.onChange}))),a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{sm:12},a.default.createElement("div",{className:"d-flex justify-content-center buttonsContainer"},a.default.createElement(i.Button,{color:"primary",type:"submit"},"Submit"),a.default.createElement(s.LinkContainer,{to:"/issues"},a.default.createElement(i.Button,{color:"secondary"},"Back"))))),a.default.createElement(i.Row,{tag:i.FormGroup},a.default.createElement(i.Col,{offset:3,sm:9},t))),a.default.createElement(c.default,{message:this.state.toastMessage,color:this.state.toastType,showing:this.state.toastVisible,onDismiss:this.dismissToast})))}}]),t}();t.default=d,d.contextTypes={initialState:o.default.shape({})},d.propTypes={match:o.default.shape({params:o.default.shape({id:o.default.string})}).isRequired}},"./src/IssueFilter.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n("react")),o=s(n("prop-types")),i=n("reactstrap");function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1},n.onChangeStatus=n.onChangeStatus.bind(n),n.onChangeEffortGte=n.onChangeEffortGte.bind(n),n.onChangeEffortLte=n.onChangeEffortLte.bind(n),n.applyFilter=n.applyFilter.bind(n),n.resetFilter=n.resetFilter.bind(n),n.clearFilter=n.clearFilter.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({status:e.initFilter.status||"",effort_gte:e.initFilter.effort_gte||"",effort_lte:e.initFilter.effort_lte||"",changed:!1})}},{key:"onChangeStatus",value:function(e){this.setState({status:e.target.value,changed:!0})}},{key:"onChangeEffortGte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_gte:e.target.value,changed:!0})}},{key:"onChangeEffortLte",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({effort_lte:e.target.value,changed:!0})}},{key:"applyFilter",value:function(){var e={};this.state.status&&(e.status=this.state.status),this.state.effort_gte&&(e.effort_gte=this.state.effort_gte),this.state.effort_lte&&(e.effort_lte=this.state.effort_lte),this.props.setFilter(e)}},{key:"clearFilter",value:function(){this.props.setFilter({})}},{key:"resetFilter",value:function(){this.setState({status:this.props.initFilter.status||"",effort_gte:this.props.initFilter.effort_gte||"",effort_lte:this.props.initFilter.effort_lte||"",changed:!1})}},{key:"render",value:function(){return a.default.createElement(i.Row,null,a.default.createElement(i.Col,{xs:6,sm:4,md:3,lg:2},a.default.createElement(i.FormGroup,null,a.default.createElement(i.Label,null,"Status"),a.default.createElement(i.Input,{type:"select",value:this.state.status,onChange:this.onChangeStatus},a.default.createElement("option",{value:""},"(Any)"),a.default.createElement("option",{value:"New"},"New"),a.default.createElement("option",{value:"Open"},"Open"),a.default.createElement("option",{value:"Assigned"},"Assigned"),a.default.createElement("option",{value:"Fixed"},"Fixed"),a.default.createElement("option",{value:"Verified"},"Verified"),a.default.createElement("option",{value:"Closed"},"Closed")))),a.default.createElement(i.Col,{xs:6,sm:4,md:3,lg:2},a.default.createElement(i.FormGroup,null,a.default.createElement(i.Label,null,"Effort"),a.default.createElement(i.InputGroup,null,a.default.createElement(i.Input,{value:this.state.effort_gte,onChange:this.onChangeEffortGte}),a.default.createElement(i.InputGroupAddon,{addonType:"prepend append"},"-"),a.default.createElement(i.Input,{value:this.state.effort_lte,onChange:this.onChangeEffortLte})," "))),a.default.createElement(i.Col,{xs:6,sm:4,md:3,lg:3},a.default.createElement(i.FormGroup,null,a.default.createElement(i.Label,null," "),a.default.createElement(i.InputGroup,null,a.default.createElement(i.InputGroupAddon,{addonType:"prepend"},a.default.createElement(i.Button,{color:"primary",onClick:this.applyFilter},"Apply")," "),a.default.createElement(i.InputGroupAddon,{addonType:"append"},a.default.createElement(i.Button,{color:"secondary",onClick:this.resetFilter,disabled:!this.state.changed},"Reset")," "),a.default.createElement(i.InputGroupAddon,{addonType:"append"},a.default.createElement(i.Button,{color:"info",onClick:this.clearFilter},"Clear"))))))}}]),t}();l.propTypes={setFilter:o.default.func.isRequired,initFilter:o.default.shape({status:o.default.string.isRequired,effort_gte:o.default.string.isRequired,effort_lte:o.default.string.isRequired}).isRequired},t.default=l},"./src/IssueList.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=d(n("react"));n("isomorphic-fetch");var o=d(n("prop-types")),i=n("react-router-dom"),s=n("reactstrap"),l=d(n("./node_modules/@fortawesome/react-fontawesome/index.es.js")),u=d(n("./node_modules/@fortawesome/fontawesome-free-solid/faTrashAlt.js")),c=d(n("./src/IssueFilter.jsx")),f=d(n("./src/Toast.jsx"));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n)),a=n.initialState.data.records;return a.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),r.state={issues:a,query:{status:"",effort_gte:"",effort_lte:""},toastVisible:!1,toastMessage:"",toastType:"success",filterCollapse:!1},r.loadData=r.loadData.bind(r),r.setFilter=r.setFilter.bind(r),r.deleteIssue=r.deleteIssue.bind(r),r.showError=r.showError.bind(r),r.dismissToast=r.dismissToast.bind(r),r.toggleFilter=r.toggleFilter.bind(r),r.setFilter(r.state.query),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,null,[{key:"constructQuery",value:function(e){return""+(e.status?"status="+e.status:"")+(e.effort_gte?"&effort_gte="+e.effort_gte:"")+(e.effort_lte?"&effort_lte="+e.effort_lte:"")}}]),r(t,[{key:"componentDidMount",value:function(){this.loadData()}},{key:"componentDidUpdate",value:function(e){var t=e.location,n=this.props.location;t.search!==n.search&&this.loadData()}},{key:"setFilter",value:function(e){this.setState({query:e}),this.props.history.push({pathname:this.props.location.pathname,search:t.constructQuery(e),query:e})}},{key:"showError",value:function(e){this.setState({toastVisible:!0,toastMessage:e,toastType:"danger"})}},{key:"dismissToast",value:function(){this.setState({toastVisible:!1})}},{key:"toggleFilter",value:function(e){e.preventDefault(),this.setState({filterCollapse:!this.state.filterCollapse})}},{key:"loadData",value:function(){var e=this;fetch("/api/issues"+this.props.location.search).then(function(t){t.ok?t.json().then(function(t){t.records.forEach(function(e){e.created=new Date(e.created),e.completionDate&&(e.completionDate=new Date(e.completionDate))}),e.setState({issues:t.records})}):t.json().then(function(t){e.showError("Failed to fetch issue: "+t.message)})}).catch(function(t){e.showError("Error in fetching data from server + "+t.message)})}},{key:"deleteIssue",value:function(e){var t=this;fetch("/api/issues/"+e,{method:"DELETE"}).then(function(e){e.ok?t.loadData():t.showError("Failed to delete issue")})}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement(s.Card,{id:"issueFilter"},a.default.createElement(s.CardBody,null,a.default.createElement(s.CardTitle,{onClick:this.toggleFilter,style:{cursor:"pointer"}},a.default.createElement(i.Link,{to:"",onClick:function(e){e.preventDefault()},style:{"text-decoration":"none"}},"Filter")),a.default.createElement(s.Collapse,{isOpen:this.state.filterCollapse},a.default.createElement(c.default,{setFilter:this.setFilter,initFilter:this.state.query})))),a.default.createElement(h,{issues:this.state.issues,deleteIssue:this.deleteIssue}),a.default.createElement(f.default,{showing:this.state.toastVisible,onDismiss:this.dismissToast,message:this.state.toastMessage,bsStyle:this.state.toastType}))}}]),t}(),m=function(e){return a.default.createElement("tr",null,a.default.createElement("td",null,a.default.createElement(i.Link,{to:"/issues/"+e.issue._id},e.issue._id.substr(-4))),a.default.createElement("td",null,e.issue.status),a.default.createElement("td",null,e.issue.owner),a.default.createElement("td",null,e.issue.created.toDateString()),a.default.createElement("td",null,e.issue.effort),a.default.createElement("td",null,e.issue.completionDate?e.issue.completionDate.toDateString():""),a.default.createElement("td",null,e.issue.title),a.default.createElement("td",null,a.default.createElement(s.Button,{bsSize:"xsmall",onClick:function(){e.deleteIssue(e.issue._id)}},a.default.createElement(l.default,{icon:u.default}))))};function h(e){var t=e.issues.map(function(t){return a.default.createElement(m,{key:t._id,issue:t,deleteIssue:e.deleteIssue})});return a.default.createElement(s.Table,{striped:!0,bordered:!0},a.default.createElement("thead",null,a.default.createElement("tr",null,a.default.createElement("th",null,"Id"),a.default.createElement("th",null,"Status"),a.default.createElement("th",null,"Owner"),a.default.createElement("th",null,"Created"),a.default.createElement("th",null,"Effort"),a.default.createElement("th",null,"Completion date"),a.default.createElement("th",null,"Title"),a.default.createElement("th",null))),a.default.createElement("tbody",null,t))}m.propTypes={issue:o.default.shape({owner:o.default.string.isRequired,title:o.default.string.isRequired,_id:o.default.string,status:o.default.string,created:o.default.string,effort:o.default.number,completionDate:o.default.string}).isRequired,deleteIssue:o.default.func.isRequired},h.propTypes={issues:o.default.arrayOf({}).isRequired,deleteIssue:o.default.func.isRequired},p.contextTypes={initialState:o.default.shape({})},p.propTypes={location:o.default.shape({pathname:o.default.string.isRequired,search:o.default.string.isRequired,query:o.default.shape({}).isRequired}).isRequired,history:o.default.shape({push:o.default.func.isRequired}).isRequired},t.default=p},"./src/NotFound.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n("react"),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(){return o.default.createElement("p",null,"Page Not Fount")}},"./src/NumInput.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n("react")),i=s(n("prop-types"));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:t.format(n.props.value)},n.onChange=n.onChange.bind(n),n.onBlur=n.onBlur.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,null,[{key:"format",value:function(e){return null!=e?e.toString():""}},{key:"unformat",value:function(e){var t=parseInt(e,10);return Number.isNaN(t)?null:t}}]),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({value:t.format(e.value)})}},{key:"onBlur",value:function(e){this.props.onChange(e,t.unformat(this.state.value))}},{key:"onChange",value:function(e){e.target.value.match(/^\d*$/)&&this.setState({value:e.target.value})}},{key:"render",value:function(){return o.default.createElement("input",r({type:"text"},this.props,{value:this.state.value,onBlur:this.onBlur,onChange:this.onChange}))}}]),t}();t.default=l,l.propTypes={value:i.default.number.isRequired,onChange:i.default.func.isRequired}},"./src/Routes.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n("babel-polyfill");var r=f(n("react")),a=n("react-router-dom"),o=f(n("./src/IssueList.jsx")),i=f(n("./src/IssueEdit.jsx")),s=n("./src/Common.jsx"),l=f(s),u=f(n("./src/NotFound.jsx")),c=f(n("./src/Articles.jsx"));f(n("./src/App.jsx"));function f(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return r.default.createElement(a.BrowserRouter,null,r.default.createElement("div",{className:"container"},r.default.createElement(l.default,null),r.default.createElement("hr",null),r.default.createElement(a.Switch,null,r.default.createElement(a.Route,{exact:!0,path:"/home",component:s.Home}),r.default.createElement(a.Route,{exact:!0,path:"/issues",component:(0,a.withRouter)(o.default)}),r.default.createElement(a.Route,{exact:!0,path:"/issues/:id",component:i.default}),r.default.createElement(a.Route,{path:"/articles",component:c.default}),r.default.createElement(a.Route,{path:"/*",component:u.default})),r.default.createElement(s.Footer,null)))}},"./src/Toast.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n("react")),o=n("reactstrap"),i=s(n("prop-types"));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"componentDidUpdate",value:function(){this.props.showing&&clearTimeout(this.dismissTimer)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.dismissTimer)}},{key:"render",value:function(){return a.default.createElement(o.Collapse,{isOpen:this.props.showing},a.default.createElement("div",{style:{position:"fixed",top:30,left:0,right:0,textAlign:"center"}},a.default.createElement(o.Alert,{style:{display:"inline-block",width:500},color:this.props.bsStyle,toggle:this.props.onDismiss,isOpen:!0},this.props.message)))}}]),t}();t.default=l,l.propTypes={showing:i.default.bool.isRequired,onDismiss:i.default.func.isRequired,color:i.default.string,message:i.default.shape({}).isRequired},l.defaultProps={color:"success"}},0:function(e,t,n){n("./server/index.js"),e.exports=n("./node_modules/webpack/hot/poll.js?1000")},"babel-polyfill":function(e,t){e.exports=require("babel-polyfill")},"body-parser":function(e,t){e.exports=require("body-parser")},express:function(e,t){e.exports=require("express")},http:function(e,t){e.exports=require("http")},"isomorphic-fetch":function(e,t){e.exports=require("isomorphic-fetch")},mongodb:function(e,t){e.exports=require("mongodb")},"prop-types":function(e,t){e.exports=require("prop-types")},react:function(e,t){e.exports=require("react")},"react-dom/server":function(e,t){e.exports=require("react-dom/server")},"react-router-bootstrap":function(e,t){e.exports=require("react-router-bootstrap")},"react-router-dom":function(e,t){e.exports=require("react-router-dom")},reactstrap:function(e,t){e.exports=require("reactstrap")},"source-map-support":function(e,t){e.exports=require("source-map-support")}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){function t(e){var t=require("./"+e+"."+o+".hot-update.js");!function(e,t){if(!b[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(f[n]=t[n]);0==--v&&0===y&&x()}(t.id,t.modules)}var n,r=!0,o="205d8e6afcfc7bd3fd7f",s={},i=[],a=[];function c(e){var t=I[e];if(!t)return D;var r=function(r){return t.hot.active?(I[r]?I[r].parents.includes(e)||I[r].parents.push(e):(i=[e],n=r),t.children.includes(r)||t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),i=[]),D(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var s in D)Object.prototype.hasOwnProperty.call(D,s)&&"e"!==s&&Object.defineProperty(r,s,o(s));return r.e=function(e){return"ready"===l&&d("prepare"),y++,D.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===l&&(m[e]||w(e),0===y&&0===v&&x())}},r}var u=[],l="idle";function d(e){l=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var p,f,h,v=0,y=0,m={},g={},b={};function j(e){return+e+""===e?+e:e}function _(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=e,d("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return d("idle"),null;g={},m={},b=e.c,h=e.h,d("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});f={};return w(0),"prepare"===l&&0===y&&0===v&&x(),t})}function w(e){b[e]?(g[e]=!0,v++,t(e)):m[e]=!0}function x(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return O(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in f)Object.prototype.hasOwnProperty.call(f,n)&&t.push(j(n));e.resolve(t)}}function O(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var n,r,a,c,u;function p(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),s=o.id,i=o.chain;if((c=I[s])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var a=0;a<c.parents.length;a++){var u=c.parents[a],l=I[u];if(l){if(l.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([u]),moduleId:s,parentId:u};t.includes(u)||(l.hot._acceptedDependencies[s]?(n[u]||(n[u]=[]),v(n[u],[s])):(delete n[u],t.push(u),r.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.includes(r)||e.push(r)}}t=t||{};var y={},m=[],g={},_=function(){console.warn("[HMR] unexpected require("+x.moduleId+") to disposed module")};for(var w in f)if(Object.prototype.hasOwnProperty.call(f,w)){var x;u=j(w);var O=!1,E=!1,H=!1,M="";switch((x=f[w]?p(u):{type:"disposed",moduleId:w}).chain&&(M="\nUpdate propagation: "+x.chain.join(" -> ")),x.type){case"self-declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(O=new Error("Aborted because of self decline: "+x.moduleId+M));break;case"declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(O=new Error("Aborted because of declined dependency: "+x.moduleId+" in "+x.parentId+M));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(x),t.ignoreUnaccepted||(O=new Error("Aborted because "+u+" is not accepted"+M));break;case"accepted":t.onAccepted&&t.onAccepted(x),E=!0;break;case"disposed":t.onDisposed&&t.onDisposed(x),H=!0;break;default:throw new Error("Unexception type "+x.type)}if(O)return d("abort"),Promise.reject(O);if(E)for(u in g[u]=f[u],v(m,x.outdatedModules),x.outdatedDependencies)Object.prototype.hasOwnProperty.call(x.outdatedDependencies,u)&&(y[u]||(y[u]=[]),v(y[u],x.outdatedDependencies[u]));H&&(v(m,[x.moduleId]),g[u]=_)}var P,q=[];for(r=0;r<m.length;r++)u=m[r],I[u]&&I[u].hot._selfAccepted&&q.push({module:u,errorHandler:I[u].hot._selfAccepted});d("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var k,R,A=m.slice();A.length>0;)if(u=A.pop(),c=I[u]){var S={},T=c.hot._disposeHandlers;for(a=0;a<T.length;a++)(n=T[a])(S);for(s[u]=S,c.hot.active=!1,delete I[u],delete y[u],a=0;a<c.children.length;a++){var C=I[c.children[a]];C&&((P=C.parents.indexOf(u))>=0&&C.parents.splice(P,1))}}for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(c=I[u]))for(R=y[u],a=0;a<R.length;a++)k=R[a],(P=c.children.indexOf(k))>=0&&c.children.splice(P,1);for(u in d("apply"),o=h,g)Object.prototype.hasOwnProperty.call(g,u)&&(e[u]=g[u]);var U=null;for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(c=I[u])){R=y[u];var N=[];for(r=0;r<R.length;r++)if(k=R[r],n=c.hot._acceptedDependencies[k]){if(N.includes(n))continue;N.push(n)}for(r=0;r<N.length;r++){n=N[r];try{n(R)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:R[r],error:e}),t.ignoreErrored||U||(U=e)}}}for(r=0;r<q.length;r++){var L=q[r];u=L.module,i=[u];try{D(u)}catch(e){if("function"==typeof L.errorHandler)try{L.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||U||(U=e)}}return U?(d("fail"),Promise.reject(U)):(d("idle"),new Promise(function(e){e(m)}))}var I={};function D(t){if(I[t])return I[t].exports;var r=I[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:_,apply:O,status:function(e){if(!e)return l;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(a=i,i=[],a),children:[]};return e[t].call(r.exports,r,r.exports,c(t)),r.l=!0,r.exports}return D.m=e,D.c=I,D.d=function(e,t,n){D.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},D.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="",D.w={},D.h=function(){return o},c(0)(D.s=0)}({"./node_modules/webpack/hot/log-apply-result.js":function(e,t,n){e.exports=function(e,t){var r=e.filter(function(e){return t&&t.indexOf(e)<0}),o=n("./node_modules/webpack/hot/log.js");(r.length>0&&(o("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),r.forEach(function(e){o("warning","[HMR]  - "+e)})),t&&0!==t.length)?(o("info","[HMR] Updated modules:"),t.forEach(function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");o.groupCollapsed("info","[HMR]  - "+t.pop()),o("info","[HMR]  - "+e),o.groupEnd("info")}else o("info","[HMR]  - "+e)}),t.every(function(e){return"number"==typeof e})&&o("info","[HMR] Consider using the NamedModulesPlugin for module names.")):o("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":function(e,t){var n="info";function r(){}function o(e){return"info"===n&&"info"===e||["info","warning"].indexOf(n)>=0&&"warning"===e||["info","warning","error"].indexOf(n)>=0&&"error"===e}function s(e){return function(t,n){o(t)&&e(n)}}e.exports=function(e,t){o(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,a=console.groupCollapsed||r,c=console.groupEnd||r;e.exports.group=s(i),e.exports.groupCollapsed=s(a),e.exports.groupEnd=s(c),e.exports.setLogLevel=function(e){n=e}},"./node_modules/webpack/hot/poll.js?1000":function(e,t,n){(function(t){var r=+t.substr(1)||6e5,o=n("./node_modules/webpack/hot/log.js");setInterval(function t(r){"idle"===e.hot.status()&&e.hot.check(!0).then(function(e){e?(n("./node_modules/webpack/hot/log-apply-result.js")(e,e),t(!0)):r&&o("info","[HMR] Update applied.")}).catch(function(t){var n=e.hot.status();["abort","fail"].indexOf(n)>=0?(o("warning","[HMR] Cannot apply update."),o("warning","[HMR] "+t.stack||t.message),o("warning","[HMR] You need to restart the application!")):o("warning","[HMR] Update failed: "+t.stack||t.message)})},r)}).call(this,"?1000")},"./server/index.js":function(e,t,n){"use strict";var r=s(n("source-map-support"));n("babel-polyfill");var o=s(n("http"));function s(e){return e&&e.__esModule?e:{default:e}}r.default.install();var i=n("mongodb").MongoClient,a=n("./server/server.js"),c=void 0,u=void 0;i.connect("mongodb://localhost/issuetracker").then(function(e){c=e.db("issuetracker"),u=o.default.createServer(),a.setDb(c),u.on("request",a.app),u.listen(3e3,function(){console.log("App started on port 3000")})}).catch(function(e){console.log("ERROR",e)}),e.hot.accept("./server/server.js",function(e){u.removeListener("request",a.app),a.require("./server.js"),a.setDb(c),u.on("request",a.app)})},"./server/issue.js":function(e,t,n){"use strict";var r={New:!0,Open:!0,Assigned:!0,Fixed:!0,Verified:!0,Closed:!0},o={status:"required",owner:"required",effort:"optional",created:"required",completionDate:"optional",title:"required"};function s(e){var t={};return Object.keys(e).forEach(function(n){o[n]&&(t[n]=e[n])}),t}e.exports={validateIssue:function(e){var t=[];return Object.keys(o).forEach(function(n){"required"!==o[n]||e[n]||t.push("Missing mandatory field: "+n)}),r[e.status]||t.push(e.status+" is not a valid status."),t.length?t.join("; "):null},cleanupIssue:s,convertIssue:function(e){return e.created&&(e.created=new Date(e.created)),e.completionDate&&(e.completionDate=new Date(e.completionDate)),s(e)}}},"./server/renderedPageRouter.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n("react")),o=n("react-dom/server"),s=c(n("express")),i=c(n("./src/HelloWorld.jsx")),a=c(n("./server/template.js"));function c(e){return e&&e.__esModule?e:{default:e}}var u=new s.default;u.get("*",function(e,t){var n={addressee:"Universe"},s=(0,o.renderToString)(r.default.createElement(i.default,n));t.send((0,a.default)(s,n))}),t.default=u},"./server/server.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setDb=t.app=void 0;var r=a(n("express")),o=a(n("body-parser")),s=a(n("./server/issue.js")),i=a(n("./server/renderedPageRouter.jsx"));function a(e){return e&&e.__esModule?e:{default:e}}var c=n("mongodb").ObjectID,u=(0,r.default)();u.use(r.default.static("static")),u.use(o.default.json());var l=void 0;u.get("/api/issues",function(e,t){var n={};e.query.status&&(n.status=e.query.status),(e.query.effort_lte||e.query.effort_gte)&&(n.effort={}),e.query.effort_lte&&(n.effort.$lte=parseInt(e.query.effort_lte,10)),e.query.effort_gte&&(n.effort.$gte=parseInt(e.query.effort_gte,10)),l.collection("issues").find(n).toArray().then(function(e){var n={total_count:e.length};t.json({_metadata:n,records:e})}).catch(function(e){console.log(e),t.status(500).json({message:"Internal Server Error: "+e})})}),u.post("/api/issues",function(e,t){var n=e.body;n.created=new Date,n.status||(n.status="New");var r=s.default.validateIssue(n);r?t.status(422).json({message:"Invalid request: "+r}):l.collection("issues").insertOne(s.default.cleanupIssue(n)).then(function(e){return l.collection("issues").find({_id:e.insertedId}).limit(1).next()}).then(function(e){t.json(e)}).catch(function(e){console.log(e),t.status(500).json({message:"Internal Server Error: "+e})})}),u.get("/api/issues/:id",function(e,t){var n=void 0;try{n=new c(e.params.id)}catch(e){return void t.status(422).json({message:"Invalid issue Id format: "+e})}l.collection("issues").find({_id:n}).limit(1).next().then(function(e){e?t.json(e):t.status(404).json({message:"No such issue: "+n})}).catch(function(e){console.log(e),t.status(500).json({message:"Internal Server error: "+e})})}),u.put("/api/issues/:id",function(e,t){var n=void 0;try{n=new c(e.params.id)}catch(e){return void t.status(422).json({message:"Invalid Issue ID format: "+e})}var r=e.body;delete r._id;var o=s.default.validateIssue(r);o?t.status(422).json({message:"Invalid request: "+o}):l.collection("issues").update({_id:n},s.default.convertIssue(r)).then(function(){return l.collection("issues").find({_id:n}).limit(1).next()}).then(function(e){t.json(e)}).catch(function(e){t.status(500).json({message:"Internal Server Error: "+e})})}),u.delete("/api/issues/:id",function(e,t){var n=void 0;try{n=new c(e.params.id)}catch(e){return void t.status(422).json({message:"Invalid issue ID format: "+e})}l.collection("issues").deleteOne({_id:n}).then(function(e){1===e.result.n?t.json({status:"OK"}):t.json({status:"Warning: object not found"})}).catch(function(e){console.log(e),t.status(500).json({message:"Internal server error: "+e})})}),u.use("/",i.default),t.app=u,t.setDb=function(e){l=e}},"./server/template.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return'<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\t<title>Pro MERN Stack</title>\n  <link rel="stylesheet" type="text/css" href="/bootstrap/css/bootstrap.min.css">\n  <link rel="stylesheet" type="text/css" href="/node_modules/@fortawesome/fontawesome/styles.css">\n\t\x3c!--<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.13.0/polyfill.js"><\/script>--\x3e\n\n  <style>\n    .panel-title a {display: block; width: 100%; cursor: pointer; text-decoration: none;}\n    .header {border-bottom: 1px solid silver; margin-bottom: 20px;}\n    .footer {\n      border-top: 1px solid silver; padding-top: 5px; margin-top: 20px;\n      font-family: Helvetica; font-size: 10px; color: grey;\n    }\n    .table td {\n      vertical-align: middle;\n    }\n    .table td:last-child {\n      text-align: center;\n    }\n    .buttonsContainer .btn + .btn {\n      margin-left: 10px;\n    }\n\t</style>\n</head>\n<body>\n\t<div id="contents">'+e+"</div>\n\t<script>window.__INITIAL_STATE__ = "+JSON.stringify(t)+";<\/script>\n\t<script type='text/javascript' src=\"/vendor.js\"><\/script>\n\t<script type='text/javascript' src=\"/app.js\"><\/script>\n</body>\n</html>\n"}},"./src/HelloWorld.jsx":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n("react")),s=i(n("prop-types"));function i(e){return e&&e.__esModule?e:{default:e}}var a=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state=Object.assign({},n.props),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){var e=this;setTimeout(function(){e.setState({addressee:"Universe"})},100)}},{key:"render",value:function(){return o.default.createElement("h1",null,"Hello ",this.state.addressee,"!")}}]),t}();t.default=a,a.propTypes={addressee:s.default.string},a.defaultProps={addressee:""}},0:function(e,t,n){n("./server/index.js"),e.exports=n("./node_modules/webpack/hot/poll.js?1000")},"babel-polyfill":function(e,t){e.exports=require("babel-polyfill")},"body-parser":function(e,t){e.exports=require("body-parser")},express:function(e,t){e.exports=require("express")},http:function(e,t){e.exports=require("http")},mongodb:function(e,t){e.exports=require("mongodb")},"prop-types":function(e,t){e.exports=require("prop-types")},react:function(e,t){e.exports=require("react")},"react-dom/server":function(e,t){e.exports=require("react-dom/server")},"source-map-support":function(e,t){e.exports=require("source-map-support")}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
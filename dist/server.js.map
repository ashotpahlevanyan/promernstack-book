{"version":3,"sources":["../server/server.js"],"names":["MongoClient","require","install","app","use","static","json","db","get","req","res","filter","query","status","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","savedIssue","sendFile","resolve","connect","connection","listen"],"mappings":";;AAAA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AADA,MAAMA,cAAcC,QAAQ,SAAR,EAAmBD,WAAvC;;;AAGA,2BAAiBE,OAAjB;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA,IAAIC,EAAJ;;AAEAJ,IAAIK,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnC,QAAMC,SAAS,EAAf;AACA,MAAIF,IAAIG,KAAJ,CAAUC,MAAd,EAAsBF,OAAOE,MAAP,GAAgBJ,IAAIG,KAAJ,CAAUC,MAA1B;;AAEtBN,KAAGO,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6BJ,MAA7B,EAAqCK,OAArC,GACGC,IADH,CACSC,MAAD,IAAY;AAChB,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAX,QAAIJ,IAAJ,CAAS,EAAEgB,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACD,GAJH,EAKGM,KALH,CAKUC,KAAD,IAAW;AAChBC,YAAQC,GAAR,CAAYF,KAAZ;AACAf,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,SAAU,0BAAyBH,KAAM,EAA3C,EAArB;AACD,GARH;AASD,CAbD;;AAeAtB,IAAI0B,IAAJ,CAAS,aAAT,EAAwB,CAACpB,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMoB,WAAWrB,IAAIsB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASjB,MAAd,EAAsB;AACpBiB,aAASjB,MAAT,GAAkB,KAAlB;AACD;;AAED,QAAMqB,MAAM,gBAAMC,aAAN,CAAoBL,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPxB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;;AAED3B,KAAGO,UAAH,CAAc,QAAd,EAAwBsB,SAAxB,CAAkC,gBAAMC,YAAN,CAAmBP,QAAnB,CAAlC,EAAgEb,IAAhE,CAAqEqB,UACnE/B,GAAGO,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEwB,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EACGC,IADH,EADF,EAEazB,IAFb,CAEmB0B,UAAD,IAAgB;AAChCjC,QAAIJ,IAAJ,CAASqC,UAAT;AACD,GAJD,EAKGnB,KALH,CAKUC,KAAD,IAAW;AAChBC,YAAQC,GAAR,CAAYF,KAAZ;AACAf,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,SAAU,0BAAyBH,KAAM,EAA3C,EAArB;AACD,GARH;AASD,CAtBD;;AAwBAtB,IAAIK,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,MAAIkC,QAAJ,CAAa,eAAKC,OAAL,CAAa,mBAAb,CAAb;AACD,CAFD;;AAIA7C,YAAY8C,OAAZ,CAAoB,kCAApB,EAAwD7B,IAAxD,CAA8D8B,UAAD,IAAgB;AAC3ExC,OAAKwC,WAAWxC,EAAX,CAAc,cAAd,CAAL;AACAJ,MAAI6C,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBtB,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGH,KALH,CAKUC,KAAD,IAAW;AAClBC,UAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACD,CAPD","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\n\nimport 'babel-polyfill';\n\nimport path from 'path';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nconst MongoClient = require('mongodb').MongoClient;\nimport Issue from './issue.js';\n\nSourceMapSupport.install();\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\n\napp.get('/api/issues', (req, res) => {\n  const filter = {};\n  if (req.query.status) filter.status = req.query.status;\n\n  db.collection('issues').find(filter).toArray()\n    .then((issues) => {\n      const metadata = { total_count: issues.length };\n      res.json({ _metadata: metadata, records: issues });\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1)\n      .next()).then((savedIssue) => {\n    res.json(savedIssue);\n  })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('static/index.html'));\n});\n\nMongoClient.connect('mongodb://localhost/issuetracker').then((connection) => {\n  db = connection.db('issuetracker');\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n}).catch((error) => {\n  console.log('ERROR:', error);\n});\n"]}
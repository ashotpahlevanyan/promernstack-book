{"version":3,"sources":["../server/server.js"],"names":["bodyParser","require","express","app","MongoClient","Issue","SourceMapSupport","install","db","use","static","json","process","env","NODE_ENV","webpack","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","_id","insertedId","limit","next","newIssue1","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["//  'use strict';\n\nconst bodyParser = require('body-parser');\n\nconst express = require('express');\n\nconst app = express();\n\nconst MongoClient = require('mongodb').MongoClient;\nconst Issue = require('./issue.js');\n\nrequire('babel-polyfill');\n\nconst SourceMapSupport = require('source-map-support');\n\nSourceMapSupport.install();\n\nlet db;\n\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n  const config = require('../webpack.config');\n  config.entry.app.push(\n    'webpack-hot-middleware/client',\n    'webpack/hot/only-dev-server',\n  );\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then((issues) => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues });\n  })\n    .catch((error) => {\n      console.log('error');\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.post('/api/issues/', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(newIssue).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()).then((newIssue1) => {\n    res.json(newIssue1);\n  })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\nMongoClient.connect('mongodb://localhost/issuetracker').then((connection) => {\n  db = connection.db('issuetracker');\n\n  app.listen(3000, () => {\n    console.log('App Started on Port 3000');\n  });\n}).catch((error) => {\n  console.log('ERROR', error);\n});\n\n"]}
{"version":3,"sources":["../server/server.js"],"names":["bodyParser","require","express","app","MongoClient","Issue","polyfill","SourceMapSupport","install","db","use","static","json","process","env","NODE_ENV","webpack","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","_id","insertedId","limit","next","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["'use strict';\n\nconst bodyParser = require('body-parser');\n\nconst express = require('express');\n\nconst app = express();\n\nconst MongoClient = require('mongodb').MongoClient;\nconst Issue = require('./issue.js');\n\nconst polyfill = require('babel-polyfill');\n\nconst SourceMapSupport = require('source-map-support');\nSourceMapSupport.install();\n\nlet db;\n\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nif (process.env.NODE_ENV !== 'production') {\n\tconst webpack = require('webpack');\n\tconst webpackDevMiddleware = require('webpack-dev-middleware');\n\tconst webpackHotMiddleware = require('webpack-hot-middleware');\n\tconst config = require('../webpack.config');\n\tconfig.entry.app.push('webpack-hot-middleware/client',\n\t\t'webpack/hot/only-dev-server');\n\tconfig.plugins.push(new webpack.HotModuleReplacementPlugin());\n\tconst bundler = webpack(config);\n\tapp.use(webpackDevMiddleware(bundler, { noInfo: true }));\n\tapp.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.get('/api/issues', (req,res) => {\n\tdb.collection('issues').find().toArray().then(issues => {\n\t\tconst metadata = {total_count: issues.length};\n\t\tres.json({_metadata: metadata, records: issues});\n\t}).catch(error => {\n\t\tconsole.log('error');\n\t\tres.status(500).json({message: `Internal Server Error: ${error}`});\n\t});\n});\n\napp.post('/api/issues/', (req, res) => {\n\tconst newIssue = req.body;\n\tnewIssue.created = new Date();\n\tif(!newIssue.status) {\n\t\tnewIssue.status = 'New';\n\t}\n\n\tconst err = Issue.validateIssue(newIssue);\n\tif(err) {\n\t\tres.status(422).json({message: `Invalid request: ${err}`});\n\t\treturn;\n\t}\n\n\tdb.collection('issues').insertOne(newIssue).then(result =>\n\t\tdb.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n\t).then(newIssue => {\n\t\tres.json(newIssue);\n\t}).catch(error => {\n\t\tconsole.log(error);\n\t\tres.status(500).json({ message: `Internal Server Error: ${error}` });\n\t});\n\n});\n\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n\tdb = connection.db('issuetracker');\n\n\tapp.listen(3000, function() {\n\t\tconsole.log('App Started on Port 3000');\n\t});\n}).catch(error => {\n\tconsole.log('ERROR', error);\n});\n\n\n"]}
{"version":3,"sources":["../server/server.js"],"names":["bodyParser","require","express","MongoClient","Issue","SourceMapSupport","webpack","webpackDevMiddleware","webpackHotMiddleware","config","app","install","db","use","static","json","process","env","NODE_ENV","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","newIssue1","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["//  'use strict';\n\nconst bodyParser = require('body-parser');\nconst express = require('express');\nconst MongoClient = require('mongodb').MongoClient;\nconst Issue = require('./issue.js');\nrequire('babel-polyfill');\nconst SourceMapSupport = require('source-map-support');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\nconst webpackHotMiddleware = require('webpack-hot-middleware');\nconst config = require('../webpack.config');\n\nconst app = express();\n\nSourceMapSupport.install();\n\nlet db;\n\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nif (process.env.NODE_ENV !== 'production') {\n  config.entry.app.push(\n    'webpack-hot-middleware/client',\n    'webpack/hot/only-dev-server',\n  );\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then((issues) => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues });\n  })\n    .catch((error) => {\n      console.log('error');\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.post('/api/issues/', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()).then((newIssue1) => {\n    res.json(newIssue1);\n  })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\nMongoClient.connect('mongodb://localhost/issuetracker').then((connection) => {\n  db = connection.db('issuetracker');\n\n  app.listen(3000, () => {\n    console.log('App Started on Port 3000');\n  });\n}).catch((error) => {\n  console.log('ERROR', error);\n});\n\n"]}